%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1601.m00.i125.n025.S.c12.320851289 Patients in doctors waiting room. Vector illustration.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Антон
%%CreationDate: 1/15/2016
%%BoundingBox: 0 0 525 350
%%HiResBoundingBox: 0 0 525 350
%%CropBox: 0 0 525 350
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.0 x256 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1510.m00.i125.n025.P.c25.284777735 Business people waiting for job interview. Vector recruitment concept in flat design style</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2016-01-15T16:28:55+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2016-01-15T16:28:55+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2016-01-15T16:28:55+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6ppGpnTbv6wIllPErQml&#xA;K9wc6PUYfEjV0+f6HWfl58dcWzLB5x0QgEicHuOC/wDNWav+Tsnk9KO3sHdL5ftd/jHQ/wDi7/gB&#xA;/wA1YP5PyeSf5ewf0vl+13+MdD/4u/4Af81Y/wAn5PJf5ewf0vl+13+MdD/4u/4Af81Y/wAn5PJf&#xA;5ewf0vl+13+MdD/4u/4Af81Y/wAn5PJf5ewf0vl+1JPMPmOHUI/q0ER9EMGEsmz1A7AdOvjmbpdI&#xA;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&#xA;f/a3/wCnfH99/Q+1f3H+2f7F/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:56294db8-a829-fb43-902b-b5c4c3155b6a</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:56294db8-a829-fb43-902b-b5c4c3155b6a</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:041e7e1e-bebf-4a95-b4f0-196eea47efd2</stRef:instanceID>
            <stRef:documentID>xmp.did:3ef87f5a-224a-1142-a7c8-8ca182e6e95b</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:4239c0b2-9560-5644-9c1b-2d4eaefa5ca4</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:26:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:56294db8-a829-fb43-902b-b5c4c3155b6a</stEvt:instanceID>
                  <stEvt:when>2016-01-15T16:28:55+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>525.000000</stDim:w>
            <stDim:h>350.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р‘РµР»С‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Р§РµСЂРЅС‹Р№</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>РћС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -350 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 350 li
525 350 li
525 0 li
cp
clp
0 0 mo
0 350 li
525 350 li
525 0 li
0 0 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.0588235 .780392 .945098 rgb
f
0 279.333 mo
0 187.333 li
525 187.333 li
525 279.333 li
0 279.333 li
.0196078 .627451 .839216 rgb
f
525 52.6667 mo
512.135 52.6667 li
512.135 50.3333 li
414.003 50.3333 li
414.003 52.6667 li
0 52.6667 li
0 0 li
525 0 li
525 52.6667 li
.341176 .847059 .960784 rgb
f
0 283.333 mo
0 350 li
525 350 li
525 283.333 li
0 283.333 li
.356863 .619608 .780392 rgb
f
0 276.423 mo
0 283.444 li
525 283.444 li
525 276.423 li
0 276.423 li
.956863 .956863 .956863 rgb
f
0 181.145 mo
0 192.943 li
525 192.943 li
525 181.145 li
0 181.145 li
f
0 50.0993 mo
0 55.6293 li
525 55.6293 li
525 50.0993 li
0 50.0993 li
cp
f
110.374 317.975 mo
110.374 317.761 110.131 317.588 109.83 317.588 cv
24.7863 317.588 li
24.4859 317.588 24.2425 317.761 24.2425 317.975 cv
24.2425 325.002 li
24.2425 325.215 24.4859 325.388 24.7863 325.388 cv
109.83 325.388 li
110.131 325.388 110.374 325.215 110.374 325.002 cv
110.374 317.975 li
319.221 287.89 mo
319.221 287.677 319.057 287.504 318.854 287.504 cv
261.433 287.504 li
261.23 287.504 261.065 287.677 261.065 287.89 cv
261.065 294.918 li
261.065 295.131 261.23 295.304 261.433 295.304 cv
318.854 295.304 li
319.057 295.304 319.221 295.131 319.221 294.918 cv
319.221 287.89 li
519.302 327.527 mo
519.302 327.346 519.067 327.2 518.777 327.2 cv
436.649 327.2 li
436.359 327.2 436.124 327.346 436.124 327.527 cv
436.124 333.471 li
436.124 333.651 436.359 333.798 436.649 333.798 cv
518.777 333.798 li
519.067 333.798 519.302 333.651 519.302 333.471 cv
519.302 327.527 li
223.104 333.304 mo
223.104 332.997 222.703 332.747 222.208 332.747 cv
82.1361 332.747 li
81.6414 332.747 81.2403 332.997 81.2403 333.304 cv
81.2403 343.443 li
81.2403 343.75 81.6414 344 82.1361 344 cv
222.208 344 li
222.703 344 223.104 343.75 223.104 343.443 cv
223.104 333.304 li
232.47 290.428 mo
232.47 289.953 231.85 289.567 231.086 289.567 cv
14.6347 289.567 li
13.8701 289.567 13.2505 289.953 13.2505 290.428 cv
13.2505 306.095 li
13.2505 306.57 13.8701 306.956 14.6347 306.956 cv
231.086 306.956 li
231.85 306.956 232.47 306.57 232.47 306.095 cv
232.47 290.428 li
421.524 319.128 mo
421.524 318.728 421.001 318.403 420.357 318.403 cv
237.921 318.403 li
237.276 318.403 236.754 318.728 236.754 319.128 cv
236.754 332.333 li
236.754 332.734 237.276 333.059 237.921 333.059 cv
420.357 333.059 li
421.001 333.059 421.524 332.734 421.524 332.333 cv
421.524 319.128 li
516.264 309.963 mo
516.264 310.364 515.742 310.689 515.097 310.689 cv
332.661 310.689 li
332.016 310.689 331.494 310.364 331.494 309.963 cv
331.494 296.758 li
331.494 296.357 332.016 296.032 332.661 296.032 cv
515.097 296.032 li
515.742 296.032 516.264 296.357 516.264 296.758 cv
516.264 309.963 li
.294118 .588235 .737255 rgb
f
414.003 50.3333 mo
414.003 283.421 li
512.135 283.421 li
512.135 50.3333 li
414.003 50.3333 li
.956863 .956863 .956863 rgb
f
504.079 282.112 mo
504.079 56.8681 li
422.059 56.8681 li
422.059 282.112 li
504.079 282.112 li
.717647 .717647 .717647 rgb
f
502.723 281.04 mo
502.723 58.0762 li
423.415 58.0762 li
423.415 281.04 li
502.723 281.04 li
.85098 .85098 .85098 rgb
f
441.143 186.086 mo
440.676 186.078 440.218 186.083 439.765 186.097 cv
439.765 185.348 li
439.765 183.398 438.184 181.817 436.234 181.817 cv
428.787 181.817 li
426.837 181.817 425.257 183.398 425.257 185.348 cv
425.257 189.11 li
425.257 191.06 426.837 192.641 428.787 192.641 cv
436.234 192.641 li
437.515 192.641 438.626 191.952 439.245 190.932 cv
439.838 190.902 440.44 190.883 441.058 190.894 cv
447.636 191.01 452.922 193.759 452.969 191.103 cv
453.015 188.448 447.721 186.202 441.143 186.086 cv
cp
.717647 .717647 .717647 rgb
f
438.971 187.948 mo
438.971 189.792 437.476 191.286 435.633 191.286 cv
428.594 191.286 li
426.751 191.286 425.257 189.792 425.257 187.948 cv
425.257 184.392 li
425.257 182.549 426.751 181.055 428.594 181.055 cv
435.633 181.055 li
437.476 181.055 438.971 182.549 438.971 184.392 cv
438.971 187.948 li
cp
.929412 .588235 .180392 rgb
f
435.633 189.809 mo
428.594 189.809 li
426.751 189.809 425.257 188.314 425.257 186.471 cv
425.257 187.948 li
425.257 189.792 426.751 191.286 428.594 191.286 cv
435.633 191.286 li
437.477 191.286 438.971 189.792 438.971 187.948 cv
438.971 186.471 li
438.971 188.314 437.477 189.809 435.633 189.809 cv
cp
.756863 .45098 .117647 rgb
f
428.935 187.708 mo
428.979 185.198 434.055 183.251 440.273 183.36 cv
446.491 183.47 451.496 185.593 451.452 188.103 cv
451.408 190.613 446.411 188.014 440.193 187.905 cv
433.976 187.796 428.891 190.218 428.935 187.708 cv
cp
.988235 .678431 .337255 rgb
f
440.193 187.082 mo
434.932 186.99 430.449 188.629 428.954 187.867 cv
429.149 190.09 434.124 187.799 440.193 187.905 cv
446.277 188.012 451.178 190.489 451.429 188.246 cv
449.939 188.995 445.491 187.175 440.193 187.082 cv
cp
.847059 .490196 .0980392 rgb
f
483.3 114.342 mo
446.841 114.342 li
446.841 105.874 li
483.3 105.874 li
483.3 114.342 li
.756863 .45098 .117647 rgb
f
482.437 108.798 mo
481.012 108.798 480.405 107.723 480.488 106.627 cv
450.058 106.627 li
449.914 107.724 449.084 108.798 447.677 108.798 cv
447.593 108.789 li
447.593 111.239 li
447.663 111.233 li
449.168 111.233 449.76 112.431 449.589 113.59 cv
480.484 113.59 li
480.484 112.478 481.212 111.288 482.548 111.112 cv
482.548 108.787 li
482.437 108.798 li
.929412 .588235 .180392 rgb
f
454.534 106.627 mo
449.226 111.934 li
449.567 112.384 449.677 112.992 449.589 113.59 cv
454.615 113.59 li
461.579 106.627 li
454.534 106.627 li
.988235 .678431 .337255 rgb
f
467.915 106.627 mo
460.952 113.59 li
468.15 113.59 li
470.471 111.269 472.793 108.948 475.114 106.627 cv
467.915 106.627 li
f
482.437 108.798 mo
481.402 108.798 480.803 108.227 480.581 107.496 cv
478.55 109.527 476.519 111.559 474.487 113.59 cv
477.687 113.59 li
482.483 108.793 li
482.437 108.798 li
f
448.593 113.03 mo
448.593 113.346 448.336 113.603 448.02 113.603 cv
447.704 113.603 447.447 113.346 447.447 113.03 cv
447.447 112.714 447.704 112.458 448.02 112.458 cv
448.336 112.458 448.593 112.714 448.593 113.03 cv
cp
.717647 .717647 .717647 rgb
f
448.593 107.113 mo
448.593 107.429 448.336 107.685 448.02 107.685 cv
447.704 107.685 447.447 107.429 447.447 107.113 cv
447.447 106.796 447.704 106.54 448.02 106.54 cv
448.336 106.54 448.593 106.796 448.593 107.113 cv
cp
f
482.871 113.03 mo
482.871 113.346 482.614 113.603 482.298 113.603 cv
481.982 113.603 481.725 113.346 481.725 113.03 cv
481.725 112.714 481.982 112.458 482.298 112.458 cv
482.614 112.458 482.871 112.714 482.871 113.03 cv
f
482.871 107.113 mo
482.871 107.429 482.614 107.685 482.298 107.685 cv
481.982 107.685 481.725 107.429 481.725 107.113 cv
481.725 106.796 481.982 106.54 482.298 106.54 cv
482.614 106.54 482.871 106.796 482.871 107.113 cv
f
0 50.3333 mo
0 283.421 li
49.7704 283.421 li
49.7704 50.3333 li
0 50.3333 li
cp
.956863 .956863 .956863 rgb
f
0 56.8681 mo
0 282.112 li
41.7146 282.112 li
41.7146 56.8681 li
0 56.8681 li
cp
.717647 .717647 .717647 rgb
f
0 58.0761 mo
0 281.04 li
40.3584 281.04 li
40.3584 58.0761 li
0 58.0761 li
cp
.85098 .85098 .85098 rgb
f
0 105.874 mo
0 114.342 li
20.9357 114.342 li
20.9357 105.874 li
0 105.874 li
cp
.756863 .45098 .117647 rgb
f
20.0728 108.798 mo
18.6478 108.798 18.0406 107.724 18.1238 106.627 cv
0 106.627 li
0 113.59 li
18.1194 113.59 li
18.1191 112.478 18.8478 111.288 20.1837 111.112 cv
20.1837 108.787 li
20.0728 108.798 li
cp
.929412 .588235 .180392 rgb
f
5.55103 106.627 mo
0 112.178 li
0 113.59 li
5.78601 113.59 li
8.10706 111.269 10.4281 108.948 12.7491 106.627 cv
5.55103 106.627 li
cp
.988235 .678431 .337255 rgb
f
20.0727 108.798 mo
19.0372 108.798 18.4386 108.227 18.2165 107.496 cv
16.1853 109.527 14.1541 111.559 12.1229 113.59 cv
15.322 113.59 li
20.1187 108.793 li
20.0727 108.798 li
cp
f
20.5063 113.03 mo
20.5063 113.346 20.2499 113.603 19.9336 113.603 cv
19.6173 113.603 19.3609 113.346 19.3609 113.03 cv
19.3609 112.714 19.6173 112.457 19.9336 112.457 cv
20.2499 112.457 20.5063 112.714 20.5063 113.03 cv
cp
.717647 .717647 .717647 rgb
f
20.5062 107.113 mo
20.5062 107.429 20.2499 107.685 19.9336 107.685 cv
19.6173 107.685 19.3609 107.429 19.3609 107.113 cv
19.3609 106.796 19.6173 106.54 19.9336 106.54 cv
20.2498 106.54 20.5062 106.796 20.5062 107.113 cv
cp
f
405.38 137.313 mo
333.683 137.313 li
333.683 135.717 li
334.019 135.717 li
334.019 135.717 li
349.466 135.717 li
367.445 135.717 li
404.383 135.717 li
404.383 134.923 li
404.463 135.022 404.543 135.125 404.623 135.232 cv
404.883 135.579 405.135 135.927 405.38 136.278 cv
405.38 137.313 li
404.383 130.819 mo
404.383 98.7792 li
404.383 98.7791 li
404.383 80.8001 li
404.383 74.2465 li
405.38 74.2465 li
405.38 130.53 li
405.043 130.622 404.709 130.718 404.383 130.819 cv
.101961 .607843 .741176 rgb
f
332.686 135.717 mo
332.686 72.6509 li
404.383 72.6509 li
404.383 135.717 li
332.686 135.717 li
.85098 .85098 .85098 rgb
f
401.893 133.228 mo
335.175 133.228 li
335.175 75.1403 li
401.893 75.1403 li
401.893 133.228 li
.717647 .717647 .717647 rgb
f
336.171 132.232 mo
336.171 76.1361 li
400.898 76.1361 li
400.898 132.232 li
336.171 132.232 li
.52549 .87451 .866667 rgb
f
363.54 104.339 mo
363.586 104.426 363.632 104.516 363.676 104.608 cv
363.721 104.501 363.784 104.392 363.866 104.282 cv
363.768 104.32 363.67 104.339 363.571 104.339 cv
363.54 104.339 li
353.341 104.296 mo
353.423 104.406 353.486 104.515 353.531 104.622 cv
353.575 104.53 353.621 104.44 353.667 104.353 cv
353.637 104.353 li
353.537 104.353 353.439 104.334 353.341 104.296 cv
364.089 105.755 mo
364.131 106.039 364.096 106.271 364.028 106.455 cv
364.233 106.309 364.47 106.179 364.708 106.065 cv
364.089 105.755 li
352.499 106.08 mo
352.738 106.193 352.974 106.324 353.18 106.47 cv
353.112 106.285 353.076 106.053 353.118 105.769 cv
352.499 106.08 li
364.861 108.31 mo
365.405 108.531 365.92 108.891 366.395 109.223 cv
366.539 109.324 li
366.208 108.996 365.969 108.711 366.042 108.375 cv
365.93 108.376 li
365.632 108.376 365.251 108.362 364.861 108.31 cv
351.165 108.39 mo
351.238 108.726 350.999 109.011 350.667 109.338 cv
350.813 109.237 li
351.288 108.905 351.802 108.546 352.345 108.324 cv
351.955 108.376 351.576 108.39 351.277 108.39 cv
351.165 108.39 li
361.518 118.358 mo
361.401 118.46 361.387 118.542 361.403 118.633 cv
361.511 118.884 li
361.56 118.676 361.623 118.442 361.699 118.197 cv
361.518 118.358 li
355.507 118.21 mo
355.583 118.456 355.647 118.69 355.695 118.898 cv
355.804 118.647 li
355.82 118.556 355.807 118.474 355.69 118.372 cv
355.507 118.21 li
349.426 119.443 mo
349.479 119.52 349.63 119.625 349.742 119.625 cv
349.739 119.622 349.855 119.396 350.048 119.061 cv
349.845 119.197 349.636 119.326 349.426 119.443 cv
367.167 119.053 mo
367.367 119.393 367.488 119.626 367.492 119.635 cv
367.781 119.429 li
367.574 119.314 367.369 119.187 367.167 119.053 cv
364.521 120.214 mo
364.509 120.45 364.498 120.594 364.497 120.602 cv
364.488 120.715 364.522 120.768 364.556 120.806 cv
364.657 120.916 364.885 120.99 365.123 120.99 cv
365.256 120.982 li
365.225 120.959 li
364.958 120.758 364.723 120.502 364.521 120.214 cv
351.952 120.996 mo
352.084 121.004 li
352.322 121.004 352.55 120.93 352.651 120.82 cv
352.686 120.783 352.719 120.729 352.71 120.616 cv
352.709 120.608 352.699 120.464 352.687 120.228 cv
352.484 120.517 352.249 120.772 351.982 120.973 cv
351.952 120.996 li
342.586 128.256 mo
341.893 128.256 341.295 127.982 340.809 127.441 cv
339.256 125.712 338.895 121.188 339.707 113.61 cv
341.122 100.407 349.593 93.599 352.896 93.599 cv
352.992 93.601 li
353.937 93.6404 354.717 93.9953 355.313 94.6556 cv
355.934 95.3456 356.342 96.3462 356.54 97.6804 cv
356.79 94.2521 356.889 90.0291 356.291 87.6627 cv
356.134 87.0427 li
358.023 87.0427 li
358.095 87.4546 li
359.092 93.1361 357.672 103.441 357.256 105.472 cv
357.279 105.683 li
356.334 107.448 li
356.077 107.479 li
356.066 107.48 355.804 107.511 355.451 107.511 cv
354.731 107.511 354.17 107.393 353.774 107.157 cv
353.813 107.367 li
353.819 107.528 353.773 107.901 353.264 108.112 cv
353.338 108.111 li
353.437 108.111 353.535 108.118 353.633 108.133 cv
354.655 108.29 355.304 108.745 355.416 109.382 cv
355.475 109.72 355.419 110.371 354.382 110.936 cv
353.779 111.265 352.874 111.577 351.947 111.82 cv
352.274 112.004 352.347 112.307 352.363 112.427 cv
352.364 112.437 li
352.922 111.991 353.272 111.724 353.631 111.724 cv
353.875 111.724 354.29 111.886 354.29 112.491 cv
354.29 113.234 353.322 114.667 351.892 115.799 cv
352.093 115.898 352.207 116.074 352.25 116.243 cv
352.268 116.35 li
352.43 116.261 352.588 116.211 352.737 116.211 cv
352.928 116.235 li
352.996 116.028 353.08 115.86 353.183 115.748 cv
353.323 115.596 353.506 115.512 353.698 115.512 cv
353.871 115.512 354.034 115.576 354.185 115.702 cv
354.171 115.394 354.186 115.048 354.235 114.655 cv
354.371 113.567 355.537 109.442 357.712 108.56 cv
357.802 108.523 li
359.319 108.519 li
359.407 108.553 li
361.649 109.431 362.836 113.553 362.972 114.641 cv
363.021 115.034 363.037 115.38 363.022 115.688 cv
363.173 115.562 363.336 115.498 363.509 115.498 cv
363.701 115.498 363.884 115.582 364.024 115.733 cv
364.127 115.845 364.211 116.014 364.279 116.221 cv
364.47 116.196 li
364.619 116.196 364.777 116.247 364.938 116.336 cv
364.957 116.229 li
365 116.06 365.114 115.884 365.315 115.785 cv
363.885 114.653 362.918 113.221 362.918 112.477 cv
362.918 111.872 363.332 111.71 363.577 111.71 cv
363.935 111.71 364.285 111.977 364.843 112.423 cv
364.844 112.413 li
364.86 112.293 364.933 111.99 365.259 111.806 cv
364.333 111.564 363.428 111.252 362.826 110.923 cv
361.788 110.356 361.732 109.706 361.792 109.368 cv
361.903 108.731 362.553 108.276 363.574 108.119 cv
363.672 108.104 363.771 108.097 363.87 108.097 cv
363.944 108.098 li
363.434 107.887 363.388 107.514 363.394 107.353 cv
363.433 107.143 li
363.037 107.379 362.476 107.497 361.756 107.497 cv
361.403 107.497 361.141 107.466 361.13 107.465 cv
360.873 107.434 li
359.927 105.67 li
359.958 105.4 li
359.5 103.108 358.163 92.9864 359.134 87.4546 cv
359.206 87.0427 li
361.094 87.0427 li
360.938 87.6627 li
360.348 89.9956 360.435 94.1665 360.68 97.5871 cv
360.882 96.2928 361.285 95.3178 361.895 94.6415 cv
362.49 93.9812 363.27 93.6262 364.214 93.5869 cv
364.311 93.5849 li
367.614 93.5849 376.085 100.393 377.5 113.596 cv
378.312 121.174 377.952 125.699 376.398 127.427 cv
375.912 127.968 375.314 128.242 374.621 128.242 cv
374.621 128.242 li
373.993 128.242 373.289 128.008 372.529 127.546 cv
370.793 126.493 367.995 126.053 365.526 125.665 cv
363.399 125.331 361.719 125.067 360.988 124.457 cv
359.403 123.137 359.403 118.988 359.403 113.247 cv
359.403 111.247 358.814 110.594 358.611 110.594 cv
358.374 110.594 357.804 111.361 357.804 113.261 cv
357.804 118.347 357.804 123.151 356.219 124.472 cv
355.488 125.081 353.808 125.345 351.681 125.679 cv
349.212 126.067 346.414 126.507 344.678 127.56 cv
343.918 128.022 343.214 128.256 342.586 128.256 cv
.294118 .54902 .537255 rgb
f
377.005 113.649 mo
375.599 100.528 367.047 93.9673 364.235 94.0844 cv
361.424 94.2015 360.838 97.4817 361.072 101.231 cv
360.978 101.584 360.874 102.191 360.769 102.931 cv
360.409 101.134 359.418 91.6453 360.455 87.5408 cv
360.455 87.5408 360.455 87.5408 359.624 87.5408 cv
358.667 92.9972 360.003 103.167 360.462 105.378 cv
360.44 105.571 li
361.189 106.971 li
361.189 106.971 364.118 107.322 363.532 105.565 cv
362.947 103.808 361.541 102.636 362.361 102.519 cv
362.721 102.468 362.9 102.823 363.058 103.178 cv
363.259 103.631 363.424 104.085 363.884 103.691 cv
364.704 102.988 367.047 102.754 365.758 103.456 cv
364.47 104.159 363.65 104.979 364.353 105.331 cv
365.055 105.682 365.055 105.682 365.055 105.682 cv
365.055 105.682 366.461 105.331 367.398 104.628 cv
368.336 103.925 367.281 105.799 366.227 106.034 cv
365.172 106.268 363.064 107.322 364.235 107.674 cv
365.407 108.025 367.516 107.908 368.453 107.44 cv
368.967 107.183 368.882 107.524 368.468 107.866 cv
368.128 108.148 367.565 108.43 366.93 108.377 cv
365.524 108.26 368.336 109.783 367.633 110.251 cv
367.266 110.496 366.612 109.975 365.854 109.454 cv
365.16 108.977 364.378 108.499 363.65 108.611 cv
362.127 108.845 361.775 109.783 363.064 110.485 cv
364.353 111.188 367.398 111.891 368.453 111.774 cv
368.911 111.723 368.993 111.894 368.776 112.064 cv
368.493 112.286 367.704 112.508 366.578 112.243 cv
364.587 111.774 365.29 113.297 366.578 113.649 cv
367.867 114 368.804 115.523 368.218 115.406 cv
367.633 115.289 367.633 114.703 366.227 114 cv
364.821 113.297 363.415 111.54 363.415 112.477 cv
363.415 113.414 365.758 116.226 368.453 116.812 cv
371.147 117.397 369.039 117.866 366.695 116.577 cv
364.353 115.289 365.524 117.632 368.101 119.037 cv
368.804 119.623 367.398 120.56 367.047 119.858 cv
366.695 119.155 365.172 116.694 364.47 116.694 cv
363.767 116.694 364.118 119.506 365.524 120.56 cv
366.93 121.615 363.884 121.966 364.001 120.56 cv
364.118 119.155 364.118 115.289 363.298 116.109 cv
362.478 116.929 361.892 119.155 361.892 119.623 cv
361.892 120.092 360.252 118.803 361.189 117.983 cv
362.127 117.163 362.712 116.577 362.478 114.703 cv
362.341 113.609 361.153 109.771 359.225 109.017 cv
358.782 109.018 358.339 109.022 357.899 109.021 cv
356.02 109.784 354.867 113.611 354.729 114.717 cv
354.495 116.591 355.081 117.177 356.018 117.997 cv
356.955 118.817 355.315 120.106 355.315 119.637 cv
355.315 119.169 354.729 116.943 353.909 116.123 cv
353.089 115.303 353.089 119.169 353.206 120.575 cv
353.323 121.98 350.277 121.629 351.683 120.575 cv
353.089 119.52 353.44 116.709 352.737 116.709 cv
352.035 116.709 350.512 119.169 350.16 119.872 cv
349.809 120.575 348.403 119.637 349.106 119.052 cv
351.683 117.646 352.855 115.303 350.512 116.591 cv
348.169 117.88 346.06 117.411 348.754 116.826 cv
351.449 116.24 353.792 113.428 353.792 112.491 cv
353.792 111.554 352.386 113.311 350.98 114.014 cv
349.574 114.717 349.574 115.303 348.989 115.42 cv
348.403 115.537 349.34 114.014 350.629 113.663 cv
351.917 113.311 352.62 111.788 350.629 112.257 cv
349.503 112.522 348.714 112.3 348.431 112.078 cv
348.214 111.908 348.296 111.737 348.754 111.788 cv
349.809 111.905 352.855 111.202 354.143 110.499 cv
355.432 109.797 355.081 108.859 353.558 108.625 cv
352.829 108.513 352.047 108.99 351.353 109.468 cv
350.595 109.989 349.941 110.51 349.574 110.265 cv
348.871 109.797 351.683 108.274 350.277 108.391 cv
349.642 108.444 349.079 108.162 348.739 107.881 cv
348.325 107.539 348.24 107.197 348.754 107.454 cv
349.692 107.922 351.8 108.039 352.972 107.688 cv
354.143 107.336 352.035 106.282 350.98 106.048 cv
349.926 105.814 348.871 103.939 349.809 104.642 cv
350.746 105.345 352.152 105.696 352.152 105.696 cv
352.152 105.696 352.152 105.696 352.855 105.345 cv
353.558 104.993 352.737 104.173 351.449 103.47 cv
350.16 102.768 352.503 103.002 353.323 103.705 cv
353.783 104.099 353.948 103.645 354.149 103.192 cv
354.307 102.837 354.486 102.482 354.846 102.533 cv
355.666 102.65 354.26 103.822 353.675 105.579 cv
353.089 107.336 356.018 106.985 356.018 106.985 cv
356.669 105.768 li
356.67 105.769 li
356.67 105.768 li
356.768 105.585 li
356.752 105.449 li
357.197 103.386 358.572 93.0552 357.604 87.5408 cv
356.773 87.5408 356.773 87.5408 356.773 87.5408 cv
357.824 91.6968 356.794 101.375 356.446 102.997 cv
356.338 102.232 356.231 101.607 356.135 101.245 cv
356.369 97.4957 355.783 94.2155 352.972 94.0984 cv
350.16 93.9812 341.608 100.542 340.202 113.663 cv
338.796 126.783 341.14 129.127 344.42 127.135 cv
347.7 125.143 354.495 125.261 355.901 124.089 cv
357.306 122.917 357.306 117.978 357.306 113.261 cv
357.306 109.07 359.901 109.015 359.901 113.247 cv
359.901 118.586 359.901 122.903 361.307 124.075 cv
362.712 125.247 369.507 125.129 372.787 127.121 cv
376.068 129.112 378.411 126.769 377.005 113.649 cv
.956863 .956863 .956863 rgb
f
397.925 82.8036 mo
339.071 82.8036 li
339.071 78.0772 li
397.925 78.0772 li
397.925 82.8036 li
.294118 .54902 .537255 rgb
f
397.7 88.9928 mo
374.519 88.9928 li
374.519 86.4046 li
397.7 86.4046 li
397.7 88.9928 li
f
397.7 128.379 mo
382.283 128.379 li
382.283 125.791 li
397.7 125.791 li
397.7 128.379 li
cp
f
397.7 124.103 mo
382.283 124.103 li
382.283 121.514 li
397.7 121.514 li
397.7 124.103 li
f
397.588 93.7191 mo
380.37 93.7191 li
380.37 92.5938 li
397.588 92.5938 li
397.588 93.7191 li
.956863 .956863 .956863 rgb
f
397.588 97.3201 mo
380.37 97.3201 li
380.37 96.1948 li
397.588 96.1948 li
397.588 97.3201 li
f
397.588 100.921 mo
380.37 100.921 li
380.37 99.7958 li
397.588 99.7958 li
397.588 100.921 li
f
397.588 104.522 mo
380.37 104.522 li
380.37 103.397 li
397.588 103.397 li
397.588 104.522 li
f
397.588 108.123 mo
380.37 108.123 li
380.37 106.998 li
397.588 106.998 li
397.588 108.123 li
f
397.588 111.724 mo
380.37 111.724 li
380.37 110.599 li
397.588 110.599 li
397.588 111.724 li
f
404.383 98.7792 mo
404.383 80.8003 li
404.383 80.8001 li
404.383 98.7791 li
.372549 .72549 .819608 rgb
f
367.445 135.717 mo
349.466 135.717 li
351.955 133.228 li
369.934 133.228 li
367.445 135.717 li
401.893 101.269 mo
401.893 83.2899 li
404.383 80.8001 li
404.383 98.7792 li
401.893 101.269 li
.894118 .894118 .894118 rgb
f
369.934 133.228 mo
351.955 133.228 li
352.951 132.232 li
370.93 132.232 li
369.934 133.228 li
400.898 102.264 mo
400.898 84.2855 li
401.893 83.2899 li
401.893 101.269 li
400.898 102.264 li
.803922 .803922 .803922 rgb
f
370.93 132.232 mo
352.951 132.232 li
360.851 124.332 li
360.895 124.377 360.941 124.418 360.988 124.457 cv
361.719 125.067 363.399 125.331 365.526 125.665 cv
367.995 126.053 370.793 126.493 372.529 127.546 cv
373.289 128.008 373.993 128.242 374.621 128.242 cv
374.621 128.242 li
374.73 128.242 374.836 128.235 374.94 128.222 cv
370.93 132.232 li
377.232 125.93 mo
378.052 123.621 378.138 119.551 377.5 113.596 cv
377.309 111.817 376.991 110.155 376.574 108.609 cv
380.661 104.522 li
397.588 104.522 li
397.588 103.397 li
381.786 103.397 li
384.262 100.921 li
397.588 100.921 li
397.588 99.7958 li
385.387 99.7958 li
387.863 97.3201 li
397.588 97.3201 li
397.588 96.1948 li
388.988 96.1948 li
391.464 93.7191 li
397.588 93.7191 li
397.588 92.5938 li
392.589 92.5938 li
396.19 88.9928 li
397.7 88.9928 li
397.7 87.4831 li
400.898 84.2855 li
400.898 102.264 li
396.164 106.998 li
380.37 106.998 li
380.37 108.123 li
395.039 108.123 li
392.563 110.599 li
380.37 110.599 li
380.37 111.724 li
391.438 111.724 li
377.232 125.93 li
.670588 .913725 .905882 rgb
f
374.621 128.242 mo
374.621 128.242 li
373.993 128.242 373.289 128.008 372.529 127.546 cv
370.793 126.493 367.995 126.053 365.526 125.665 cv
363.399 125.331 361.719 125.067 360.988 124.457 cv
360.941 124.418 360.895 124.377 360.851 124.332 cv
361.203 123.98 li
361.237 124.014 361.271 124.045 361.307 124.075 cv
362.712 125.247 369.507 125.129 372.787 127.121 cv
373.443 127.519 374.062 127.744 374.621 127.744 cv
376.855 127.745 378.13 124.146 377.005 113.649 cv
376.828 112.002 376.54 110.459 376.164 109.02 cv
376.574 108.609 li
376.991 110.155 377.309 111.817 377.5 113.596 cv
378.138 119.551 378.052 123.621 377.232 125.93 cv
374.94 128.222 li
374.836 128.235 374.73 128.242 374.621 128.242 cv
.505882 .686274 .678431 rgb
f
365.123 120.99 mo
364.885 120.99 364.657 120.916 364.556 120.806 cv
364.531 120.779 364.507 120.744 364.498 120.685 cv
364.715 120.468 li
364.869 120.653 365.04 120.819 365.225 120.959 cv
365.256 120.982 li
365.123 120.99 li
.670588 .913725 .905882 rgb
f
365.123 121.488 mo
364.744 121.488 364.327 121.357 364.123 121.06 cv
364.498 120.685 li
364.507 120.744 364.531 120.779 364.556 120.806 cv
364.657 120.916 364.885 120.99 365.123 120.99 cv
365.256 120.982 li
365.225 120.959 li
365.04 120.819 364.869 120.653 364.715 120.468 cv
365.067 120.117 li
365.204 120.284 365.357 120.435 365.524 120.56 cv
366.276 121.125 365.754 121.488 365.123 121.488 cv
.505882 .686274 .678431 rgb
f
367.492 119.635 mo
367.488 119.626 367.367 119.393 367.167 119.053 cv
367.369 119.187 367.574 119.314 367.781 119.429 cv
367.492 119.635 li
.670588 .913725 .905882 rgb
f
367.465 120.108 mo
367.292 120.108 367.136 120.036 367.047 119.858 cv
366.934 119.631 366.699 119.223 366.41 118.773 cv
366.92 118.263 li
367.267 118.533 367.664 118.799 368.101 119.037 cv
368.626 119.475 367.975 120.108 367.465 120.108 cv
367.167 119.053 mo
367.367 119.393 367.488 119.626 367.492 119.635 cv
367.781 119.429 li
367.574 119.314 367.369 119.187 367.167 119.053 cv
369.368 117.4 mo
369.067 117.4 368.591 117.328 368.032 117.151 cv
368.386 116.797 li
368.409 116.802 368.431 116.807 368.453 116.812 cv
369.882 117.122 369.96 117.4 369.368 117.4 cv
.505882 .686274 .678431 rgb
f
374.621 127.744 mo
374.062 127.744 373.443 127.519 372.787 127.121 cv
369.507 125.129 362.712 125.247 361.307 124.075 cv
361.271 124.045 361.237 124.014 361.203 123.98 cv
364.123 121.06 li
364.327 121.357 364.744 121.488 365.123 121.488 cv
365.754 121.488 366.276 121.125 365.524 120.56 cv
365.357 120.435 365.204 120.284 365.067 120.117 cv
366.41 118.773 li
366.699 119.223 366.934 119.631 367.047 119.858 cv
367.136 120.036 367.292 120.108 367.465 120.108 cv
367.975 120.108 368.626 119.475 368.101 119.037 cv
367.664 118.799 367.267 118.533 366.92 118.263 cv
368.032 117.151 li
368.591 117.328 369.067 117.4 369.368 117.4 cv
369.96 117.4 369.882 117.122 368.453 116.812 cv
368.431 116.807 368.409 116.802 368.386 116.797 cv
376.164 109.02 li
376.54 110.459 376.828 112.002 377.005 113.649 cv
378.13 124.146 376.855 127.745 374.621 127.744 cv
.968627 .968627 .968627 rgb
f
397.7 88.9928 mo
396.19 88.9928 li
397.7 87.4831 li
397.7 88.9928 li
.505882 .686274 .678431 rgb
f
397.588 93.7191 mo
391.464 93.7191 li
392.589 92.5938 li
397.588 92.5938 li
397.588 93.7191 li
.968627 .968627 .968627 rgb
f
397.588 97.3201 mo
387.863 97.3201 li
388.988 96.1948 li
397.588 96.1948 li
397.588 97.3201 li
f
397.588 100.921 mo
384.262 100.921 li
385.387 99.7958 li
397.588 99.7958 li
397.588 100.921 li
f
397.588 104.522 mo
380.661 104.522 li
381.786 103.397 li
397.588 103.397 li
397.588 104.522 li
f
395.039 108.123 mo
380.37 108.123 li
380.37 106.998 li
396.164 106.998 li
395.039 108.123 li
f
334.019 135.717 mo
332.686 135.717 li
332.686 125.061 li
333.515 124.231 334.346 123.401 335.175 122.571 cv
335.175 133.228 li
336.503 133.228 li
335.676 134.057 334.847 134.888 334.019 135.717 cv
.894118 .894118 .894118 rgb
f
336.503 133.228 mo
335.175 133.228 li
335.175 122.571 li
335.508 122.239 335.838 121.908 336.171 121.576 cv
336.171 132.232 li
337.497 132.232 li
337.166 132.565 336.835 132.896 336.503 133.228 cv
.803922 .803922 .803922 rgb
f
337.497 132.232 mo
336.171 132.232 li
336.171 121.576 li
337.223 120.523 338.278 119.468 339.331 118.416 cv
339.128 123.146 339.618 126.115 340.809 127.441 cv
341.061 127.722 341.344 127.931 341.655 128.067 cv
340.268 129.456 338.884 130.843 337.497 132.232 cv
.670588 .913725 .905882 rgb
f
341.655 128.067 mo
341.344 127.931 341.061 127.722 340.809 127.441 cv
339.618 126.115 339.128 123.146 339.331 118.416 cv
339.506 118.241 339.681 118.066 339.855 117.891 cv
339.515 124.429 340.46 127.195 342.042 127.679 cv
341.914 127.808 341.783 127.939 341.655 128.067 cv
.505882 .686274 .678431 rgb
f
349.742 119.625 mo
349.63 119.625 349.479 119.52 349.426 119.443 cv
349.636 119.326 349.845 119.197 350.048 119.061 cv
349.855 119.396 349.739 119.622 349.742 119.625 cv
352.268 116.35 mo
352.25 116.243 li
352.207 116.074 352.093 115.898 351.892 115.799 cv
353.322 114.667 354.29 113.234 354.29 112.491 cv
354.29 111.886 353.875 111.724 353.631 111.724 cv
353.272 111.724 352.922 111.991 352.364 112.437 cv
352.363 112.427 li
352.347 112.307 352.274 112.004 351.947 111.82 cv
352.874 111.577 353.779 111.265 354.382 110.936 cv
355.419 110.371 355.475 109.72 355.416 109.382 cv
355.304 108.745 354.655 108.29 353.633 108.133 cv
353.535 108.118 353.437 108.111 353.338 108.111 cv
353.264 108.112 li
353.773 107.901 353.819 107.528 353.813 107.367 cv
353.774 107.157 li
354.17 107.393 354.731 107.511 355.451 107.511 cv
355.804 107.511 356.066 107.48 356.077 107.479 cv
356.334 107.448 li
357.279 105.683 li
357.256 105.472 li
357.426 104.642 357.764 102.427 358.036 99.7105 cv
358.388 99.3586 358.742 99.0049 359.093 98.653 cv
359.365 101.736 359.751 104.366 359.958 105.4 cv
359.927 105.67 li
360.873 107.434 li
361.13 107.465 li
361.141 107.466 361.403 107.497 361.756 107.497 cv
361.915 107.497 362.066 107.492 362.21 107.48 cv
361.623 108.068 361.036 108.655 360.449 109.242 cv
360.132 108.941 359.784 108.701 359.407 108.553 cv
359.319 108.519 li
357.802 108.523 li
357.712 108.56 li
355.537 109.442 354.371 113.567 354.235 114.655 cv
354.195 114.973 354.178 115.259 354.18 115.52 cv
354.146 115.555 354.112 115.589 354.077 115.624 cv
353.957 115.55 353.83 115.512 353.698 115.512 cv
353.506 115.512 353.323 115.596 353.183 115.748 cv
353.08 115.86 352.996 116.028 352.928 116.235 cv
352.737 116.211 li
352.588 116.211 352.43 116.261 352.268 116.35 cv
350.667 109.338 mo
350.999 109.011 351.238 108.726 351.165 108.39 cv
351.277 108.39 li
351.576 108.39 351.955 108.376 352.345 108.324 cv
351.802 108.546 351.288 108.905 350.813 109.237 cv
350.667 109.338 li
353.18 106.47 mo
352.974 106.324 352.738 106.193 352.499 106.08 cv
353.118 105.769 li
353.076 106.053 353.112 106.285 353.18 106.47 cv
353.531 104.622 mo
353.495 104.535 353.447 104.448 353.386 104.36 cv
353.399 104.347 353.41 104.337 353.423 104.324 cv
353.493 104.344 353.565 104.353 353.637 104.353 cv
353.667 104.353 li
353.621 104.44 353.575 104.53 353.531 104.622 cv
.670588 .913725 .905882 rgb
f
349.6 120.107 mo
349.123 120.009 348.629 119.449 349.106 119.052 cv
351.159 117.932 352.32 116.217 351.523 116.217 cv
351.319 116.217 350.988 116.329 350.512 116.591 cv
349.411 117.196 348.363 117.414 347.839 117.414 cv
347.247 117.414 347.325 117.136 348.754 116.826 cv
351.449 116.24 353.792 113.428 353.792 112.491 cv
353.792 112.301 353.734 112.222 353.631 112.222 cv
353.223 112.222 352.101 113.453 350.98 114.014 cv
349.574 114.717 349.574 115.303 348.989 115.42 cv
348.967 115.424 348.947 115.426 348.93 115.426 cv
348.472 115.426 349.388 114.001 350.629 113.663 cv
351.748 113.357 352.425 112.168 351.279 112.168 cv
351.105 112.168 350.89 112.195 350.629 112.257 cv
350.263 112.343 349.933 112.378 349.644 112.378 cv
349.044 112.378 348.622 112.228 348.431 112.078 cv
348.241 111.929 348.28 111.779 348.603 111.779 cv
348.648 111.779 348.698 111.782 348.754 111.788 cv
348.833 111.797 348.922 111.801 349.021 111.801 cv
350.251 111.801 352.95 111.15 354.143 110.499 cv
355.432 109.797 355.081 108.859 353.558 108.625 cv
353.485 108.614 353.411 108.609 353.337 108.609 cv
352.673 108.609 351.978 109.038 351.353 109.468 cv
350.727 109.898 350.173 110.327 349.792 110.327 cv
349.711 110.327 349.639 110.308 349.574 110.265 cv
348.897 109.814 351.481 108.384 350.416 108.384 cv
350.375 108.384 350.329 108.387 350.277 108.391 cv
350.225 108.395 350.173 108.397 350.122 108.397 cv
349.887 108.397 349.665 108.354 349.462 108.284 cv
349.625 108.121 349.79 107.956 349.953 107.793 cv
350.371 107.858 350.829 107.892 351.278 107.892 cv
351.902 107.892 352.51 107.827 352.972 107.688 cv
353.96 107.391 352.613 106.594 351.535 106.212 cv
351.714 106.033 351.892 105.854 352.072 105.675 cv
352.123 105.689 352.152 105.696 352.152 105.696 cv
352.152 105.696 352.152 105.696 352.855 105.345 cv
353.141 105.201 353.175 104.98 353.026 104.72 cv
353.145 104.601 353.267 104.479 353.386 104.36 cv
353.447 104.448 353.495 104.535 353.531 104.622 cv
353.575 104.53 353.621 104.44 353.667 104.353 cv
353.637 104.353 li
353.565 104.353 353.493 104.344 353.423 104.324 cv
353.975 103.771 354.528 103.218 355.08 102.666 cv
355.242 103.036 354.168 104.1 353.675 105.579 cv
353.256 106.834 354.631 107.014 355.451 107.014 cv
355.779 107.014 356.018 106.985 356.018 106.985 cv
356.669 105.768 li
356.67 105.769 li
356.67 105.768 li
356.768 105.585 li
356.752 105.449 li
356.92 104.669 357.221 102.706 357.479 100.268 cv
357.664 100.082 357.85 99.896 358.036 99.7105 cv
357.764 102.427 357.426 104.642 357.256 105.472 cv
357.279 105.683 li
356.334 107.448 li
356.077 107.479 li
356.066 107.48 355.804 107.511 355.451 107.511 cv
354.731 107.511 354.17 107.393 353.774 107.157 cv
353.813 107.367 li
353.819 107.528 353.773 107.901 353.264 108.112 cv
353.338 108.111 li
353.437 108.111 353.535 108.118 353.633 108.133 cv
354.655 108.29 355.304 108.745 355.416 109.382 cv
355.475 109.72 355.419 110.371 354.382 110.936 cv
353.779 111.265 352.874 111.577 351.947 111.82 cv
352.274 112.004 352.347 112.307 352.363 112.427 cv
352.364 112.437 li
352.922 111.991 353.272 111.724 353.631 111.724 cv
353.875 111.724 354.29 111.886 354.29 112.491 cv
354.29 113.234 353.322 114.667 351.892 115.799 cv
352.093 115.898 352.207 116.074 352.25 116.243 cv
352.268 116.35 li
352.43 116.261 352.588 116.211 352.737 116.211 cv
352.928 116.235 li
352.996 116.028 353.08 115.86 353.183 115.748 cv
353.323 115.596 353.506 115.512 353.698 115.512 cv
353.83 115.512 353.957 115.55 354.077 115.624 cv
353.949 115.752 353.819 115.882 353.691 116.01 cv
353.593 116.014 353.512 116.104 353.444 116.258 cv
353.267 116.435 353.092 116.61 352.915 116.787 cv
352.866 116.736 352.807 116.709 352.737 116.709 cv
352.204 116.709 351.199 118.124 350.591 119.115 cv
350.261 119.446 349.931 119.776 349.6 120.107 cv
350.048 119.061 mo
349.845 119.197 349.636 119.326 349.426 119.443 cv
349.479 119.52 349.63 119.625 349.742 119.625 cv
349.739 119.622 349.855 119.396 350.048 119.061 cv
351.165 108.39 mo
351.238 108.726 350.999 109.011 350.667 109.338 cv
350.813 109.237 li
351.288 108.905 351.802 108.546 352.345 108.324 cv
351.955 108.376 351.576 108.39 351.277 108.39 cv
351.165 108.39 li
353.118 105.769 mo
352.499 106.08 li
352.738 106.193 352.974 106.324 353.18 106.47 cv
353.112 106.285 353.076 106.053 353.118 105.769 cv
354.18 115.52 mo
354.178 115.259 354.195 114.973 354.235 114.655 cv
354.371 113.567 355.537 109.442 357.712 108.56 cv
357.802 108.523 li
359.319 108.519 li
359.407 108.553 li
359.784 108.701 360.132 108.941 360.449 109.242 cv
360.332 109.36 360.214 109.478 360.096 109.596 cv
359.826 109.34 359.535 109.139 359.225 109.017 cv
358.818 109.018 358.411 109.021 358.007 109.021 cv
357.971 109.021 357.935 109.021 357.899 109.021 cv
356.02 109.784 354.867 113.611 354.729 114.717 cv
354.717 114.815 354.707 114.91 354.699 115.001 cv
354.526 115.174 354.353 115.347 354.18 115.52 cv
361.756 107.497 mo
361.403 107.497 361.141 107.466 361.13 107.465 cv
360.873 107.434 li
359.927 105.67 li
359.958 105.4 li
359.751 104.366 359.365 101.736 359.093 98.653 cv
359.247 98.4995 359.4 98.3468 359.553 98.1933 cv
359.827 101.479 360.243 104.327 360.462 105.378 cv
360.44 105.571 li
361.189 106.971 li
361.189 106.971 361.429 107 361.756 107 cv
362.074 107 362.474 106.973 362.822 106.867 cv
362.618 107.071 362.413 107.276 362.21 107.48 cv
362.066 107.492 361.915 107.497 361.756 107.497 cv
.505882 .686274 .678431 rgb
f
357.958 111.737 mo
358.144 110.938 358.452 110.594 358.611 110.594 cv
358.675 110.594 358.777 110.658 358.886 110.808 cv
358.577 111.117 358.267 111.428 357.958 111.737 cv
.670588 .913725 .905882 rgb
f
357.352 112.343 mo
357.512 110.849 358.063 110.096 358.612 110.096 cv
358.83 110.096 359.047 110.215 359.24 110.453 cv
359.122 110.571 359.004 110.69 358.886 110.808 cv
358.777 110.658 358.675 110.594 358.611 110.594 cv
358.452 110.594 358.144 110.938 357.958 111.737 cv
357.755 111.94 357.555 112.141 357.352 112.343 cv
.505882 .686274 .678431 rgb
f
363.676 104.608 mo
363.632 104.516 363.586 104.426 363.54 104.339 cv
363.571 104.339 li
363.67 104.339 363.768 104.32 363.866 104.282 cv
363.784 104.392 363.721 104.501 363.676 104.608 cv
.670588 .913725 .905882 rgb
f
363.606 106.082 mo
363.62 105.934 363.598 105.763 363.532 105.565 cv
362.947 103.808 361.541 102.636 362.361 102.519 cv
362.384 102.516 362.407 102.514 362.429 102.514 cv
362.744 102.514 362.911 102.846 363.058 103.178 cv
363.205 103.51 363.333 103.841 363.571 103.841 cv
363.658 103.841 363.76 103.797 363.884 103.691 cv
364.36 103.282 365.351 103.032 365.845 103.032 cv
366.201 103.032 366.298 103.162 365.758 103.456 cv
364.47 104.159 363.65 104.979 364.353 105.331 cv
364.353 105.331 364.354 105.332 364.355 105.332 cv
364.105 105.582 363.856 105.832 363.606 106.082 cv
363.54 104.339 mo
363.586 104.426 363.632 104.516 363.676 104.608 cv
363.721 104.501 363.784 104.392 363.866 104.282 cv
363.768 104.32 363.67 104.339 363.571 104.339 cv
363.54 104.339 li
356.446 102.997 mo
356.363 102.412 356.281 101.908 356.204 101.542 cv
356.38 101.366 356.556 101.19 356.732 101.014 cv
356.624 101.95 356.52 102.654 356.446 102.997 cv
.505882 .686274 .678431 rgb
f
360.68 97.5871 mo
360.668 97.4263 360.657 97.2642 360.646 97.1003 cv
360.698 97.0481 360.75 96.9962 360.803 96.9439 cv
360.755 97.1488 360.714 97.3632 360.68 97.5871 cv
.670588 .913725 .905882 rgb
f
360.769 102.931 mo
360.618 102.176 360.355 100.066 360.178 97.5681 cv
360.334 97.4124 360.49 97.256 360.646 97.1003 cv
360.657 97.2642 360.668 97.4263 360.68 97.5871 cv
360.714 97.3632 360.755 97.1488 360.803 96.9439 cv
361.051 96.6955 361.299 96.4476 361.547 96.1992 cv
361.047 97.5116 360.952 99.3094 361.072 101.231 cv
360.978 101.584 360.874 102.191 360.769 102.931 cv
.505882 .686274 .678431 rgb
f
371.355 98.3248 mo
368.72 95.1803 365.91 93.5849 364.311 93.5849 cv
364.214 93.5869 li
364.195 93.5877 364.176 93.5887 364.157 93.5897 cv
367.752 89.9942 371.347 86.3991 374.943 82.8036 cv
386.865 82.8036 li
385.666 84.0029 384.464 85.2053 383.266 86.4046 cv
374.519 86.4046 li
374.519 88.9928 li
380.679 88.9928 li
377.57 92.1036 374.463 95.2135 371.355 98.3248 cv
.670588 .913725 .905882 rgb
f
370.98 98.6997 mo
368.411 95.6261 365.71 94.0828 364.311 94.0828 cv
364.285 94.0828 364.26 94.0833 364.235 94.0844 cv
363.996 94.0943 363.773 94.1272 363.565 94.1813 cv
363.762 93.984 363.96 93.787 364.157 93.5897 cv
364.176 93.5887 364.195 93.5877 364.214 93.5869 cv
364.311 93.5849 li
365.91 93.5849 368.72 95.1803 371.355 98.3248 cv
371.23 98.4492 371.104 98.5753 370.98 98.6997 cv
.505882 .686274 .678431 rgb
f
342.042 127.679 mo
340.46 127.195 339.515 124.429 339.855 117.891 cv
343.059 114.688 346.259 111.487 349.462 108.284 cv
349.665 108.354 349.887 108.397 350.122 108.397 cv
350.173 108.397 350.225 108.395 350.277 108.391 cv
350.329 108.387 350.375 108.384 350.416 108.384 cv
351.481 108.384 348.897 109.814 349.574 110.265 cv
349.639 110.308 349.711 110.327 349.792 110.327 cv
350.173 110.327 350.727 109.898 351.353 109.468 cv
351.978 109.038 352.673 108.609 353.337 108.609 cv
353.411 108.609 353.485 108.614 353.558 108.625 cv
355.081 108.859 355.432 109.797 354.143 110.499 cv
352.95 111.15 350.251 111.801 349.021 111.801 cv
348.922 111.801 348.833 111.797 348.754 111.788 cv
348.698 111.782 348.648 111.779 348.603 111.779 cv
348.28 111.779 348.241 111.929 348.431 112.078 cv
348.622 112.228 349.044 112.378 349.644 112.378 cv
349.933 112.378 350.263 112.343 350.629 112.257 cv
350.89 112.195 351.105 112.168 351.279 112.168 cv
352.425 112.168 351.748 113.357 350.629 113.663 cv
349.388 114.001 348.472 115.426 348.93 115.426 cv
348.947 115.426 348.967 115.424 348.989 115.42 cv
349.574 115.303 349.574 114.717 350.98 114.014 cv
352.101 113.453 353.223 112.222 353.631 112.222 cv
353.734 112.222 353.792 112.301 353.792 112.491 cv
353.792 113.428 351.449 116.24 348.754 116.826 cv
347.325 117.136 347.247 117.414 347.839 117.414 cv
348.363 117.414 349.411 117.196 350.512 116.591 cv
350.988 116.329 351.319 116.217 351.523 116.217 cv
352.32 116.217 351.159 117.932 349.106 119.052 cv
348.629 119.449 349.123 120.009 349.6 120.107 cv
347.08 122.632 344.562 125.154 342.042 127.679 cv
350.591 119.115 mo
351.199 118.124 352.204 116.709 352.737 116.709 cv
352.807 116.709 352.866 116.736 352.915 116.787 cv
352.141 117.562 351.365 118.34 350.591 119.115 cv
353.444 116.258 mo
353.512 116.104 353.593 116.014 353.691 116.01 cv
353.609 116.092 353.526 116.176 353.444 116.258 cv
354.699 115.001 mo
354.707 114.91 354.717 114.815 354.729 114.717 cv
354.867 113.611 356.02 109.784 357.899 109.021 cv
357.935 109.021 357.971 109.021 358.007 109.021 cv
358.411 109.021 358.818 109.018 359.225 109.017 cv
359.535 109.139 359.826 109.34 360.096 109.596 cv
359.811 109.882 359.526 110.167 359.24 110.453 cv
359.047 110.215 358.83 110.096 358.612 110.096 cv
358.063 110.096 357.512 110.849 357.352 112.343 cv
356.468 113.229 355.583 114.115 354.699 115.001 cv
351.278 107.892 mo
350.829 107.892 350.371 107.858 349.953 107.793 cv
350.48 107.266 351.008 106.738 351.535 106.212 cv
352.613 106.594 353.96 107.391 352.972 107.688 cv
352.51 107.827 351.902 107.892 351.278 107.892 cv
355.451 107.014 mo
354.631 107.014 353.256 106.834 353.675 105.579 cv
354.168 104.1 355.242 103.036 355.08 102.666 cv
355.455 102.292 355.83 101.916 356.204 101.542 cv
356.281 101.908 356.363 102.412 356.446 102.997 cv
356.52 102.654 356.624 101.95 356.732 101.014 cv
356.982 100.765 357.229 100.517 357.479 100.268 cv
357.221 102.706 356.92 104.669 356.752 105.449 cv
356.768 105.585 li
356.67 105.768 li
356.67 105.769 li
356.669 105.768 li
356.018 106.985 li
356.018 106.985 355.779 107.014 355.451 107.014 cv
361.756 107 mo
361.429 107 361.189 106.971 361.189 106.971 cv
360.44 105.571 li
360.462 105.378 li
360.243 104.327 359.827 101.479 359.553 98.1933 cv
359.762 97.9843 359.969 97.7771 360.178 97.5681 cv
360.355 100.066 360.618 102.176 360.769 102.931 cv
360.874 102.191 360.978 101.584 361.072 101.231 cv
360.952 99.3094 361.047 97.5116 361.547 96.1992 cv
362.219 95.5274 362.893 94.8531 363.565 94.1813 cv
363.773 94.1272 363.996 94.0943 364.235 94.0844 cv
364.26 94.0833 364.285 94.0828 364.311 94.0828 cv
365.71 94.0828 368.411 95.6261 370.98 98.6997 cv
368.772 100.91 366.563 103.121 364.355 105.332 cv
364.354 105.332 364.353 105.331 364.353 105.331 cv
363.65 104.979 364.47 104.159 365.758 103.456 cv
366.298 103.162 366.201 103.032 365.845 103.032 cv
365.351 103.032 364.36 103.282 363.884 103.691 cv
363.76 103.797 363.658 103.841 363.571 103.841 cv
363.333 103.841 363.205 103.51 363.058 103.178 cv
362.911 102.846 362.744 102.514 362.429 102.514 cv
362.407 102.514 362.384 102.516 362.361 102.519 cv
361.541 102.636 362.947 103.808 363.532 105.565 cv
363.598 105.763 363.62 105.934 363.606 106.082 cv
363.344 106.344 363.083 106.605 362.822 106.867 cv
362.474 106.973 362.074 107 361.756 107 cv
352.152 105.696 mo
352.152 105.696 352.123 105.689 352.072 105.675 cv
352.39 105.356 352.707 105.039 353.026 104.72 cv
353.175 104.98 353.141 105.201 352.855 105.345 cv
352.152 105.696 352.152 105.696 352.152 105.696 cv
.968627 .968627 .968627 rgb
f
394.526 75.1403 mo
382.606 75.1403 li
383.436 74.3107 384.266 73.4805 385.096 72.6509 cv
397.015 72.6509 li
396.185 73.4807 395.355 74.3105 394.526 75.1403 cv
.894118 .894118 .894118 rgb
f
393.53 76.1361 mo
381.61 76.1361 li
381.943 75.8034 382.274 75.473 382.606 75.1403 cv
394.526 75.1403 li
394.193 75.4725 393.862 75.804 393.53 76.1361 cv
.803922 .803922 .803922 rgb
f
391.589 78.0772 mo
379.669 78.0772 li
380.315 77.431 380.964 76.7823 381.61 76.1361 cv
393.53 76.1361 li
392.884 76.7825 392.236 77.4308 391.589 78.0772 cv
.670588 .913725 .905882 rgb
f
386.865 82.8036 mo
374.943 82.8036 li
376.519 81.2277 378.093 79.6532 379.669 78.0772 cv
391.589 78.0772 li
390.014 79.6535 388.44 81.2272 386.865 82.8036 cv
.505882 .686274 .678431 rgb
f
380.679 88.9928 mo
374.519 88.9928 li
374.519 86.4046 li
383.266 86.4046 li
382.403 87.2679 381.542 88.1295 380.679 88.9928 cv
f
332.686 109.535 mo
332.686 72.6509 li
369.57 72.6509 li
367.081 75.1403 li
335.175 75.1403 li
335.175 107.046 li
332.686 109.535 li
.894118 .894118 .894118 rgb
f
335.175 107.046 mo
335.175 75.1403 li
367.081 75.1403 li
366.085 76.1361 li
336.171 76.1361 li
336.171 106.05 li
335.175 107.046 li
.803922 .803922 .803922 rgb
f
336.171 106.05 mo
336.171 76.1361 li
366.085 76.1361 li
364.144 78.0772 li
339.071 78.0772 li
339.071 82.8036 li
359.417 82.8036 li
336.171 106.05 li
.670588 .913725 .905882 rgb
f
359.417 82.8036 mo
339.071 82.8036 li
339.071 78.0772 li
364.144 78.0772 li
359.417 82.8036 li
.505882 .686274 .678431 rgb
f
391.438 111.724 mo
380.37 111.724 li
380.37 110.599 li
392.563 110.599 li
391.438 111.724 li
.968627 .968627 .968627 rgb
f
282.661 137.313 mo
210.964 137.313 li
210.964 135.717 li
211.301 135.717 li
211.301 135.717 li
226.747 135.717 li
244.726 135.717 li
281.664 135.717 li
281.664 98.7791 li
281.664 80.8001 li
281.664 74.2465 li
282.661 74.2465 li
282.661 137.313 li
.101961 .607843 .741176 rgb
f
209.967 135.717 mo
209.967 72.6509 li
281.664 72.6509 li
281.664 135.717 li
209.967 135.717 li
.85098 .85098 .85098 rgb
f
279.175 133.228 mo
212.457 133.228 li
212.457 75.1403 li
279.175 75.1403 li
279.175 133.228 li
.717647 .717647 .717647 rgb
f
213.452 132.232 mo
213.452 76.1361 li
278.179 76.1361 li
278.179 132.232 li
213.452 132.232 li
1 .784314 .462745 rgb
f
275.206 82.8036 mo
216.352 82.8036 li
216.352 78.0772 li
275.206 78.0772 li
275.206 82.8036 li
.776471 .505882 .14902 rgb
f
274.981 88.9928 mo
251.8 88.9928 li
251.8 86.4046 li
274.981 86.4046 li
274.981 88.9928 li
f
274.981 128.379 mo
259.565 128.379 li
259.565 125.791 li
274.981 125.791 li
274.981 128.379 li
cp
f
274.981 124.103 mo
259.565 124.103 li
259.565 121.514 li
274.981 121.514 li
274.981 124.103 li
f
274.869 93.7191 mo
257.652 93.7191 li
257.652 92.5938 li
274.869 92.5938 li
274.869 93.7191 li
.956863 .956863 .956863 rgb
f
274.869 97.3201 mo
257.652 97.3201 li
257.652 96.1948 li
274.869 96.1948 li
274.869 97.3201 li
f
274.869 100.921 mo
257.652 100.921 li
257.652 99.7958 li
274.869 99.7958 li
274.869 100.921 li
f
274.869 104.522 mo
257.652 104.522 li
257.652 103.397 li
274.869 103.397 li
274.869 104.522 li
f
274.869 108.123 mo
257.652 108.123 li
257.652 106.998 li
274.869 106.998 li
274.869 108.123 li
f
274.869 111.724 mo
257.652 111.724 li
257.652 110.599 li
274.869 110.599 li
274.869 111.724 li
f
223.204 113.046 mo
221.455 113.044 220.033 111.618 220.036 109.867 cv
220.038 108.12 221.462 106.698 223.21 106.698 cv
223.561 106.698 li
223.592 106.702 li
225.217 106.886 226.441 108.26 226.438 109.897 cv
226.436 111.408 225.362 112.727 223.884 113.035 cv
223.829 113.047 li
223.204 113.046 li
.776471 .505882 .14902 rgb
f
225.887 109.896 mo
225.889 108.528 224.857 107.401 223.529 107.25 cv
223.214 107.25 li
221.766 107.247 220.59 108.42 220.587 109.868 cv
220.585 111.316 221.757 112.492 223.206 112.494 cv
223.772 112.495 li
224.978 112.244 225.885 111.177 225.887 109.896 cv
.956863 .956863 .956863 rgb
f
222.792 113.045 mo
224.497 112.024 li
225.257 111.568 225.711 110.773 225.712 109.896 cv
225.714 109.005 225.23 108.176 224.451 107.732 cv
222.634 106.697 li
231.466 106.711 li
233.216 106.714 234.638 108.14 234.635 109.89 cv
234.632 111.638 233.208 113.059 231.461 113.059 cv
222.792 113.045 li
.776471 .505882 .14902 rgb
f
234.083 109.889 mo
234.085 108.441 232.913 107.265 231.465 107.263 cv
224.724 107.252 li
225.644 107.776 226.266 108.765 226.264 109.897 cv
226.262 111.001 225.666 111.967 224.781 112.497 cv
231.457 112.507 li
232.905 112.51 234.081 111.337 234.083 109.889 cv
.956863 .956863 .956863 rgb
f
247.116 113.07 mo
247.116 112.062 li
247.593 111.938 li
247.63 111.743 li
247.673 111.51 li
247.696 111.402 247.682 111.262 247.666 111.099 cv
247.627 110.708 247.574 110.173 247.996 109.601 cv
248.331 109.147 248.445 108.668 248.301 108.321 cv
248.164 107.993 247.842 107.881 247.595 107.844 cv
247.125 107.774 li
247.125 106.745 li
247.678 106.721 li
247.854 106.722 li
249.603 106.724 251.025 108.15 251.022 109.901 cv
251.02 111.648 249.596 113.07 247.848 113.07 cv
247.116 113.07 li
.776471 .505882 .14902 rgb
f
247.852 107.273 mo
247.676 107.273 li
247.676 107.298 li
248.924 107.483 249.319 108.738 248.44 109.929 cv
247.978 110.554 248.325 111.092 248.213 111.623 cv
248.12 112.068 248.16 112.392 247.668 112.486 cv
247.668 112.518 li
247.844 112.518 li
249.292 112.52 250.468 111.348 250.47 109.9 cv
250.473 108.452 249.3 107.276 247.852 107.273 cv
.956863 .956863 .956863 rgb
f
250.258 107.888 mo
251.027 106.632 250.558 106.131 249.425 105.116 cv
248.001 103.84 246.052 102.092 249.137 97.7205 cv
250.064 98.3175 li
249.218 99.7594 249.862 100.528 251.073 101.763 cv
252.501 103.219 254.278 105.03 251.14 108.544 cv
250.258 107.888 li
.776471 .505882 .14902 rgb
f
249.587 98.0385 mo
244.711 104.95 253.175 104.179 250.729 108.177 cv
255.743 102.562 247.102 102.276 249.587 98.0385 cv
.956863 .956863 .956863 rgb
f
249.363 119.228 mo
251.773 116.245 253.094 112.521 253.094 108.677 cv
253.094 99.4125 245.557 91.8752 236.292 91.8752 cv
232.448 91.8752 228.725 93.1958 225.741 95.606 cv
236.85 106.715 li
246.189 106.719 li
247.231 106.721 248.216 107.289 248.641 108.132 cv
248.988 108.822 248.907 109.595 248.42 110.256 cv
248.257 110.475 248.266 110.649 248.3 110.989 cv
248.322 111.211 248.347 111.462 248.289 111.736 cv
248.108 112.601 247.069 113.067 246.184 113.067 cv
243.201 113.066 li
249.363 119.228 li
223.37 97.9419 mo
220.863 100.956 219.489 104.745 219.489 108.677 cv
219.489 117.942 227.027 125.48 236.292 125.48 cv
240.224 125.48 244.013 124.106 247.028 121.6 cv
238.492 113.064 li
230.99 113.06 li
232.7 112.036 li
233.459 111.581 233.914 110.786 233.915 109.909 cv
233.917 109.018 233.433 108.189 232.654 107.744 cv
230.843 106.713 li
232.141 106.713 li
223.37 97.9419 li
236.292 128.725 mo
225.237 128.725 216.244 119.732 216.244 108.677 cv
216.244 97.6229 225.237 88.6297 236.292 88.6297 cv
247.346 88.6297 256.34 97.6229 256.34 108.677 cv
256.34 119.732 247.346 128.725 236.292 128.725 cv
.776471 .505882 .14902 rgb
f
249.399 120.045 mo
241.868 112.514 li
246.181 112.516 li
246.905 112.517 247.638 112.154 247.749 111.623 cv
247.861 111.091 247.514 110.553 247.976 109.928 cv
248.927 108.64 247.638 107.273 246.189 107.271 cv
236.621 107.266 li
224.925 95.5702 li
227.97 92.9269 231.943 91.3232 236.292 91.3232 cv
245.876 91.3232 253.646 99.0931 253.646 108.678 cv
253.646 113.027 252.042 116.999 249.399 120.045 cv
236.292 126.032 mo
226.707 126.032 218.938 118.262 218.938 108.678 cv
218.938 104.243 220.603 100.199 223.34 97.1314 cv
233.473 107.265 li
232.927 107.265 li
233.847 107.789 234.469 108.777 234.467 109.91 cv
234.465 111.014 233.869 111.979 232.984 112.51 cv
238.721 112.512 li
247.838 121.63 li
244.77 124.366 240.726 126.032 236.292 126.032 cv
236.292 89.1814 mo
225.524 89.1814 216.796 97.9101 216.796 108.678 cv
216.796 119.445 225.524 128.174 236.292 128.174 cv
247.059 128.174 255.788 119.445 255.788 108.678 cv
255.788 97.9101 247.059 89.1814 236.292 89.1814 cv
.956863 .956863 .956863 rgb
f
244.726 135.717 mo
226.747 135.717 li
229.236 133.228 li
247.215 133.228 li
244.726 135.717 li
279.175 101.269 mo
279.175 83.2898 li
281.664 80.8001 li
281.664 98.7791 li
279.175 101.269 li
.894118 .894118 .894118 rgb
f
247.215 133.228 mo
229.236 133.228 li
230.232 132.232 li
248.211 132.232 li
247.215 133.228 li
278.179 102.264 mo
278.179 84.2855 li
279.175 83.2898 li
279.175 101.269 li
278.179 102.264 li
.803922 .803922 .803922 rgb
f
248.211 132.232 mo
230.232 132.232 li
233.883 128.582 li
234.673 128.677 235.477 128.725 236.292 128.725 cv
247.346 128.725 256.34 119.732 256.34 108.677 cv
256.34 107.862 256.291 107.058 256.196 106.269 cv
257.942 104.522 li
274.869 104.522 li
274.869 103.397 li
259.068 103.397 li
261.543 100.921 li
274.869 100.921 li
274.869 99.7958 li
262.669 99.7958 li
265.144 97.3201 li
274.869 97.3201 li
274.869 96.1948 li
266.27 96.1948 li
268.745 93.7191 li
274.869 93.7191 li
274.869 92.5938 li
269.871 92.5938 li
273.472 88.9928 li
274.981 88.9928 li
274.981 87.483 li
278.179 84.2855 li
278.179 102.264 li
273.446 106.998 li
257.652 106.998 li
257.652 108.123 li
272.32 108.123 li
269.845 110.599 li
257.652 110.599 li
257.652 111.724 li
268.719 111.724 li
248.211 132.232 li
1 .85098 .623529 rgb
f
274.981 88.9928 mo
273.472 88.9928 li
274.981 87.483 li
274.981 88.9928 li
.843137 .654902 .407843 rgb
f
274.869 93.7191 mo
268.745 93.7191 li
269.871 92.5938 li
274.869 92.5938 li
274.869 93.7191 li
.968627 .968627 .968627 rgb
f
274.869 97.3201 mo
265.144 97.3201 li
266.27 96.1948 li
274.869 96.1948 li
274.869 97.3201 li
f
274.869 100.921 mo
261.543 100.921 li
262.669 99.7958 li
274.869 99.7958 li
274.869 100.921 li
f
274.869 104.522 mo
257.942 104.522 li
259.068 103.397 li
274.869 103.397 li
274.869 104.522 li
f
272.32 108.123 mo
257.652 108.123 li
257.652 106.998 li
273.446 106.998 li
272.32 108.123 li
f
268.719 111.724 mo
257.652 111.724 li
257.652 110.599 li
269.845 110.599 li
268.719 111.724 li
f
236.292 128.725 mo
235.477 128.725 234.673 128.677 233.883 128.582 cv
234.383 128.081 li
235.011 128.142 235.648 128.174 236.292 128.174 cv
247.059 128.174 255.788 119.445 255.788 108.678 cv
255.788 108.033 255.757 107.397 255.696 106.769 cv
256.196 106.269 li
256.291 107.058 256.34 107.862 256.34 108.677 cv
256.34 119.732 247.346 128.725 236.292 128.725 cv
.843137 .654902 .407843 rgb
f
236.999 125.465 mo
243.946 118.518 li
247.028 121.6 li
244.194 123.956 240.677 125.311 236.999 125.465 cv
1 .85098 .623529 rgb
f
236.433 126.031 mo
236.999 125.465 li
240.677 125.311 244.194 123.956 247.028 121.6 cv
243.946 118.518 li
244.336 118.128 li
247.838 121.63 li
244.803 124.337 240.812 125.996 236.433 126.031 cv
.843137 .654902 .407843 rgb
f
249.363 119.228 mo
246.3 116.165 li
253.079 109.385 li
252.928 112.977 251.625 116.429 249.363 119.228 cv
1 .85098 .623529 rgb
f
249.399 120.045 mo
245.909 116.555 li
246.3 116.165 li
249.363 119.228 li
251.625 116.429 252.928 112.977 253.079 109.385 cv
253.646 108.819 li
253.611 113.113 252.014 117.032 249.399 120.045 cv
.843137 .654902 .407843 rgb
f
236.292 128.174 mo
235.648 128.174 235.011 128.142 234.383 128.081 cv
236.433 126.031 li
240.812 125.996 244.803 124.337 247.838 121.63 cv
244.336 118.128 li
245.909 116.555 li
249.399 120.045 li
252.014 117.032 253.611 113.113 253.646 108.819 cv
255.696 106.769 li
255.757 107.397 255.788 108.033 255.788 108.678 cv
255.788 119.445 247.059 128.174 236.292 128.174 cv
.968627 .968627 .968627 rgb
f
211.301 135.717 mo
209.967 135.717 li
209.967 125.061 li
210.796 124.231 211.627 123.401 212.457 122.571 cv
212.457 133.228 li
213.785 133.228 li
212.957 134.057 212.128 134.888 211.301 135.717 cv
.894118 .894118 .894118 rgb
f
213.785 133.228 mo
212.457 133.228 li
212.457 122.571 li
212.789 122.238 213.12 121.908 213.452 121.575 cv
213.452 132.232 li
214.779 132.232 li
214.447 132.565 214.116 132.896 213.785 133.228 cv
.803922 .803922 .803922 rgb
f
214.779 132.232 mo
213.452 132.232 li
213.452 121.575 li
214.983 120.044 216.514 118.513 218.046 116.982 cv
219.25 119.617 221.008 121.948 223.171 123.824 cv
220.373 126.627 217.577 129.429 214.779 132.232 cv
1 .85098 .623529 rgb
f
223.171 123.824 mo
221.008 121.948 219.25 119.617 218.046 116.982 cv
218.183 116.844 218.321 116.706 218.459 116.569 cv
219.635 119.223 221.387 121.566 223.556 123.439 cv
223.427 123.567 223.299 123.696 223.171 123.824 cv
.843137 .654902 .407843 rgb
f
225.47 121.521 mo
223.268 119.663 221.548 117.249 220.529 114.499 cv
221.073 113.955 221.616 113.412 222.16 112.868 cv
222.373 112.943 222.597 112.996 222.828 113.023 cv
222.792 113.045 li
223.156 113.046 li
223.172 113.046 223.188 113.046 223.204 113.046 cv
223.829 113.047 li
223.83 113.047 li
230.993 113.058 li
230.99 113.06 li
233.917 113.062 li
231.101 115.881 228.285 118.702 225.47 121.521 cv
232.141 106.713 mo
231.59 106.713 li
231.549 106.712 231.507 106.711 231.466 106.711 cv
228.322 106.706 li
228.957 106.07 229.592 105.435 230.228 104.8 cv
232.141 106.713 li
1 .85098 .623529 rgb
f
223.829 113.047 mo
223.204 113.046 li
223.188 113.046 223.172 113.046 223.156 113.046 cv
223.83 113.047 li
223.829 113.047 li
222.828 113.023 mo
222.597 112.996 222.373 112.943 222.16 112.868 cv
222.307 112.721 222.457 112.571 222.604 112.424 cv
222.797 112.47 222.998 112.494 223.206 112.494 cv
223.71 112.495 li
222.828 113.023 li
.843137 .654902 .407843 rgb
f
223.71 112.495 mo
223.206 112.494 li
222.998 112.494 222.797 112.47 222.604 112.424 cv
223.622 111.406 224.638 110.389 225.657 109.371 cv
225.694 109.542 225.713 109.718 225.712 109.896 cv
225.711 110.773 225.257 111.568 224.497 112.024 cv
223.71 112.495 li
.968627 .968627 .968627 rgb
f
230.993 113.058 mo
223.83 113.047 li
223.156 113.046 li
222.792 113.045 li
222.828 113.023 li
223.71 112.495 li
224.497 112.024 li
225.257 111.568 225.711 110.773 225.712 109.896 cv
225.713 109.718 225.694 109.542 225.657 109.371 cv
225.806 109.222 225.956 109.072 226.105 108.923 cv
226.209 109.228 226.265 109.556 226.264 109.897 cv
226.262 111.001 225.666 111.967 224.781 112.497 cv
231.457 112.507 li
231.458 112.507 231.459 112.507 231.461 112.507 cv
231.649 112.507 231.832 112.488 232.009 112.45 cv
230.993 113.058 li
231.861 107.293 mo
231.732 107.273 231.6 107.263 231.465 107.263 cv
227.771 107.257 li
227.954 107.073 228.139 106.889 228.322 106.706 cv
231.466 106.711 li
231.507 106.711 231.549 106.712 231.59 106.713 cv
230.843 106.713 li
231.861 107.293 li
.843137 .654902 .407843 rgb
f
231.461 112.507 mo
231.459 112.507 231.458 112.507 231.457 112.507 cv
224.781 112.497 li
225.666 111.967 226.262 111.001 226.264 109.897 cv
226.265 109.556 226.209 109.228 226.105 108.923 cv
226.661 108.367 227.215 107.812 227.771 107.257 cv
231.465 107.263 li
231.6 107.263 231.732 107.273 231.861 107.293 cv
232.654 107.744 li
233.433 108.189 233.917 109.018 233.915 109.909 cv
233.914 110.786 233.459 111.581 232.7 112.036 cv
232.009 112.45 li
231.832 112.488 231.649 112.507 231.461 112.507 cv
.968627 .968627 .968627 rgb
f
225.073 121.919 mo
222.879 120.058 221.153 117.66 220.098 114.93 cv
220.242 114.786 220.385 114.643 220.529 114.499 cv
221.548 117.249 223.268 119.663 225.47 121.521 cv
225.337 121.655 225.207 121.785 225.073 121.919 cv
233.917 113.062 mo
230.99 113.06 li
230.993 113.058 li
232.009 112.45 li
232.7 112.036 li
233.459 111.581 233.914 110.786 233.915 109.909 cv
233.917 109.018 233.433 108.189 232.654 107.744 cv
231.861 107.293 li
230.843 106.713 li
231.59 106.713 li
232.141 106.713 li
230.228 104.8 li
230.358 104.67 230.488 104.54 230.618 104.41 cv
233.473 107.265 li
232.927 107.265 li
233.847 107.789 234.469 108.777 234.467 109.91 cv
234.465 111.014 233.869 111.979 232.984 112.51 cv
234.467 112.51 li
234.284 112.694 234.1 112.878 233.917 113.062 cv
.843137 .654902 .407843 rgb
f
240.254 106.716 mo
236.85 106.715 li
232.581 102.446 li
235.758 99.2698 238.937 96.0912 242.113 92.9147 cv
244.838 93.9244 247.233 95.6218 249.084 97.7952 cv
249.025 97.881 248.967 97.966 248.911 98.0499 cv
246.024 100.939 243.14 103.827 240.254 106.716 cv
1 .85098 .623529 rgb
f
248.911 98.0499 mo
248.967 97.966 249.025 97.881 249.084 97.7952 cv
249.097 97.8096 249.109 97.8243 249.121 97.8388 cv
249.051 97.9093 248.981 97.9793 248.911 98.0499 cv
.843137 .654902 .407843 rgb
f
239.703 107.268 mo
236.621 107.266 li
232.191 102.837 li
232.321 102.706 232.451 102.576 232.581 102.446 cv
236.85 106.715 li
240.254 106.716 li
240.07 106.9 239.886 107.084 239.703 107.268 cv
249.121 97.8388 mo
249.109 97.8243 249.097 97.8096 249.084 97.7952 cv
247.233 95.6218 244.838 93.9244 242.113 92.9147 cv
242.257 92.7708 242.4 92.6275 242.544 92.4836 cv
245.268 93.5358 247.659 95.2554 249.518 97.4416 cv
249.386 97.5737 249.253 97.7066 249.121 97.8388 cv
f
251.421 95.5371 mo
249.548 93.3831 247.223 91.6319 244.596 90.4314 cv
247.138 87.8894 249.682 85.3456 252.224 82.8036 cv
264.146 82.8036 li
262.947 84.0029 261.746 85.2053 260.547 86.4046 cv
251.8 86.4046 li
251.8 88.9928 li
257.96 88.9928 li
255.781 91.1736 253.6 93.3561 251.421 95.5371 cv
1 .85098 .623529 rgb
f
271.807 75.1403 mo
259.887 75.1403 li
260.717 74.3107 261.547 73.4805 262.377 72.6509 cv
274.296 72.6509 li
273.466 73.4807 272.637 74.3105 271.807 75.1403 cv
.894118 .894118 .894118 rgb
f
270.811 76.1361 mo
258.892 76.1361 li
259.224 75.8034 259.555 75.473 259.887 75.1403 cv
271.807 75.1403 li
271.475 75.4725 271.143 75.804 270.811 76.1361 cv
.803922 .803922 .803922 rgb
f
268.871 78.0772 mo
256.951 78.0772 li
257.597 77.431 258.245 76.7823 258.892 76.1361 cv
270.811 76.1361 li
270.165 76.7825 269.517 77.4308 268.871 78.0772 cv
1 .85098 .623529 rgb
f
264.146 82.8036 mo
252.224 82.8036 li
253.8 81.2277 255.375 79.6532 256.951 78.0772 cv
268.871 78.0772 li
267.295 79.6535 265.722 81.2272 264.146 82.8036 cv
.843137 .654902 .407843 rgb
f
257.96 88.9928 mo
251.8 88.9928 li
251.8 86.4046 li
260.547 86.4046 li
259.684 87.2679 258.823 88.1295 257.96 88.9928 cv
f
251.037 95.9219 mo
249.167 93.7623 246.829 92.0173 244.183 90.8445 cv
244.322 90.7059 244.458 90.57 244.596 90.4314 cv
247.223 91.6319 249.548 93.3831 251.421 95.5371 cv
251.293 95.6654 251.165 95.7936 251.037 95.9219 cv
f
223.556 123.439 mo
221.387 121.566 219.635 119.223 218.459 116.569 cv
219.005 116.023 219.552 115.476 220.098 114.93 cv
221.153 117.66 222.879 120.058 225.073 121.919 cv
224.568 122.424 224.06 122.933 223.556 123.439 cv
234.467 112.51 mo
232.984 112.51 li
233.869 111.979 234.465 111.014 234.467 109.91 cv
234.469 108.777 233.847 107.789 232.927 107.265 cv
233.473 107.265 li
230.618 104.41 li
231.143 103.885 231.667 103.361 232.191 102.837 cv
236.621 107.266 li
239.703 107.268 li
237.957 109.016 236.213 110.763 234.467 112.51 cv
249.518 97.4416 mo
247.659 95.2554 245.268 93.5358 242.544 92.4836 cv
243.09 91.9377 243.637 91.3905 244.183 90.8445 cv
246.829 92.0173 249.167 93.7623 251.037 95.9219 cv
250.53 96.4287 250.025 96.9348 249.518 97.4416 cv
.968627 .968627 .968627 rgb
f
209.967 109.535 mo
209.967 72.6509 li
246.851 72.6509 li
244.362 75.1403 li
212.457 75.1403 li
212.457 107.046 li
209.967 109.535 li
.894118 .894118 .894118 rgb
f
212.457 107.046 mo
212.457 75.1403 li
244.362 75.1403 li
243.366 76.1361 li
213.452 76.1361 li
213.452 106.05 li
212.457 107.046 li
.803922 .803922 .803922 rgb
f
213.452 106.05 mo
213.452 76.1361 li
243.366 76.1361 li
241.425 78.0772 li
216.352 78.0772 li
216.352 82.8036 li
236.698 82.8036 li
229.791 89.7114 li
223.957 91.7166 219.331 96.3431 217.325 102.177 cv
213.452 106.05 li
1 .85098 .623529 rgb
f
236.698 82.8036 mo
216.352 82.8036 li
216.352 78.0772 li
241.425 78.0772 li
236.698 82.8036 li
.843137 .654902 .407843 rgb
f
217.325 102.177 mo
219.331 96.3431 223.957 91.7166 229.791 89.7114 cv
228.85 90.6521 li
224.067 92.6287 220.243 96.4531 218.266 101.236 cv
217.325 102.177 li
f
218.266 101.236 mo
220.243 96.4531 224.067 92.6287 228.85 90.6521 cv
218.266 101.236 li
.968627 .968627 .968627 rgb
f
192.77 137.313 mo
121.073 137.313 li
121.073 135.717 li
121.409 135.717 li
121.409 135.717 li
136.856 135.717 li
154.835 135.717 li
191.773 135.717 li
191.773 98.7791 li
191.773 80.8001 li
191.773 74.2465 li
192.77 74.2465 li
192.77 137.313 li
.101961 .607843 .741176 rgb
f
120.076 135.717 mo
120.076 72.6509 li
191.773 72.6509 li
191.773 135.717 li
120.076 135.717 li
.85098 .85098 .85098 rgb
f
189.283 133.228 mo
122.565 133.228 li
122.565 75.1403 li
189.283 75.1403 li
189.283 133.228 li
.717647 .717647 .717647 rgb
f
123.561 132.232 mo
123.561 76.1361 li
188.288 76.1361 li
188.288 132.232 li
123.561 132.232 li
.52549 .87451 .866667 rgb
f
185.315 82.8036 mo
126.461 82.8036 li
126.461 78.0772 li
185.315 78.0772 li
185.315 82.8036 li
.294118 .54902 .537255 rgb
f
185.09 88.9928 mo
161.908 88.9928 li
161.908 86.4046 li
185.09 86.4046 li
185.09 88.9928 li
f
185.09 128.379 mo
169.673 128.379 li
169.673 125.791 li
185.09 125.791 li
185.09 128.379 li
cp
f
185.09 124.103 mo
169.673 124.103 li
169.673 121.514 li
185.09 121.514 li
185.09 124.103 li
f
184.978 93.7191 mo
167.76 93.7191 li
167.76 92.5938 li
184.978 92.5938 li
184.978 93.7191 li
.956863 .956863 .956863 rgb
f
184.978 97.3201 mo
167.76 97.3201 li
167.76 96.1948 li
184.978 96.1948 li
184.978 97.3201 li
f
184.978 100.921 mo
167.76 100.921 li
167.76 99.7958 li
184.978 99.7958 li
184.978 100.921 li
f
184.978 104.522 mo
167.76 104.522 li
167.76 103.397 li
184.978 103.397 li
184.978 104.522 li
f
184.978 108.123 mo
167.76 108.123 li
167.76 106.998 li
184.978 106.998 li
184.978 108.123 li
f
184.978 111.724 mo
167.76 111.724 li
167.76 110.599 li
184.978 110.599 li
184.978 111.724 li
f
150.558 98.9753 mo
151.108 98.9753 151.593 99.055 152.042 99.2193 cv
153.11 99.6095 154.48 100.582 155.606 104.67 cv
156.24 106.976 156.274 110.622 155.756 114.684 cv
157.399 109.548 157.8 104.33 156.544 101.636 cv
154.916 98.1396 153.149 98.1396 152.484 98.1396 cv
151.278 98.1396 149.872 98.6376 148.422 99.2901 cv
149.161 99.0999 149.874 98.9753 150.558 98.9753 cv
145.892 129.918 mo
143.543 129.918 141.301 128.591 139.229 125.975 cv
132.66 117.681 130.145 109.987 132.328 104.866 cv
133.519 102.072 136.065 100.354 139.497 100.027 cv
140.07 99.9726 140.673 99.8233 141.301 99.61 cv
141.301 99.61 141.242 98.6232 141.23 98.4019 cv
138.64 98.1961 138.36 97.6641 138.237 97.429 cv
138.161 97.286 li
138.169 97.1251 li
138.316 94.144 138.542 93.9798 138.76 93.8201 cv
138.881 93.7319 139.027 93.6869 139.195 93.6869 cv
139.442 93.6869 139.735 93.7802 140.275 93.9595 cv
140.53 94.0443 140.818 94.1406 141.104 94.2201 cv
141.104 93.9515 141.105 93.6846 141.108 93.42 cv
138.838 92.8534 138.667 92.2022 138.6 91.9473 cv
138.559 91.7912 li
138.603 91.6355 li
139.522 88.3973 139.809 88.2751 140.062 88.1668 cv
140.152 88.1282 140.251 88.1086 140.356 88.1086 cv
140.659 88.1086 140.983 88.2717 141.469 88.6129 cv
141.537 88.2244 141.613 87.875 141.698 87.558 cv
141.721 87.2278 141.976 86.5949 144.813 86.5949 cv
147.929 86.5949 147.929 87.3587 147.929 87.6462 cv
147.929 87.6624 147.911 88.3333 147.903 89.3807 cv
148.156 89.3068 148.409 89.2227 148.634 89.1478 cv
149.174 88.9685 149.467 88.8752 149.714 88.8752 cv
149.881 88.8752 150.028 88.9202 150.149 89.0089 cv
150.367 89.1691 150.592 89.334 150.739 92.3134 cv
150.747 92.4748 li
150.672 92.6178 li
150.544 92.8598 150.289 93.3446 147.941 93.5664 cv
147.97 94.6396 148.016 95.6311 148.077 96.5199 cv
149.557 95.9049 151.039 95.4611 152.483 95.4611 cv
155.269 95.4611 157.392 97.1108 158.973 100.505 cv
161.294 105.487 159.263 116.239 154.627 123.513 cv
151.957 127.703 148.936 129.918 145.893 129.918 cv
145.892 129.918 li
.294118 .54902 .537255 rgb
f
144.813 87.8593 mo
143.832 87.8593 143.037 87.7637 143.037 87.646 cv
143.037 87.5282 143.832 87.4328 144.813 87.4328 cv
145.793 87.4328 146.589 87.5282 146.589 87.646 cv
146.589 87.7637 145.793 87.8593 144.813 87.8593 cv
150.15 92.3427 mo
150.15 92.3427 150.016 89.6434 149.8 89.4853 cv
149.613 89.3485 148.333 89.9598 147.309 90.1273 cv
147.312 88.6499 147.339 87.646 147.339 87.646 cv
147.339 87.3914 146.208 87.1849 144.813 87.1849 cv
143.418 87.1849 142.287 87.3914 142.287 87.646 cv
142.125 88.2238 142.003 88.9141 141.912 89.6759 cv
141.335 89.2402 140.535 88.6063 140.294 88.7096 cv
140.013 88.8299 139.171 91.7969 139.171 91.7969 cv
139.322 92.369 140.919 92.7827 141.705 92.9533 cv
141.692 93.6065 141.691 94.2766 141.7 94.9531 cv
140.661 94.8118 139.301 94.1553 139.108 94.2966 cv
138.892 94.4547 138.759 97.1541 138.759 97.1541 cv
139.018 97.6471 141.027 97.8052 141.793 97.8481 cv
141.813 98.245 141.834 98.6391 141.857 99.0251 cv
143.002 98.7656 144.336 98.1086 145.739 97.4144 cv
146.317 97.128 146.901 96.8398 147.489 96.5699 cv
147.409 95.4055 147.362 94.1802 147.337 93.0228 cv
148.212 92.9643 149.912 92.7937 150.15 92.3427 cv
154.182 120.079 mo
155.558 114.191 155.949 108.142 155.036 104.827 cv
153.975 100.968 152.724 100.097 151.839 99.7736 cv
150.337 99.2244 148.41 99.8623 146.389 100.532 cv
144.857 101.039 143.294 101.549 141.673 101.68 cv
143.074 101.24 144.504 100.538 145.991 99.8022 cv
148.229 98.6946 150.543 97.5495 152.484 97.5495 cv
153.689 97.5495 155.477 97.9474 157.079 101.386 cv
158.883 105.258 157.491 113.607 154.182 120.079 cv
158.438 100.753 mo
153.681 90.5426 145.385 100.059 139.553 100.615 cv
130.824 101.446 128.584 111.584 139.692 125.609 cv
150.801 139.633 162.811 110.141 158.438 100.753 cv
.956863 .956863 .956863 rgb
f
154.835 135.717 mo
136.856 135.717 li
139.345 133.228 li
157.324 133.228 li
154.835 135.717 li
.894118 .894118 .894118 rgb
f
189.283 101.269 mo
189.283 83.2898 li
191.773 80.8001 li
191.773 98.7791 li
189.283 101.269 li
f
157.324 133.228 mo
139.345 133.228 li
140.341 132.232 li
158.32 132.232 li
157.324 133.228 li
188.288 102.264 mo
188.288 84.2855 li
189.283 83.2898 li
189.283 101.269 li
188.288 102.264 li
.803922 .803922 .803922 rgb
f
158.32 132.232 mo
140.341 132.232 li
143.239 129.334 li
144.105 129.722 144.991 129.918 145.892 129.918 cv
145.893 129.918 li
148.936 129.918 151.957 127.703 154.627 123.513 cv
156.472 120.618 157.904 117.172 158.814 113.759 cv
168.051 104.522 li
184.978 104.522 li
184.978 103.397 li
169.176 103.397 li
171.652 100.921 li
184.978 100.921 li
184.978 99.7958 li
172.777 99.7958 li
175.253 97.3201 li
184.978 97.3201 li
184.978 96.1948 li
176.378 96.1948 li
178.854 93.7191 li
184.978 93.7191 li
184.978 92.5938 li
179.979 92.5938 li
183.58 88.9928 li
185.09 88.9928 li
185.09 87.483 li
188.288 84.2855 li
188.288 102.264 li
183.554 106.998 li
167.76 106.998 li
167.76 108.123 li
182.429 108.123 li
179.953 110.599 li
167.76 110.599 li
167.76 111.724 li
178.828 111.724 li
158.32 132.232 li
.670588 .913725 .905882 rgb
f
185.09 88.9928 mo
183.58 88.9928 li
185.09 87.483 li
185.09 88.9928 li
.505882 .686274 .678431 rgb
f
184.978 93.7191 mo
178.854 93.7191 li
179.979 92.5938 li
184.978 92.5938 li
184.978 93.7191 li
.968627 .968627 .968627 rgb
f
184.978 97.3201 mo
175.253 97.3201 li
176.378 96.1948 li
184.978 96.1948 li
184.978 97.3201 li
f
184.978 100.921 mo
171.652 100.921 li
172.777 99.7958 li
184.978 99.7958 li
184.978 100.921 li
f
184.978 104.522 mo
168.051 104.522 li
169.176 103.397 li
184.978 103.397 li
184.978 104.522 li
f
182.429 108.123 mo
167.76 108.123 li
167.76 106.998 li
183.554 106.998 li
182.429 108.123 li
f
178.828 111.724 mo
167.76 111.724 li
167.76 110.599 li
179.953 110.599 li
178.828 111.724 li
f
145.893 129.918 mo
145.892 129.918 li
144.991 129.918 144.105 129.722 143.239 129.334 cv
143.69 128.883 li
144.431 129.186 145.167 129.327 145.892 129.327 cv
151.066 129.327 155.711 122.122 157.949 114.624 cv
158.814 113.759 li
157.904 117.172 156.472 120.618 154.627 123.513 cv
151.957 127.703 148.936 129.918 145.893 129.918 cv
154.182 120.079 mo
154.348 119.365 154.501 118.649 154.638 117.935 cv
155.554 117.019 li
155.144 118.068 154.685 119.095 154.182 120.079 cv
.505882 .686274 .678431 rgb
f
145.892 129.327 mo
145.167 129.327 144.431 129.186 143.69 128.883 cv
154.638 117.935 li
154.501 118.649 154.348 119.365 154.182 120.079 cv
154.685 119.095 155.144 118.068 155.554 117.019 cv
157.949 114.624 li
155.711 122.122 151.066 129.327 145.892 129.327 cv
.968627 .968627 .968627 rgb
f
121.409 135.717 mo
120.076 135.717 li
120.076 125.061 li
120.905 124.231 121.736 123.401 122.565 122.571 cv
122.565 133.228 li
123.893 133.228 li
123.066 134.057 122.237 134.888 121.409 135.717 cv
.894118 .894118 .894118 rgb
f
123.893 133.228 mo
122.565 133.228 li
122.565 122.571 li
122.898 122.239 123.228 121.908 123.561 121.575 cv
123.561 132.232 li
124.887 132.232 li
124.556 132.565 124.225 132.896 123.893 133.228 cv
.803922 .803922 .803922 rgb
f
124.887 132.232 mo
123.561 132.232 li
123.561 121.575 li
126.417 118.719 129.277 115.86 132.133 113.003 cv
132.805 115.552 134.061 118.327 135.869 121.231 cv
132.208 124.897 128.547 128.565 124.887 132.232 cv
.670588 .913725 .905882 rgb
f
135.869 121.231 mo
134.061 118.327 132.805 115.552 132.133 113.003 cv
132.3 112.837 132.464 112.672 132.631 112.506 cv
133.231 114.98 134.424 117.768 136.297 120.801 cv
136.154 120.945 136.012 121.087 135.869 121.231 cv
.505882 .686274 .678431 rgb
f
154.786 102.287 mo
153.858 100.16 152.861 99.5185 152.042 99.2193 cv
151.593 99.055 151.108 98.9753 150.558 98.9753 cv
149.874 98.9753 149.161 99.0999 148.422 99.2901 cv
149.872 98.6376 151.278 98.1396 152.484 98.1396 cv
153.099 98.1396 154.654 98.1396 156.172 100.9 cv
155.711 101.362 155.247 101.825 154.786 102.287 cv
.670588 .913725 .905882 rgb
f
154.335 102.739 mo
153.457 100.62 152.535 100.028 151.839 99.7736 cv
151.44 99.6277 151.011 99.5656 150.558 99.5656 cv
149.306 99.5656 147.873 100.04 146.389 100.532 cv
145.546 100.811 144.694 101.091 143.829 101.308 cv
144.121 101.016 144.414 100.723 144.706 100.431 cv
145.13 100.228 145.558 100.016 145.991 99.8022 cv
148.229 98.6946 150.543 97.5495 152.484 97.5495 cv
153.572 97.5495 155.134 97.8738 156.606 100.465 cv
156.462 100.61 156.317 100.755 156.172 100.9 cv
154.654 98.1396 153.099 98.1396 152.484 98.1396 cv
151.278 98.1396 149.872 98.6376 148.422 99.2901 cv
149.161 99.0999 149.874 98.9753 150.558 98.9753 cv
151.108 98.9753 151.593 99.055 152.042 99.2193 cv
152.861 99.5185 153.858 100.16 154.786 102.287 cv
154.636 102.438 154.485 102.588 154.335 102.739 cv
.505882 .686274 .678431 rgb
f
181.915 75.1403 mo
169.996 75.1403 li
170.826 74.3107 171.656 73.4805 172.485 72.6509 cv
184.404 72.6509 li
183.575 73.4807 182.745 74.3105 181.915 75.1403 cv
.894118 .894118 .894118 rgb
f
180.92 76.1361 mo
169 76.1361 li
169.333 75.8034 169.663 75.473 169.996 75.1403 cv
181.915 75.1403 li
181.583 75.4725 181.252 75.804 180.92 76.1361 cv
.803922 .803922 .803922 rgb
f
158.129 98.9408 mo
156.66 96.603 154.801 95.4611 152.483 95.4611 cv
151.327 95.4611 150.146 95.7457 148.962 96.1748 cv
153.419 91.7177 157.876 87.2607 162.333 82.8036 cv
174.255 82.8036 li
173.056 84.0029 171.854 85.2053 170.655 86.4046 cv
161.908 86.4046 li
161.908 88.9928 li
168.069 88.9928 li
164.755 92.3088 161.442 95.6243 158.129 98.9408 cv
178.979 78.0772 mo
167.059 78.0772 li
167.705 77.431 168.354 76.7823 169 76.1361 cv
180.92 76.1361 li
180.274 76.7825 179.626 77.4308 178.979 78.0772 cv
.670588 .913725 .905882 rgb
f
174.255 82.8036 mo
162.333 82.8036 li
163.909 81.2277 165.483 79.6532 167.059 78.0772 cv
178.979 78.0772 li
177.404 79.6535 175.83 81.2272 174.255 82.8036 cv
.505882 .686274 .678431 rgb
f
168.069 88.9928 mo
161.908 88.9928 li
161.908 86.4046 li
170.655 86.4046 li
169.793 87.2679 168.932 88.1295 168.069 88.9928 cv
f
157.701 99.3698 mo
156.194 96.9105 154.402 96.0513 152.484 96.0513 cv
151.008 96.0513 149.456 96.5594 147.899 97.2372 cv
148.253 96.8832 148.608 96.5288 148.962 96.1748 cv
150.146 95.7457 151.327 95.4611 152.483 95.4611 cv
154.801 95.4611 156.66 96.603 158.129 98.9408 cv
157.987 99.0832 157.843 99.2274 157.701 99.3698 cv
f
136.297 120.801 mo
134.424 117.768 133.231 114.98 132.631 112.506 cv
136.364 108.773 140.096 105.041 143.829 101.308 cv
144.694 101.091 145.546 100.811 146.389 100.532 cv
147.873 100.04 149.306 99.5656 150.558 99.5656 cv
151.011 99.5656 151.44 99.6277 151.839 99.7736 cv
152.535 100.028 153.457 100.62 154.335 102.739 cv
148.322 108.759 142.309 114.78 136.297 120.801 cv
156.606 100.465 mo
155.134 97.8738 153.572 97.5495 152.484 97.5495 cv
150.543 97.5495 148.229 98.6946 145.991 99.8022 cv
145.558 100.016 145.13 100.228 144.706 100.431 cv
145.77 99.3665 146.835 98.3013 147.899 97.2372 cv
149.456 96.5594 151.008 96.0513 152.484 96.0513 cv
154.402 96.0513 156.194 96.9105 157.701 99.3698 cv
157.335 99.7355 156.972 100.099 156.606 100.465 cv
.968627 .968627 .968627 rgb
f
120.076 109.535 mo
120.076 72.6509 li
156.96 72.6509 li
154.471 75.1403 li
122.565 75.1403 li
122.565 107.046 li
120.076 109.535 li
.894118 .894118 .894118 rgb
f
122.565 107.046 mo
122.565 75.1403 li
154.471 75.1403 li
153.475 76.1361 li
123.561 76.1361 li
123.561 106.05 li
122.565 107.046 li
.803922 .803922 .803922 rgb
f
123.561 106.05 mo
123.561 76.1361 li
153.475 76.1361 li
151.534 78.0772 li
126.461 78.0772 li
126.461 82.8036 li
146.807 82.8036 li
142.865 86.7463 li
141.841 86.9543 141.714 87.3289 141.698 87.558 cv
141.658 87.7069 141.62 87.863 141.584 88.0269 cv
141.187 88.4238 li
140.85 88.2112 140.596 88.1086 140.356 88.1086 cv
140.251 88.1086 140.152 88.1282 140.062 88.1668 cv
139.834 88.2642 139.58 88.373 138.862 90.7485 cv
123.561 106.05 li
.670588 .913725 .905882 rgb
f
146.807 82.8036 mo
126.461 82.8036 li
126.461 78.0772 li
151.534 78.0772 li
146.807 82.8036 li
.505882 .686274 .678431 rgb
f
138.862 90.7485 mo
139.58 88.373 139.834 88.2642 140.062 88.1668 cv
140.152 88.1282 140.251 88.1086 140.356 88.1086 cv
140.596 88.1086 140.85 88.2112 141.187 88.4238 cv
140.757 88.8537 li
140.592 88.7586 140.451 88.6984 140.355 88.6984 cv
140.332 88.6984 140.311 88.702 140.294 88.7096 cv
140.183 88.7571 139.984 89.2485 139.785 89.8259 cv
138.862 90.7485 li
141.584 88.0269 mo
141.62 87.863 141.658 87.7069 141.698 87.558 cv
141.714 87.3289 141.841 86.9543 142.865 86.7463 cv
141.584 88.0269 li
f
139.785 89.8259 mo
139.984 89.2485 140.183 88.7571 140.294 88.7096 cv
140.311 88.702 140.332 88.6984 140.355 88.6984 cv
140.451 88.6984 140.592 88.7586 140.757 88.8537 cv
139.785 89.8259 li
.968627 .968627 .968627 rgb
f
311.233 102.896 mo
291.575 102.896 li
291.575 101.564 li
309.817 101.564 li
309.817 75.5153 li
311.233 75.5153 li
311.233 102.896 li
.0941176 .603922 .733333 rgb
f
309.817 101.564 mo
290.16 101.564 li
290.16 74.1834 li
309.817 74.1834 li
309.817 101.564 li
.847059 .490196 .0980392 rgb
f
308.509 100.258 mo
291.468 100.258 li
291.468 75.489 li
308.509 75.489 li
308.509 100.258 li
.956863 .956863 .956863 rgb
f
306.921 81.1915 mo
292.792 81.1915 li
292.792 77.8818 li
306.921 77.8818 li
306.921 81.1915 li
cp
.988235 .678431 .337255 rgb
f
307.009 84.9713 mo
292.705 84.9713 li
292.705 84.2818 li
307.009 84.2818 li
307.009 84.9713 li
cp
.219608 .219608 .219608 rgb
f
307.009 86.645 mo
292.705 86.645 li
292.705 85.9555 li
307.009 85.9555 li
307.009 86.645 li
cp
f
307.009 88.3187 mo
292.705 88.3187 li
292.705 87.6292 li
307.009 87.6292 li
307.009 88.3187 li
cp
f
307.009 89.9923 mo
292.705 89.9923 li
292.705 89.3028 li
307.009 89.3028 li
307.009 89.9923 li
cp
f
297.72 96.3986 mo
292.705 96.3986 li
292.705 97.0882 li
297.72 97.0882 li
297.72 96.3986 li
cp
f
301.906 96.3987 mo
301.906 97.0882 li
307.009 97.0882 li
307.009 96.3987 li
301.906 96.3987 li
f
302.906 98.4704 mo
301.331 98.4704 300.054 97.1934 300.054 95.6183 cv
300.054 94.0431 301.331 92.7661 302.906 92.7661 cv
304.482 92.7661 305.759 94.0431 305.759 95.6183 cv
305.759 95.8889 305.721 96.1506 305.65 96.3987 cv
305.402 96.3987 li
305.479 96.1523 305.521 95.89 305.521 95.6183 cv
305.521 94.1743 304.35 93.0038 302.906 93.0038 cv
301.463 93.0038 300.292 94.1743 300.292 95.6183 cv
300.292 97.0621 301.463 98.2326 302.906 98.2326 cv
303.805 98.2326 304.598 97.779 305.069 97.0882 cv
305.351 97.0882 li
304.852 97.9164 303.944 98.4704 302.906 98.4704 cv
.588235 .588235 .588235 rgb
f
305.351 97.0882 mo
305.069 97.0882 li
305.212 96.8782 305.325 96.6464 305.402 96.3987 cv
305.65 96.3987 li
305.581 96.6435 305.48 96.8749 305.351 97.0882 cv
.219608 .219608 .219608 rgb
f
302.906 97.8365 mo
301.681 97.8365 300.688 96.8434 300.688 95.6183 cv
300.688 94.3931 301.681 93.3999 302.906 93.3999 cv
304.132 93.3999 305.125 94.3931 305.125 95.6183 cv
305.125 95.8929 305.075 96.1559 304.984 96.3987 cv
304.785 96.3987 li
304.885 96.1584 304.94 95.8948 304.94 95.6183 cv
304.94 94.4952 304.029 93.5848 302.906 93.5848 cv
301.783 93.5848 300.873 94.4952 300.873 95.6183 cv
300.873 96.7413 301.783 97.6517 302.906 97.6517 cv
303.451 97.6517 303.946 97.4373 304.311 97.0882 cv
304.568 97.0882 li
304.161 97.5472 303.568 97.8365 302.906 97.8365 cv
.588235 .588235 .588235 rgb
f
304.568 97.0882 mo
304.311 97.0882 li
304.513 96.8951 304.676 96.6607 304.785 96.3987 cv
304.984 96.3987 li
304.888 96.6543 304.746 96.8875 304.568 97.0882 cv
.219608 .219608 .219608 rgb
f
324.543 134.229 mo
304.886 134.229 li
304.886 132.897 li
323.128 132.897 li
323.128 106.849 li
324.543 106.849 li
324.543 134.229 li
.0941176 .603922 .733333 rgb
f
323.128 132.897 mo
303.47 132.897 li
303.47 105.517 li
323.128 105.517 li
323.128 132.897 li
.847059 .490196 .0980392 rgb
f
321.82 131.592 mo
304.779 131.592 li
304.779 106.822 li
321.82 106.822 li
321.82 131.592 li
.956863 .956863 .956863 rgb
f
320.232 112.525 mo
306.103 112.525 li
306.103 109.215 li
320.232 109.215 li
320.232 112.525 li
cp
.988235 .678431 .337255 rgb
f
320.32 116.305 mo
306.015 116.305 li
306.015 115.615 li
320.32 115.615 li
320.32 116.305 li
cp
.219608 .219608 .219608 rgb
f
320.32 117.978 mo
306.015 117.978 li
306.015 117.289 li
320.32 117.289 li
320.32 117.978 li
cp
f
320.32 119.652 mo
306.015 119.652 li
306.015 118.962 li
320.32 118.962 li
320.32 119.652 li
cp
f
320.32 121.326 mo
306.015 121.326 li
306.015 120.636 li
320.32 120.636 li
320.32 121.326 li
cp
f
311.03 127.732 mo
306.015 127.732 li
306.015 128.422 li
311.03 128.422 li
311.03 127.732 li
cp
f
315.217 127.732 mo
315.217 128.422 li
320.32 128.422 li
320.32 127.732 li
315.217 127.732 li
f
316.217 129.804 mo
314.642 129.804 313.365 128.527 313.365 126.952 cv
313.365 125.376 314.642 124.099 316.217 124.099 cv
317.792 124.099 319.069 125.376 319.069 126.952 cv
319.069 127.222 319.032 127.484 318.961 127.732 cv
318.713 127.732 li
318.79 127.486 318.832 127.223 318.832 126.952 cv
318.832 125.508 317.661 124.337 316.217 124.337 cv
314.773 124.337 313.603 125.508 313.603 126.952 cv
313.603 128.395 314.773 129.566 316.217 129.566 cv
317.116 129.566 317.909 129.112 318.38 128.422 cv
318.662 128.422 li
318.163 129.25 317.255 129.804 316.217 129.804 cv
.588235 .588235 .588235 rgb
f
318.662 128.422 mo
318.38 128.422 li
318.523 128.212 318.636 127.98 318.713 127.732 cv
318.961 127.732 li
318.892 127.977 318.79 128.208 318.662 128.422 cv
.219608 .219608 .219608 rgb
f
316.217 129.17 mo
314.992 129.17 313.999 128.177 313.999 126.952 cv
313.999 125.726 314.992 124.733 316.217 124.733 cv
317.442 124.733 318.436 125.726 318.436 126.952 cv
318.436 127.226 318.386 127.489 318.295 127.732 cv
318.096 127.732 li
318.196 127.492 318.251 127.228 318.251 126.952 cv
318.251 125.828 317.34 124.918 316.217 124.918 cv
315.094 124.918 314.184 125.828 314.184 126.952 cv
314.184 128.075 315.094 128.985 316.217 128.985 cv
316.762 128.985 317.257 128.771 317.622 128.422 cv
317.879 128.422 li
317.472 128.881 316.879 129.17 316.217 129.17 cv
.588235 .588235 .588235 rgb
f
317.879 128.422 mo
317.622 128.422 li
317.824 128.228 317.987 127.994 318.096 127.732 cv
318.295 127.732 li
318.198 127.988 318.056 128.221 317.879 128.422 cv
.219608 .219608 .219608 rgb
f
86.6313 97.5765 mo
76.2294 97.5765 67.7971 89.1441 67.7971 78.7423 cv
67.7971 68.3405 76.2294 59.9082 86.6313 59.9082 cv
97.0332 59.9082 105.466 68.3405 105.466 78.7423 cv
105.466 89.1441 97.0332 97.5765 86.6313 97.5765 cv
.0941176 .603922 .733333 rgb
f
103.86 77.1366 mo
103.86 87.5384 95.4274 95.9708 85.0256 95.9708 cv
74.6238 95.9708 66.1914 87.5384 66.1914 77.1366 cv
66.1914 66.7347 74.6238 58.3024 85.0256 58.3024 cv
95.4274 58.3024 103.86 66.7347 103.86 77.1366 cv
cp
.180392 .192157 .247059 rgb
f
85.0256 93.9067 mo
75.7783 93.9067 68.2554 86.3833 68.2554 77.1366 cv
68.2554 67.8898 75.7783 60.3664 85.0256 60.3664 cv
94.2729 60.3664 101.796 67.8898 101.796 77.1366 cv
101.796 86.3833 94.2729 93.9067 85.0256 93.9067 cv
cp
.85098 .85098 .85098 rgb
f
101.796 77.1366 mo
101.796 76.2097 101.701 75.3065 101.555 74.4201 cv
98.7448 69.0865 93.1521 65.4372 86.7158 65.4372 cv
77.4686 65.4372 69.9457 72.9606 69.9457 82.2074 cv
69.9457 83.1343 70.0408 84.0375 70.1862 84.9238 cv
72.9966 90.2574 78.5893 93.9067 85.0256 93.9067 cv
94.2729 93.9067 101.796 86.3833 101.796 77.1366 cv
cp
.956863 .956863 .956863 rgb
f
85.4637 77.478 mo
69.8564 73.7201 li
69.745 74.1838 li
85.3224 77.9345 li
85.3556 77.7765 85.4055 77.6266 85.4637 77.478 cv
cp
.933333 .32549 .388235 rgb
f
85.0973 78.6824 mo
83.018 76.9533 li
89.8267 68.7658 li
91.9061 70.495 li
85.0973 78.6824 li
cp
.180392 .192157 .247059 rgb
f
86.1964 90.6523 mo
84.322 90.7829 li
83.3187 76.403 li
85.1932 76.2725 li
86.1964 90.6523 li
cp
f
103.784 6.58604 mo
103.784 8.8427 101.954 10.6721 99.6978 10.6721 cv
20.3805 10.6721 li
18.1238 10.6721 16.2944 8.8427 16.2944 6.58604 cv
16.2944 4.32938 18.1238 0 20.3805 0 cv
99.6978 0 li
101.954 0 103.784 4.32938 103.784 6.58604 cv
cp
1 1 1 rgb
f
109.924 4.90356 mo
109.924 6.231 108.848 7.30711 107.52 7.30711 cv
12.3397 7.30711 li
11.0123 7.30711 9.93614 6.231 9.93614 4.90356 cv
9.93614 3.57611 11.0123 0 12.3397 0 cv
107.52 0 li
108.848 0 109.924 3.57611 109.924 4.90356 cv
cp
.956863 .956863 .956863 rgb
f
239.88 6.58604 mo
239.88 8.8427 238.051 10.6721 235.794 10.6721 cv
156.477 10.6721 li
154.22 10.6721 152.391 8.8427 152.391 6.58604 cv
152.391 4.32938 154.22 0 156.477 0 cv
235.794 0 li
238.051 0 239.88 4.32938 239.88 6.58604 cv
cp
1 1 1 rgb
f
246.021 4.90356 mo
246.021 6.231 244.944 7.30711 243.617 7.30711 cv
148.436 7.30711 li
147.109 7.30711 146.033 6.231 146.033 4.90356 cv
146.033 3.57611 147.109 0 148.436 0 cv
243.617 0 li
244.944 0 246.021 3.57611 246.021 4.90356 cv
cp
.956863 .956863 .956863 rgb
f
375.977 6.58604 mo
375.977 8.8427 374.147 10.6721 371.891 10.6721 cv
292.573 10.6721 li
290.317 10.6721 288.487 8.8427 288.487 6.58604 cv
288.487 4.32938 290.317 0 292.573 0 cv
371.891 0 li
374.147 0 375.977 4.32938 375.977 6.58604 cv
cp
1 1 1 rgb
f
382.117 4.90356 mo
382.117 6.231 381.041 7.30711 379.713 7.30711 cv
284.533 7.30711 li
283.205 7.30711 282.129 6.231 282.129 4.90356 cv
282.129 3.57611 283.205 0 284.533 0 cv
379.713 0 li
381.041 0 382.117 3.57611 382.117 4.90356 cv
cp
.956863 .956863 .956863 rgb
f
512.073 6.58604 mo
512.073 8.8427 510.244 10.6721 507.987 10.6721 cv
428.67 10.6721 li
426.413 10.6721 424.584 8.8427 424.584 6.58604 cv
424.584 4.32938 426.413 0 428.67 0 cv
507.987 0 li
510.244 0 512.073 4.32938 512.073 6.58604 cv
cp
1 1 1 rgb
f
518.214 4.90356 mo
518.214 6.231 517.137 7.30711 515.81 7.30711 cv
420.629 7.30711 li
419.302 7.30711 418.226 6.231 418.226 4.90356 cv
418.226 3.57611 419.302 0 420.629 0 cv
515.81 0 li
517.137 0 518.214 3.57611 518.214 4.90356 cv
cp
.956863 .956863 .956863 rgb
f
113.865 181.145 mo
76.6959 181.145 li
76.5675 180.802 76.4973 180.432 76.4973 180.045 cv
76.4973 178.998 77.0121 178.071 77.8018 177.503 cv
77.0327 177.151 76.4973 176.376 76.4973 175.475 cv
76.4973 174.697 76.8966 174.012 77.5009 173.613 cv
76.325 173.162 75.4898 172.024 75.4898 170.689 cv
75.4898 168.96 76.8913 167.559 78.6203 167.559 cv
78.7167 167.559 78.812 167.564 78.9062 167.572 cv
78.4449 167.164 78.1525 166.568 78.1525 165.904 cv
78.1525 164.672 79.1514 163.673 80.3834 163.673 cv
80.4029 163.674 li
80.1166 163.201 79.9516 162.647 79.9516 162.054 cv
79.9516 160.325 81.3532 158.923 83.0821 158.923 cv
83.8691 158.923 84.5878 159.214 85.1378 159.694 cv
85.1868 158.505 86.1633 157.556 87.364 157.556 cv
87.6064 157.556 87.8392 157.596 88.0576 157.667 cv
88.4964 156.468 89.6475 155.613 90.9983 155.613 cv
91.8534 155.613 92.628 155.956 93.193 156.511 cv
93.6537 155.717 94.5114 155.181 95.4962 155.181 cv
96.5003 155.181 97.374 155.737 97.8276 156.558 cv
98.3864 156.039 99.1349 155.721 99.9579 155.721 cv
101.238 155.721 102.338 156.489 102.823 157.589 cv
102.945 157.569 103.069 157.556 103.196 157.556 cv
104.397 157.556 105.374 158.505 105.423 159.694 cv
105.973 159.214 106.691 158.923 107.478 158.923 cv
109.207 158.923 110.609 160.325 110.609 162.054 cv
110.609 162.647 110.444 163.201 110.158 163.674 cv
110.177 163.673 li
111.409 163.673 112.408 164.672 112.408 165.904 cv
112.408 166.568 112.116 167.164 111.654 167.572 cv
111.748 167.564 111.844 167.559 111.94 167.559 cv
113.669 167.559 115.071 168.96 115.071 170.689 cv
115.071 172.024 114.235 173.162 113.059 173.613 cv
113.664 174.012 114.063 174.697 114.063 175.475 cv
114.063 176.376 113.528 177.151 112.759 177.503 cv
113.548 178.071 114.063 178.998 114.063 180.045 cv
114.063 180.432 113.993 180.802 113.865 181.145 cv
.101961 .607843 .741176 rgb
f
116.88 276.423 mo
111.722 276.423 li
111.722 252.595 li
105.178 252.595 li
100.895 276.423 li
96.1959 276.423 li
95.8625 252.595 li
95.4704 252.595 li
95.137 276.423 li
90.438 276.423 li
86.1544 252.595 li
81.7067 252.595 li
81.7067 265.944 li
84.4657 265.941 li
84.4665 265.941 84.4671 265.941 84.4679 265.941 cv
85.5659 265.941 86.5255 266.79 86.6123 267.847 cv
87.3161 276.423 li
51.4199 276.423 li
52.1021 267.884 li
52.1867 266.826 53.1456 265.975 54.2448 265.974 cv
61.5189 265.966 li
61.822 262 li
61.8649 261.439 62.2908 260.984 62.7737 260.979 cv
76.0491 260.851 li
76.0512 260.85 76.0533 260.85 76.0554 260.85 cv
76.2381 260.85 76.4029 260.93 76.5491 261.041 cv
76.5491 252.595 li
75.8771 252.595 li
74.4427 252.595 73.2801 251.432 73.2801 249.998 cv
73.2801 248.563 74.4427 247.401 75.8771 247.401 cv
77.3499 247.401 li
77.3499 234.553 li
75.5877 232.975 74.5783 231.156 74.5783 229.217 cv
74.5783 210.528 li
74.5783 208.529 75.6514 206.657 77.5159 205.046 cv
77.6528 202.741 79.3831 200.289 81.519 199.466 cv
88.7016 196.7 li
88.753 196.825 li
90.9916 195.95 li
90.9916 192.943 li
100.14 192.943 li
100.14 195.872 li
102.292 196.692 li
102.307 196.653 li
109.613 199.466 li
109.953 199.597 110.279 199.787 110.597 200 cv
111.057 200.299 111.491 200.66 111.873 201.084 cv
112.79 202.059 113.467 203.217 113.757 204.081 cv
116.391 205.888 117.949 208.116 117.949 210.528 cv
117.949 229.217 li
117.949 230.93 117.163 232.55 115.765 233.993 cv
115.765 247.401 li
117.43 247.401 li
118.864 247.401 120.027 248.563 120.027 249.998 cv
120.027 251.432 118.864 252.595 117.43 252.595 cv
116.88 252.595 li
116.88 276.423 li
74.185 263.399 mo
74.1833 263.399 74.1816 263.399 74.1799 263.399 cv
64.595 263.491 li
64.2465 263.495 63.9388 263.839 63.9076 264.264 cv
63.7831 265.963 li
74.9509 265.952 li
74.8529 264.158 li
74.83 263.736 74.5314 263.399 74.185 263.399 cv
113.449 235.869 mo
112.745 236.328 111.971 236.758 111.134 237.155 cv
111.827 238.428 112.22 239.887 112.22 241.438 cv
112.22 243.73 111.354 245.814 109.941 247.401 cv
113.449 247.401 li
113.449 235.869 li
79.6658 244.971 mo
79.6658 247.401 li
81.2203 247.401 li
80.5812 246.683 80.0499 245.867 79.6658 244.971 cv
79.6658 236.237 mo
79.6658 237.905 li
79.8577 237.457 80.0898 237.032 80.3485 236.626 cv
80.1149 236.499 79.8874 236.369 79.6658 236.237 cv
.0745098 .501961 .666667 rgb
f
118.388 289.567 mo
37.4349 289.567 li
38.4215 288.217 40.0894 287.33 41.9807 287.33 cv
52.4715 287.33 li
52.3501 287.073 52.2769 286.789 52.2765 286.486 cv
52.2733 283.444 li
118.548 283.444 li
118.548 287.856 li
118.548 288.452 118.496 289.027 118.388 289.567 cv
.309804 .498039 .623529 rgb
f
118.548 283.444 mo
52.2733 283.444 li
52.2665 277.09 li
51.3665 277.091 li
51.4199 276.423 li
87.3161 276.423 li
87.3677 277.053 li
86.4676 277.054 li
86.4681 277.484 li
90.6287 277.484 li
90.438 276.423 li
95.137 276.423 li
95.1221 277.484 li
96.2107 277.484 li
96.1959 276.423 li
100.895 276.423 li
100.704 277.484 li
111.722 277.484 li
111.722 276.423 li
116.88 276.423 li
116.88 279.295 li
117.912 280.316 118.548 281.685 118.548 283.194 cv
118.548 283.444 li
.72549 .733333 .74902 rgb
f
100.14 192.943 mo
90.9916 192.943 li
90.9916 190.822 li
90.7899 190.681 90.604 190.518 90.4585 190.32 cv
90.0527 190.874 89.3991 191.235 88.6594 191.235 cv
87.6345 191.235 86.7733 190.544 86.5119 189.602 cv
86.0868 189.818 85.6063 189.94 85.097 189.94 cv
83.3682 189.94 81.9667 188.539 81.9667 186.81 cv
81.9667 186.593 81.9885 186.382 82.0303 186.179 cv
81.9386 186.19 81.8456 186.198 81.7507 186.198 cv
80.5186 186.198 79.5197 185.199 79.5197 183.967 cv
79.5197 183.687 79.5735 183.421 79.6675 183.174 cv
79.6278 183.175 li
78.2858 183.175 77.1411 182.331 76.6959 181.145 cv
113.865 181.145 li
113.419 182.331 112.275 183.175 110.933 183.175 cv
110.893 183.174 li
110.987 183.421 111.041 183.687 111.041 183.967 cv
111.041 185.199 110.042 186.198 108.81 186.198 cv
108.715 186.198 108.622 186.19 108.53 186.179 cv
108.572 186.382 108.594 186.593 108.594 186.81 cv
108.594 188.539 107.192 189.94 105.463 189.94 cv
104.954 189.94 104.474 189.818 104.049 189.602 cv
103.787 190.544 102.926 191.235 101.901 191.235 cv
101.251 191.235 100.674 190.95 100.266 190.507 cv
100.14 190.6 li
100.14 192.943 li
f
107.509 301.114 mo
83.7181 301.114 li
81.1171 301.114 78.8976 299.617 77.9945 297.504 cv
41.9807 297.504 li
38.9502 297.504 36.4936 295.227 36.4936 292.417 cv
36.4936 291.361 36.8406 290.38 37.4349 289.567 cv
118.388 289.567 li
117.925 291.884 116.44 293.566 113.682 293.566 cv
113.668 295.404 li
113.668 298.558 110.911 301.114 107.509 301.114 cv
.262745 .47451 .596078 rgb
f
176.027 181.145 mo
155.613 181.145 li
155.532 180.568 155.476 179.98 155.447 179.381 cv
155.327 179.478 155.248 179.542 155.248 179.542 cv
148.557 174.756 151.149 166.383 156.643 163.705 cv
156.614 163.563 li
156.254 160.816 159.219 158.163 163.235 157.638 cv
163.705 157.576 164.169 157.547 164.622 157.547 cv
168.038 157.547 170.841 159.234 171.158 161.659 cv
171.186 161.872 171.187 162.084 171.176 162.294 cv
178.263 163.983 182.43 171.689 176.222 178.936 cv
176.209 178.936 li
176.189 179.689 176.127 180.426 176.027 181.145 cv
.101961 .607843 .741176 rgb
f
188.049 276.423 mo
182.759 276.423 li
182.759 252.376 li
178.644 252.376 li
173.17 276.423 li
166.969 276.423 li
166.543 252.376 li
166.034 252.376 li
165.608 276.423 li
159.407 276.423 li
153.933 252.376 li
151.969 252.376 li
151.969 276.423 li
146.678 276.423 li
146.678 252.376 li
145.988 252.376 li
144.517 252.376 143.324 251.183 143.324 249.712 cv
143.324 248.241 144.517 247.048 145.988 247.048 cv
147.499 247.048 li
147.499 233.869 li
145.692 232.25 144.656 230.383 144.656 228.394 cv
144.656 224.873 li
144.606 224.881 li
144.412 224.91 144.223 224.924 144.038 224.924 cv
140.636 224.924 138.782 220.187 139.625 218.573 cv
139.634 218.519 li
139.647 218.44 142.022 213.476 144.717 208.434 cv
144.932 206.883 145.774 205.421 147.117 204.108 cv
149.067 200.743 150.874 198.065 151.776 197.876 cv
159.144 195.039 li
159.227 195.115 li
161.448 194.26 li
161.448 192.943 li
170.922 192.943 li
170.922 194.26 li
173.018 195.067 li
173.1 194.991 li
180.595 197.876 li
181.538 198.322 182.748 199.937 184.024 202.079 cv
187.222 204.017 189.146 206.507 189.146 209.224 cv
189.146 212.262 li
190.676 215.655 191.804 218.391 191.976 218.713 cv
191.972 218.713 li
192.513 220.134 191.379 223.372 189.146 224.514 cv
189.146 228.394 li
189.146 230.152 188.339 231.814 186.905 233.294 cv
186.905 247.048 li
188.613 247.048 li
190.084 247.048 191.277 248.241 191.277 249.712 cv
191.277 251.183 190.084 252.376 188.613 252.376 cv
188.049 252.376 li
188.049 276.423 li
184.529 235.218 mo
183.808 235.689 183.014 236.13 182.155 236.538 cv
182.865 237.844 183.269 239.34 183.269 240.931 cv
183.269 243.282 182.381 245.42 180.932 247.048 cv
184.529 247.048 li
184.529 235.218 li
149.875 244.556 mo
149.875 247.048 li
151.47 247.048 li
150.814 246.312 150.269 245.475 149.875 244.556 cv
149.875 235.596 mo
149.875 237.307 li
150.072 236.848 150.31 236.412 150.575 235.995 cv
150.336 235.865 150.102 235.732 149.875 235.596 cv
.0745098 .501961 .666667 rgb
f
188.294 289.567 mo
134.964 289.567 li
135.004 283.444 li
188.525 283.444 li
188.525 287.963 li
188.525 288.52 188.444 289.058 188.294 289.567 cv
.309804 .498039 .623529 rgb
f
188.525 283.444 mo
135.004 283.444 li
135.017 281.573 li
135.758 279.303 137.889 277.661 140.407 277.661 cv
146.678 277.661 li
146.678 276.423 li
151.969 276.423 li
151.969 277.661 li
159.689 277.661 li
159.407 276.423 li
165.608 276.423 li
165.586 277.661 li
166.991 277.661 li
166.969 276.423 li
173.17 276.423 li
172.888 277.661 li
182.759 277.661 li
182.759 276.423 li
188.049 276.423 li
188.049 281.064 li
188.353 281.759 188.525 282.525 188.525 283.333 cv
188.525 283.444 li
.72549 .733333 .74902 rgb
f
170.922 192.943 mo
161.448 192.943 li
161.448 191.437 li
158.466 189.525 156.254 185.725 155.613 181.145 cv
176.027 181.145 li
175.44 185.345 173.534 188.892 170.922 190.927 cv
170.922 192.943 li
f
168.313 301.785 mo
152.013 301.785 li
148.952 301.785 146.471 299.304 146.471 296.243 cv
146.471 295.3 146.708 294.412 147.123 293.635 cv
139.229 293.635 li
137.519 293.635 135.99 292.875 134.95 291.679 cv
134.964 289.567 li
188.294 289.567 li
187.602 291.918 185.428 293.635 182.853 293.635 cv
173.734 293.635 li
173.613 293.752 173.487 293.862 173.355 293.967 cv
173.67 294.663 173.855 295.43 173.855 296.243 cv
173.855 299.304 171.373 301.785 168.313 301.785 cv
.262745 .47451 .596078 rgb
f
355.1 181.145 mo
337.847 181.145 li
337.528 179.938 337.236 178.615 336.957 177.175 cv
336.88 176.882 336.807 176.579 336.739 176.267 cv
335.761 176.231 334.708 174.669 334.316 172.578 cv
334.162 171.757 334.133 170.974 334.207 170.3 cv
332.585 166.6 331.813 161.557 336.563 158.67 cv
338.094 154.87 342.025 153.296 346.194 153.296 cv
352.074 153.296 358.426 156.426 359.189 160.86 cv
359.437 163.894 358.939 166.67 358.283 169.021 cv
358.663 169.837 358.771 171.15 358.503 172.578 cv
358.133 174.549 357.175 176.064 356.248 176.262 cv
355.868 178.066 355.496 179.693 355.1 181.145 cv
.101961 .607843 .741176 rgb
f
383.324 276.423 mo
370.097 276.423 li
371.465 252.764 li
371.483 252.457 371.583 252.174 371.736 251.935 cv
371.892 251.116 372.543 250.485 373.344 250.389 cv
373.32 250.305 373.29 250.222 373.288 250.131 cv
373.272 249.602 373.648 249.177 374.135 249.139 cv
374.024 243.913 li
374.015 243.522 374.29 243.204 374.637 243.204 cv
378.131 243.204 li
378.478 243.204 378.753 243.522 378.746 243.913 cv
378.65 249.162 li
379.082 249.251 379.408 249.642 379.396 250.131 cv
379.345 250.368 li
379.441 250.368 li
380.417 250.368 381.233 251.17 381.298 252.178 cv
382.823 275.631 li
382.825 275.631 382.827 275.631 382.829 275.631 cv
383.073 275.631 383.275 275.775 383.291 275.979 cv
383.324 276.423 li
366.681 276.423 mo
361.399 276.423 li
361.399 269.428 li
361.114 271.934 360.837 274.312 360.58 276.423 cv
352.698 276.423 li
352.123 269.562 351.223 259.622 350.529 251.301 cv
342.232 251.301 li
341.539 259.622 340.638 269.562 340.064 276.423 cv
332.182 276.423 li
331.718 272.619 331.191 267.953 330.662 263.204 cv
330.662 276.423 li
325.38 276.423 li
325.38 251.301 li
324.692 251.301 li
323.223 251.301 322.032 250.111 322.032 248.642 cv
322.032 247.173 323.223 245.982 324.692 245.982 cv
326.2 245.982 li
326.2 232.826 li
324.395 231.21 323.362 229.346 323.362 227.361 cv
323.362 208.222 li
323.362 206.682 323.981 205.214 325.102 203.878 cv
325.38 199.223 li
325.404 199.248 li
325.521 196.756 327.258 194.097 329.495 192.943 cv
363.319 192.943 li
365.638 194.138 367.434 196.947 367.434 199.513 cv
366.543 204.551 li
367.338 205.701 367.776 206.936 367.776 208.222 cv
367.776 227.361 li
367.776 229.115 366.97 230.774 365.539 232.251 cv
365.539 245.982 li
367.244 245.982 li
368.713 245.982 369.903 247.173 369.903 248.642 cv
369.903 250.111 368.713 251.301 367.244 251.301 cv
366.681 251.301 li
366.681 276.423 li
328.572 234.55 mo
328.572 238.02 li
328.852 236.949 329.305 236.138 329.916 235.562 cv
330.039 235.346 li
329.525 235.092 329.035 234.827 328.572 234.55 cv
363.167 234.173 mo
362.79 234.419 362.396 234.659 361.98 234.888 cv
362.053 234.989 li
362.474 235.222 362.846 235.528 363.167 235.912 cv
363.167 234.173 li
.0745098 .501961 .666667 rgb
f
331.494 301.958 mo
324.39 301.958 li
321.456 301.958 319.078 299.58 319.078 296.646 cv
319.078 295.484 li
319.078 295.395 319.081 295.306 319.085 295.218 cv
319.168 295.147 319.221 295.039 319.221 294.918 cv
319.221 287.89 li
319.221 287.677 319.057 287.504 318.854 287.504 cv
313.311 287.504 li
313.311 284.2 li
313.311 283.944 313.329 283.691 313.364 283.444 cv
383.281 283.444 li
383.267 283.622 383.245 283.796 383.213 283.965 cv
382.288 283.965 li
382.126 285.406 381.363 286.494 380.355 286.494 cv
379.259 286.494 li
379.259 288.873 li
379.259 291.806 376.881 294.184 373.948 294.184 cv
366.015 294.184 li
364.127 294.184 362.473 293.196 361.531 291.711 cv
360.72 293.607 358.838 294.937 356.645 294.937 cv
355.911 294.937 li
355.93 295.117 355.939 295.299 355.939 295.484 cv
355.939 296.032 li
332.661 296.032 li
332.016 296.032 331.494 296.357 331.494 296.758 cv
331.494 301.958 li
.309804 .498039 .623529 rgb
f
383.281 283.444 mo
313.364 283.444 li
313.731 280.869 315.946 278.888 318.623 278.888 cv
325.38 278.888 li
325.38 276.423 li
330.662 276.423 li
330.662 278.888 li
333.176 278.888 li
332.723 278.767 332.46 278.656 332.46 278.656 cv
332.37 277.953 332.277 277.206 332.182 276.423 cv
340.064 276.423 li
340.008 277.093 339.954 277.734 339.905 278.341 cv
339.363 278.556 338.841 278.722 338.341 278.848 cv
338.338 278.888 li
354.423 278.888 li
354.421 278.848 li
353.921 278.722 353.398 278.556 352.856 278.341 cv
352.807 277.734 352.754 277.093 352.698 276.423 cv
360.58 276.423 li
360.484 277.207 360.391 277.953 360.302 278.656 cv
360.302 278.656 359.788 278.883 358.9 279.042 cv
358.889 279.156 358.878 279.267 358.867 279.381 cv
359.918 279.866 360.786 280.681 361.33 281.698 cv
361.399 281.587 li
361.399 276.423 li
366.681 276.423 li
366.681 278.888 li
369.954 278.888 li
370.097 276.423 li
383.324 276.423 li
383.654 280.776 li
383.669 280.973 383.474 281.152 383.22 281.177 cv
383.184 281.175 li
383.284 282.715 li
383.3 282.963 383.298 283.208 383.281 283.444 cv
.72549 .733333 .74902 rgb
f
363.319 192.943 mo
329.495 192.943 li
329.683 192.846 329.874 192.76 330.067 192.685 cv
338.315 189.509 li
340.012 186.64 li
339.13 185.223 338.441 183.387 337.847 181.145 cv
355.1 181.145 li
354.477 183.427 353.795 185.273 352.931 186.688 cv
354.598 189.509 li
354.584 189.542 li
362.747 192.685 li
362.94 192.76 363.131 192.846 363.319 192.943 cv
f
350.627 301.958 mo
331.494 301.958 li
331.494 296.758 li
331.494 296.357 332.016 296.032 332.661 296.032 cv
355.939 296.032 li
355.939 296.646 li
355.939 299.58 353.561 301.958 350.627 301.958 cv
319.085 295.218 mo
319.09 295.124 319.097 295.03 319.106 294.937 cv
318.623 294.937 li
315.689 294.937 313.311 292.559 313.311 289.625 cv
313.311 287.504 li
318.854 287.504 li
319.057 287.504 319.221 287.677 319.221 287.89 cv
319.221 294.918 li
319.221 295.039 319.168 295.147 319.085 295.218 cv
.262745 .47451 .596078 rgb
f
300.321 181.145 mo
273.731 181.145 li
273.698 180.681 273.636 180.231 273.543 179.803 cv
269.964 163.199 279.007 156.673 284.285 156.673 cv
285.31 156.673 286.193 156.919 286.814 157.385 cv
287.455 156.884 288.384 156.618 289.469 156.618 cv
294.766 156.618 303.739 162.984 300.495 179.515 cv
300.394 180.032 300.337 180.58 300.321 181.145 cv
.101961 .607843 .741176 rgb
f
308.598 276.423 mo
303.352 276.423 li
303.352 251.092 li
295.092 251.092 li
299.474 276.144 li
299.685 276.322 li
299.778 276.423 li
290.368 276.423 li
275.309 251.092 li
272.818 251.092 li
272.818 276.423 li
267.572 276.423 li
267.572 251.092 li
266.888 251.092 li
265.429 251.092 264.246 249.909 264.246 248.45 cv
264.246 246.991 265.429 245.808 266.888 245.808 cv
268.386 245.808 li
268.386 233.081 li
267.374 233.464 266.797 233.763 266.797 233.763 cv
266.797 233.763 266.808 233.741 267.687 232.062 cv
266.329 230.622 265.567 229.011 265.567 227.31 cv
265.567 223.453 li
264.397 221.039 262.856 217.586 262.846 217.565 cv
262.509 216.889 262.925 215.863 263.499 214.789 cv
265.372 211.228 li
265.279 211.193 li
265.567 210.624 li
265.567 208.299 li
265.567 205.745 267.285 203.394 270.166 201.518 cv
271.698 198.485 li
272.287 197.383 273.249 196.281 275.419 195.593 cv
273.699 194.94 272.031 194.043 270.529 192.943 cv
303.274 192.943 li
301.598 194.146 299.729 195.1 297.82 195.745 cv
299.779 196.48 301.097 197.696 302.035 199.407 cv
302.347 200.033 li
306.85 202.066 309.686 205.015 309.686 208.299 cv
309.686 214.814 li
311.072 216.492 311.289 218.506 310.102 219.476 cv
309.686 219.817 li
309.686 227.31 li
309.686 229.053 308.886 230.701 307.464 232.169 cv
307.464 245.808 li
309.157 245.808 li
310.616 245.808 311.799 246.991 311.799 248.45 cv
311.799 249.909 310.616 251.092 309.157 251.092 cv
308.598 251.092 li
308.598 276.423 li
305.108 234.077 mo
304.541 234.448 303.931 234.801 303.277 235.132 cv
304.072 236.487 304.535 238.059 304.535 239.743 cv
304.535 242.074 303.654 244.194 302.217 245.808 cv
305.108 245.808 li
305.108 234.077 li
270.742 240.821 mo
270.742 245.808 li
272.294 245.808 li
271.59 244.447 270.932 242.726 270.742 240.821 cv
270.742 234.452 mo
270.742 238.73 li
270.887 237.422 271.312 236.201 271.949 235.118 cv
271.529 234.905 271.127 234.682 270.742 234.452 cv
.0745098 .501961 .666667 rgb
f
297.639 298.698 mo
274.068 298.698 li
271.843 298.698 269.952 297.282 269.236 295.304 cv
302.468 295.304 li
301.755 297.283 299.864 298.698 297.639 298.698 cv
261.168 295.186 mo
259.496 295.137 256.483 294.176 256.483 292.193 cv
256.494 283.444 li
308.598 283.444 li
308.598 284.088 li
308.598 284.088 309.099 286.03 308.673 287.504 cv
261.433 287.504 li
261.23 287.504 261.065 287.677 261.065 287.89 cv
261.065 294.918 li
261.065 295.022 261.104 295.116 261.168 295.186 cv
.309804 .498039 .623529 rgb
f
308.598 283.444 mo
256.494 283.444 li
256.497 280.644 li
257.454 279.714 258.758 279.139 260.197 279.139 cv
267.572 279.139 li
267.572 276.423 li
272.818 276.423 li
272.818 279.139 li
290.806 279.139 li
290.863 277.601 li
290.862 277.526 290.879 277.432 290.907 277.329 cv
290.368 276.423 li
299.778 276.423 li
303.352 280.288 li
303.352 276.423 li
308.598 276.423 li
308.598 283.444 li
.72549 .733333 .74902 rgb
f
303.274 192.943 mo
270.529 192.943 li
269.414 192.126 268.391 191.198 267.507 190.174 cv
267.976 190.377 268.427 190.47 268.855 190.47 cv
272.048 190.47 274.029 185.276 273.731 181.145 cv
300.321 181.145 li
300.207 185.202 302.232 190.082 305.317 190.082 cv
305.764 190.082 306.234 189.979 306.722 189.757 cv
305.732 190.948 304.56 192.019 303.274 192.943 cv
f
302.468 295.304 mo
269.236 295.304 li
269.222 295.265 269.209 295.227 269.196 295.187 cv
261.297 295.187 li
261.255 295.187 261.212 295.187 261.168 295.186 cv
261.104 295.116 261.065 295.022 261.065 294.918 cv
261.065 287.89 li
261.065 287.677 261.23 287.504 261.433 287.504 cv
308.673 287.504 li
308.495 288.123 308.153 288.659 307.543 288.934 cv
304.535 289.876 li
304.535 291.446 303.849 292.853 302.766 293.825 cv
302.739 294.342 302.636 294.839 302.468 295.304 cv
.262745 .47451 .596078 rgb
f
232.095 181.145 mo
215.122 181.145 li
214.496 179.897 214.016 178.466 213.728 176.863 cv
212.865 176.535 212.006 175.114 211.662 173.282 cv
211.248 171.073 211.737 169.128 212.755 168.937 cv
212.787 168.931 212.82 168.928 212.853 168.928 cv
212.916 168.928 212.979 168.937 213.042 168.946 cv
212.992 168.796 212.972 168.654 212.972 168.533 cv
212.972 168.377 213.038 168.288 213.135 168.288 cv
213.177 168.288 213.226 168.306 213.277 168.342 cv
213.318 168.361 li
213.764 161.847 216.234 156.892 223.739 156.892 cv
231.62 156.892 233.779 161.775 234.169 168.222 cv
234.216 168.192 234.26 168.177 234.3 168.177 cv
234.396 168.177 234.462 168.264 234.462 168.419 cv
234.462 168.57 234.43 168.751 234.348 168.941 cv
234.486 168.937 li
235.504 169.128 235.993 171.073 235.578 173.282 cv
235.258 174.985 234.494 176.337 233.694 176.784 cv
233.355 178.372 232.804 179.842 232.095 181.145 cv
.101961 .607843 .741176 rgb
f
244.612 276.423 mo
239.39 276.423 li
239.39 262.046 li
238.803 267.31 238.22 272.455 237.724 276.423 cv
230.207 276.423 li
229.649 269.643 228.684 259.037 227.952 250.252 cv
219.748 250.252 li
219.016 259.037 218.051 269.643 217.493 276.423 cv
209.976 276.423 li
209.675 274.019 209.343 271.188 208.997 268.151 cv
208.997 276.423 li
203.775 276.423 li
203.775 250.252 li
203.094 250.252 li
201.642 250.252 200.465 249.074 200.465 247.622 cv
200.465 246.17 201.642 244.992 203.094 244.992 cv
204.586 244.992 li
204.586 231.983 li
202.801 230.386 201.779 228.543 201.779 226.58 cv
201.779 207.657 li
201.779 206.336 202.241 205.07 203.085 203.897 cv
203.085 199.045 li
203.085 196.758 204.528 194.275 206.492 192.943 cv
241.259 192.943 li
243.223 194.275 244.667 196.758 244.667 199.045 cv
244.667 204.31 li
245.333 205.366 245.694 206.49 245.694 207.657 cv
245.694 226.58 li
245.694 228.314 244.898 229.955 243.483 231.416 cv
243.483 244.992 li
245.169 244.992 li
246.621 244.992 247.798 246.17 247.798 247.622 cv
247.798 249.074 246.621 250.252 245.169 250.252 cv
244.612 250.252 li
244.612 276.423 li
241.138 233.316 mo
240.641 233.64 240.109 233.95 239.545 234.244 cv
240.219 234.67 240.759 235.296 241.138 236.164 cv
241.138 233.316 li
206.931 233.688 mo
206.931 235.478 li
207.121 235.18 207.332 234.914 207.57 234.689 cv
207.658 234.524 207.747 234.36 207.848 234.201 cv
207.532 234.035 207.225 233.864 206.931 233.688 cv
.0745098 .501961 .666667 rgb
f
232.873 301.197 mo
232.47 301.197 li
232.47 290.428 li
232.47 289.953 231.85 289.567 231.086 289.567 cv
190.518 289.567 li
190.406 289.133 190.347 288.678 190.347 288.21 cv
190.347 283.444 li
245.239 283.444 li
245.239 288.21 li
245.239 291.299 242.664 293.803 239.486 293.803 cv
238.602 293.803 li
238.615 293.952 238.626 294.101 238.626 294.252 cv
238.626 295.604 li
238.626 298.693 236.05 301.197 232.873 301.197 cv
.309804 .498039 .623529 rgb
f
245.239 283.444 mo
190.347 283.444 li
190.347 282.358 li
190.347 279.269 192.923 276.765 196.1 276.765 cv
203.775 276.765 li
203.775 276.423 li
208.997 276.423 li
208.997 276.765 li
210.019 276.765 li
210.005 276.652 209.99 276.538 209.976 276.423 cv
217.493 276.423 li
217.484 276.539 217.474 276.652 217.465 276.765 cv
230.235 276.765 li
230.225 276.652 230.216 276.539 230.207 276.423 cv
237.724 276.423 li
237.71 276.538 237.696 276.652 237.681 276.765 cv
239.39 276.765 li
239.39 276.423 li
244.612 276.423 li
244.612 279.828 li
245.01 280.589 245.239 281.447 245.239 282.358 cv
245.239 283.444 li
.72549 .733333 .74902 rgb
f
241.259 192.943 mo
206.492 192.943 li
206.883 192.677 207.295 192.458 207.72 192.294 cv
215.875 189.154 li
217.701 186.066 li
217.701 184.623 li
216.703 183.703 215.822 182.538 215.122 181.145 cv
232.095 181.145 li
231.51 182.22 230.818 183.182 230.051 184.004 cv
230.051 186.092 li
230.116 186.009 li
231.975 189.154 li
231.961 189.186 li
240.032 192.294 li
240.457 192.458 240.868 192.677 241.259 192.943 cv
f
232.47 301.197 mo
203.045 301.197 li
199.867 301.197 197.292 298.693 197.292 295.604 cv
197.292 294.252 li
197.292 294.101 197.303 293.952 197.315 293.803 cv
196.1 293.803 li
193.404 293.803 191.142 292 190.518 289.567 cv
231.086 289.567 li
231.85 289.567 232.47 289.953 232.47 290.428 cv
232.47 301.197 li
.262745 .47451 .596078 rgb
f
262.411 252.571 mo
260.523 252.571 li
259.747 252.571 li
259.747 287.6 li
260.523 287.6 li
262.411 287.6 li
263.187 287.6 li
263.187 252.571 li
262.411 252.571 li
cp
.607843 .607843 .607843 rgb
f
299.153 252.571 mo
297.265 252.571 li
296.489 252.571 li
296.489 287.6 li
297.265 287.6 li
299.153 287.6 li
299.929 287.6 li
299.929 252.571 li
299.153 252.571 li
cp
f
260.431 253.71 mo
258.329 253.71 li
257.465 253.71 li
257.465 290.498 li
258.329 290.498 li
260.431 290.498 li
261.296 290.498 li
261.296 253.71 li
260.431 253.71 li
cp
.756863 .756863 .756863 rgb
f
301.347 253.71 mo
299.244 253.71 li
298.38 253.71 li
298.38 290.498 li
299.244 290.498 li
301.347 290.498 li
302.211 290.498 li
302.211 253.71 li
301.347 253.71 li
cp
f
300.974 250.829 mo
298.404 250.829 li
298.404 211.643 li
300.974 211.643 li
300.974 250.829 li
cp
f
260.923 250.829 mo
258.353 250.829 li
258.353 211.643 li
260.923 211.643 li
260.923 250.829 li
cp
f
305.702 251.629 mo
305.702 253.22 304.412 254.51 302.821 254.51 cv
256.719 254.51 li
255.128 254.51 253.838 253.22 253.838 251.629 cv
253.838 250.037 255.128 248.747 256.719 248.747 cv
302.821 248.747 li
304.412 248.747 305.702 250.037 305.702 251.629 cv
cp
.34902 .34902 .34902 rgb
f
302.821 248.747 mo
256.719 248.747 li
255.592 248.747 254.626 249.401 254.153 250.344 cv
254.626 251.287 255.592 251.941 256.719 251.941 cv
302.821 251.941 li
303.948 251.941 304.914 251.287 305.387 250.344 cv
304.914 249.401 303.948 248.747 302.821 248.747 cv
cp
.439216 .439216 .439216 rgb
f
303.397 228.572 mo
303.397 235.259 292.625 240.68 279.337 240.68 cv
266.05 240.68 255.278 235.259 255.278 228.572 cv
255.278 207.838 li
255.278 201.151 266.05 195.73 279.337 195.73 cv
292.625 195.73 303.397 201.151 303.397 207.838 cv
303.397 228.572 li
cp
.34902 .34902 .34902 rgb
f
279.337 198.9 mo
288.703 198.9 296.993 200.877 302.097 203.913 cv
298.857 199.154 289.894 195.73 279.337 195.73 cv
268.781 195.73 259.818 199.154 256.578 203.913 cv
261.682 200.877 269.972 198.9 279.337 198.9 cv
cp
.439216 .439216 .439216 rgb
f
302.821 253.547 mo
256.719 253.547 li
255.293 253.547 254.117 252.508 253.886 251.147 cv
253.86 251.305 253.838 251.464 253.838 251.629 cv
253.838 253.22 255.128 254.51 256.719 254.51 cv
302.821 254.51 li
304.412 254.51 305.702 253.22 305.702 251.629 cv
305.702 251.464 305.68 251.305 305.654 251.147 cv
305.423 252.508 304.247 253.547 302.821 253.547 cv
cp
.227451 .266667 .278431 rgb
f
279.337 238.389 mo
268.362 238.389 259.014 234.918 255.465 230.059 cv
256.923 236.044 267.051 240.68 279.337 240.68 cv
291.624 240.68 301.752 236.044 303.21 230.059 cv
299.661 234.918 290.313 238.389 279.337 238.389 cv
cp
f
270.341 201.248 mo
271.555 198.978 270.828 196.079 268.718 194.774 cv
266.608 193.469 263.913 194.251 262.7 196.521 cv
253.023 214.916 li
252.397 216.088 251.943 217.206 252.311 217.943 cv
252.327 217.978 256.13 226.503 256.633 226.861 cv
256.975 227.816 257.881 228.923 259.208 229.872 cv
261.504 231.514 264.176 231.965 265.168 230.99 cv
265.702 230.465 265.834 229.519 265.307 228.583 cv
264.221 228.041 262.925 227.764 261.515 227.352 cv
259.276 216.908 li
270.341 201.248 li
cp
1 .843137 .701961 rgb
f
293.374 176.445 mo
297.636 154.724 282.561 149.094 278.452 152.308 cv
274.285 149.182 259.317 155.132 263.978 176.758 cv
265.096 181.943 262.15 190.118 257.394 188.07 cv
262.792 194.318 272.908 197.369 278.834 193.772 cv
284.825 197.242 294.882 193.977 300.164 187.614 cv
295.447 189.763 292.352 181.652 293.374 176.445 cv
cp
.156863 .14902 .121569 rgb
f
293.374 176.445 mo
297.583 154.991 282.936 149.241 278.616 152.2 cv
278.616 193.884 li
278.834 193.772 li
284.825 197.242 294.882 193.977 300.164 187.614 cv
295.447 189.763 292.352 181.652 293.374 176.445 cv
cp
.0862745 .0784314 .0431373 rgb
f
267.566 211.281 mo
288.15 211.281 li
288.622 209.447 289.232 207.371 290.01 204.939 cv
292.937 195.799 288.47 193.641 282.159 193.242 cv
282.159 177.205 li
274.848 177.205 li
274.848 193.225 li
267.439 193.581 263.488 195.825 265.826 204.436 cv
266.545 207.084 267.119 209.333 267.566 211.281 cv
cp
.996078 .819608 .666667 rgb
f
282.159 193.242 mo
282.159 177.205 li
278.448 177.205 li
278.448 225.251 li
288.195 225.251 li
286.232 220.409 286.304 216.514 290.01 204.939 cv
292.937 195.799 288.47 193.641 282.159 193.242 cv
cp
.968627 .776471 .631373 rgb
f
287.602 195.339 mo
285.483 196.669 284.761 199.553 285.991 201.78 cv
297.812 217.674 li
299.041 219.901 299.881 222.815 302 221.485 cv
304.12 220.154 304.841 217.271 303.612 215.044 cv
293.666 196.962 li
292.436 194.735 289.722 194.009 287.602 195.339 cv
cp
f
294.546 213.649 mo
294.546 213.649 301.203 211.91 301.799 211.695 cv
295.052 198.139 li
293.092 194.565 289.635 192.947 282.584 193.272 cv
278.531 204.493 li
274.275 193.257 li
265.514 192.873 263.103 195.006 261.966 197.134 cv
254.965 210.994 li
261.747 213.581 li
266.302 207.935 li
269.101 218.89 272.458 227.512 270.821 232.169 cv
289.376 231.668 li
287.069 226.602 287.121 216.566 289.899 207.973 cv
294.546 213.649 li
cp
.980392 .988235 .988235 rgb
f
274.848 187.294 mo
276.663 189.143 278.856 190.224 281.216 190.199 cv
281.534 190.195 281.848 190.16 282.159 190.118 cv
282.159 177.205 li
274.848 177.205 li
274.848 187.294 li
cp
.937255 .733333 .592157 rgb
f
289.707 171.151 mo
289.79 180.255 284.894 187.688 278.77 187.753 cv
272.646 187.818 267.614 180.491 267.53 171.388 cv
267.446 162.284 272.343 154.851 278.467 154.786 cv
284.59 154.72 289.623 162.048 289.707 171.151 cv
cp
1 .843137 .701961 rgb
f
278.835 154.809 mo
278.835 187.748 li
284.928 187.63 289.79 180.222 289.707 171.151 cv
289.624 162.233 284.79 155.037 278.835 154.809 cv
cp
.968627 .776471 .631373 rgb
f
265.442 172.305 mo
265.442 172.305 270.282 171.354 272.881 166.931 cv
275.197 169.503 280.907 172.231 288.435 169.752 cv
284.947 169.19 283.118 167.26 283.118 167.26 cv
283.118 167.26 287.317 169.314 290.242 169.283 cv
293.168 169.252 288.986 150.829 278.522 152.32 cv
276.142 151.146 263.106 154.703 265.442 172.305 cv
cp
.156863 .14902 .121569 rgb
f
278.971 152.281 mo
278.971 170.295 li
281.583 170.926 284.794 170.951 288.435 169.752 cv
284.947 169.189 283.118 167.26 283.118 167.26 cv
283.118 167.26 287.317 169.314 290.242 169.283 cv
293.125 169.252 289.102 151.377 278.971 152.281 cv
cp
.0862745 .0784314 .0431373 rgb
f
292.363 211.707 mo
292.363 211.707 300.225 209.501 300.821 209.286 cv
295.052 198.139 li
293.447 195.212 290.838 193.597 286.072 193.287 cv
278.531 210.453 li
270.253 193.272 li
264.714 193.615 262.905 195.376 261.966 197.134 cv
255.734 208.609 li
264.034 211.375 li
265.942 208.481 li
268.741 219.436 271.179 227.554 269.543 232.211 cv
291.279 233.978 li
288.972 228.912 286.886 217.299 289.664 208.705 cv
292.363 211.707 li
cp
.231373 .243137 .309804 rgb
f
292.363 211.707 mo
292.363 211.707 300.225 209.501 300.821 209.286 cv
295.052 198.139 li
293.447 195.212 290.838 193.597 286.072 193.286 cv
278.561 210.383 li
278.561 232.944 li
291.279 233.978 li
288.972 228.912 286.886 217.299 289.664 208.705 cv
292.363 211.707 li
cp
.2 .215686 .278431 rgb
f
297.779 242.132 mo
297.779 247.634 293.319 252.095 287.817 252.095 cv
264.821 252.095 li
264.821 252.095 260.858 247.634 260.858 242.132 cv
260.858 236.629 265.319 232.169 270.821 232.169 cv
287.817 232.169 li
293.319 232.169 297.779 236.629 297.779 242.132 cv
cp
.196078 .211765 .266667 rgb
f
274.599 242.143 mo
267.478 242.316 265.238 245.933 264.698 249.613 cv
264.538 250.703 265.517 251.315 266.334 252.022 cv
266.714 252.066 267.099 252.095 267.49 252.095 cv
284.486 252.095 li
284.919 252.095 286.637 252.058 287.055 252.004 cv
287.168 251.893 287.093 250.869 286.772 248.919 cv
285.776 242.854 281.316 241.981 274.599 242.143 cv
cp
.0666667 .0784314 .109804 rgb
f
282.868 283.422 mo
282.859 282.861 283.608 281.435 284.874 281.096 cv
286.141 280.758 287.412 281.134 287.778 282.111 cv
291.293 291.491 li
291.898 293.107 291.091 296.569 288.361 297.592 cv
285.751 298.57 282.487 296.256 282.461 294.485 cv
282.868 283.422 li
cp
.235294 .333333 .4 rgb
f
283.728 284.491 mo
284.579 286.131 285.174 287.425 286.452 286.474 cv
287.729 285.522 288.031 284.205 287.365 282.428 cv
275.4 249.085 li
273.299 243.478 271.118 242.285 268.787 243.637 cv
266.96 244.701 262.842 248.705 265.527 253.877 cv
283.728 284.491 li
cp
.996078 .819608 .666667 rgb
f
283.323 283.135 mo
283.32 282.697 284.135 282.144 285.145 281.872 cv
286.154 281.6 287.085 281.682 287.235 282.081 cv
289.974 289.391 li
290.446 290.651 288.883 292.89 287.01 293.592 cv
285.333 294.22 282.945 293.167 282.935 291.784 cv
283.323 283.135 li
cp
f
292.489 282.027 mo
292.13 281.596 290.633 281.002 289.452 281.57 cv
288.27 282.139 287.551 283.252 287.91 284.231 cv
291.354 293.638 li
291.948 295.259 294.815 297.359 297.553 296.357 cv
300.17 295.398 301.139 291.517 300.005 290.156 cv
292.489 282.027 li
cp
.235294 .333333 .4 rgb
f
292.533 283.399 mo
292.956 285.197 293.347 286.567 291.758 286.677 cv
290.169 286.788 289.083 285.985 288.43 284.203 cv
275.785 251.112 li
273.726 245.489 274.603 243.163 277.253 242.67 cv
279.332 242.287 285.065 242.642 286.397 248.315 cv
292.533 283.399 li
cp
.968627 .776471 .631373 rgb
f
291.957 282.107 mo
291.674 281.772 290.695 281.884 289.752 282.335 cv
288.809 282.786 288.156 283.455 288.303 283.855 cv
290.987 291.186 li
291.449 292.449 294.093 293.129 295.972 292.442 cv
297.654 291.826 298.779 289.471 297.886 288.415 cv
291.957 282.107 li
cp
f
277.313 234.061 mo
274.547 233.176 263.813 229.302 257.837 233.286 cv
256.62 235.61 256.62 235.61 256.62 235.61 cv
256.62 235.61 265.915 230.741 276.539 234.503 cv
278.973 234.503 278.973 234.503 278.973 234.503 cv
278.973 234.503 289.929 231.626 296.347 235.499 cv
295.24 233.176 295.019 232.844 295.019 232.844 cv
295.019 232.844 289.375 231.073 277.313 234.061 cv
cp
.980392 .988235 .988235 rgb
f
303.047 214.529 mo
301.21 212.631 300.107 213.652 298.714 214.791 cv
287.376 228.083 li
286.799 228.23 286.387 228.417 286.387 228.417 cv
285.06 228.749 283.4 227.753 282.072 230.077 cv
280.744 232.401 280.078 233.426 281.495 233.158 cv
283.58 232.765 287.466 232.318 289.265 232.329 cv
289.509 231.939 289.762 231.602 289.997 231.298 cv
290.45 231.019 290.895 230.625 291.37 230.236 cv
303.851 220.028 li
305.244 218.889 304.884 216.427 303.047 214.529 cv
cp
.968627 .776471 .631373 rgb
f
276.628 233.587 mo
276.628 233.587 264.267 227.1 259.122 226.666 cv
259.19 226.78 259.262 226.89 259.329 227.004 cv
264.591 227.587 276.628 233.905 276.628 233.905 cv
277.032 234.235 li
277.568 234.36 277.577 234.362 277.577 234.362 cv
276.628 233.587 li
cp
.980392 .988235 .988235 rgb
f
141.201 252.571 mo
139.313 252.571 li
138.537 252.571 li
138.537 287.6 li
139.313 287.6 li
141.201 287.6 li
141.977 287.6 li
141.977 252.571 li
141.201 252.571 li
cp
.607843 .607843 .607843 rgb
f
177.943 252.571 mo
176.056 252.571 li
175.279 252.571 li
175.279 287.6 li
176.056 287.6 li
177.943 287.6 li
178.72 287.6 li
178.72 252.571 li
177.943 252.571 li
cp
f
139.222 253.71 mo
137.12 253.71 li
136.255 253.71 li
136.255 290.498 li
137.12 290.498 li
139.222 290.498 li
140.086 290.498 li
140.086 253.71 li
139.222 253.71 li
cp
.756863 .756863 .756863 rgb
f
180.137 253.71 mo
178.035 253.71 li
177.171 253.71 li
177.171 290.498 li
178.035 290.498 li
180.137 290.498 li
181.002 290.498 li
181.002 253.71 li
180.137 253.71 li
cp
f
179.764 250.829 mo
177.195 250.829 li
177.195 211.643 li
179.764 211.643 li
179.764 250.829 li
cp
f
139.713 250.829 mo
137.144 250.829 li
137.144 211.643 li
139.713 211.643 li
139.713 250.829 li
cp
f
184.493 251.629 mo
184.493 253.22 183.203 254.51 181.611 254.51 cv
135.51 254.51 li
133.918 254.51 132.628 253.22 132.628 251.629 cv
132.628 250.037 133.918 248.747 135.51 248.747 cv
181.611 248.747 li
183.203 248.747 184.493 250.037 184.493 251.629 cv
cp
.34902 .34902 .34902 rgb
f
181.611 248.747 mo
135.51 248.747 li
134.382 248.747 133.417 249.401 132.943 250.344 cv
133.417 251.287 134.382 251.941 135.51 251.941 cv
181.611 251.941 li
182.738 251.941 183.704 251.287 184.178 250.344 cv
183.704 249.401 182.738 248.747 181.611 248.747 cv
cp
.439216 .439216 .439216 rgb
f
182.187 228.572 mo
182.187 235.259 171.416 240.68 158.128 240.68 cv
144.84 240.68 134.069 235.259 134.069 228.572 cv
134.069 207.838 li
134.069 201.151 144.84 195.73 158.128 195.73 cv
171.416 195.73 182.187 201.151 182.187 207.838 cv
182.187 228.572 li
cp
.34902 .34902 .34902 rgb
f
158.128 198.9 mo
167.494 198.9 175.783 200.877 180.888 203.913 cv
177.647 199.154 168.685 195.73 158.128 195.73 cv
147.571 195.73 138.609 199.154 135.368 203.913 cv
140.473 200.877 148.762 198.9 158.128 198.9 cv
cp
.439216 .439216 .439216 rgb
f
181.611 253.547 mo
135.51 253.547 li
134.083 253.547 132.907 252.508 132.677 251.147 cv
132.65 251.305 132.628 251.464 132.628 251.629 cv
132.628 253.22 133.918 254.51 135.51 254.51 cv
181.611 254.51 li
183.203 254.51 184.493 253.22 184.493 251.629 cv
184.493 251.464 184.471 251.305 184.444 251.147 cv
184.214 252.508 183.038 253.547 181.611 253.547 cv
cp
.227451 .266667 .278431 rgb
f
158.128 238.389 mo
147.153 238.389 137.804 234.918 134.256 230.059 cv
135.713 236.044 145.841 240.68 158.128 240.68 cv
170.415 240.68 180.543 236.044 182 230.059 cv
178.452 234.918 169.104 238.389 158.128 238.389 cv
cp
f
175.831 244.952 mo
175.831 252.012 171.371 257.735 165.868 257.735 cv
148.873 257.735 li
143.37 257.735 138.91 252.012 138.91 244.952 cv
138.91 237.892 143.37 232.169 148.873 232.169 cv
165.868 232.169 li
171.371 232.169 175.831 237.892 175.831 244.952 cv
cp
.196078 .211765 .266667 rgb
f
157.421 249.037 mo
151.352 249.037 146.433 248.295 146.433 251.888 cv
146.433 252.989 146.899 253.879 147.716 254.586 cv
148.096 254.63 148.481 254.658 148.873 254.658 cv
165.868 254.658 li
166.302 254.658 166.725 254.621 167.144 254.568 cv
167.948 253.864 168.409 252.98 168.409 251.888 cv
168.409 248.295 163.489 249.037 157.421 249.037 cv
cp
.0666667 .0784314 .109804 rgb
f
152.248 285.285 mo
152.438 284.757 153.639 283.684 154.944 283.812 cv
156.249 283.939 157.307 284.737 157.307 285.78 cv
157.307 295.797 li
157.307 297.523 155.336 300.482 152.42 300.482 cv
149.633 300.482 147.389 297.17 147.986 295.502 cv
152.248 285.285 li
cp
.235294 .333333 .4 rgb
f
152.776 285.177 mo
152.926 284.765 153.884 284.533 154.924 284.633 cv
155.965 284.732 156.808 285.136 156.808 285.562 cv
156.808 293.368 li
156.808 294.713 154.56 296.262 152.559 296.262 cv
150.768 296.262 148.902 294.438 149.377 293.139 cv
152.776 285.177 li
cp
.996078 .819608 .666667 rgb
f
162.683 285.285 mo
162.493 284.757 161.292 283.684 159.987 283.812 cv
158.682 283.939 157.624 284.737 157.624 285.78 cv
157.624 295.797 li
157.624 297.523 159.595 300.482 162.511 300.482 cv
165.298 300.482 167.542 297.17 166.945 295.502 cv
162.683 285.285 li
cp
.235294 .333333 .4 rgb
f
162.155 285.177 mo
162.005 284.765 161.047 284.533 160.007 284.633 cv
158.966 284.732 158.123 285.136 158.123 285.562 cv
158.123 293.368 li
158.123 294.713 160.371 296.262 162.372 296.262 cv
164.163 296.262 166.029 294.438 165.554 293.139 cv
162.155 285.177 li
cp
.996078 .819608 .666667 rgb
f
162.478 198.515 mo
152.23 198.515 li
152.23 176.252 li
162.478 176.252 li
162.478 198.515 li
cp
f
169.881 194.505 mo
161.867 191.418 li
159.375 190.459 155.333 190.459 152.84 191.418 cv
144.579 194.6 li
144.579 210.132 li
145.572 211.171 li
167.679 211.265 li
169.881 209.278 li
169.881 194.505 li
cp
f
157.35 176.252 mo
157.35 198.515 li
162.478 198.515 li
162.478 176.252 li
157.35 176.252 li
cp
.94902 .752941 .619608 rgb
f
171.631 195.178 mo
161.867 191.418 li
160.62 190.938 158.985 190.698 157.35 190.699 cv
157.35 213.419 li
159.801 212.169 166.586 208.43 171.631 205.633 cv
171.631 195.178 li
cp
.968627 .776471 .631373 rgb
f
162.478 176.252 mo
152.23 178.788 li
152.23 188.708 li
155.893 192.393 161.169 191.989 162.478 191.666 cv
162.478 176.252 li
cp
.937255 .733333 .592157 rgb
f
172.939 195.565 mo
164.833 192.444 li
157.329 199.386 li
149.738 192.496 li
141.769 195.565 li
139.043 196.136 128.666 217.72 128.636 217.892 cv
127.666 221.421 134.232 218.668 136.432 218.382 cv
142.949 210.391 li
142.949 210.391 141.034 229.143 141.228 235.743 cv
141.229 235.767 158.892 229.244 174.13 236.561 cv
174.13 233.563 171.136 209.993 171.136 209.993 cv
177.872 218.472 li
185.249 218.101 li
184.747 217.165 176.793 197.386 172.939 195.565 cv
cp
.933333 .32549 .388235 rgb
f
165.956 230.887 mo
147.831 230.887 li
146.876 206.809 li
166.911 206.809 li
165.956 230.887 li
cp
.956863 .956863 .956863 rgb
f
168.206 209.63 mo
167.869 206.943 166.911 206.809 166.911 206.809 cv
146.876 206.809 li
146.876 206.809 145.907 206.844 145.576 209.63 cv
168.206 209.63 li
cp
1 1 1 rgb
f
150.278 207.545 mo
150.383 207.194 150.507 207.051 150.564 207.001 cv
163.196 207.001 li
163.259 207.056 163.385 207.203 163.494 207.545 cv
150.278 207.545 li
cp
.337255 .407843 .494118 rgb
f
153.997 216.772 mo
151.768 216.921 147.27 216.753 147.27 216.753 cv
147.205 215.108 li
145.645 215.108 145.401 216.111 145.025 217.349 cv
145 217.467 li
141.898 217.866 li
143.946 222.287 li
146.132 221.894 li
147.101 222.38 150.886 222.727 152.885 221.97 cv
154.792 221.248 156.448 218.258 156.597 217.441 cv
156.745 216.624 156.225 216.624 153.997 216.772 cv
cp
.968627 .776471 .631373 rgb
f
145.062 222.438 mo
145.062 222.438 142.676 220.339 144.271 217.312 cv
140.451 217.339 133.339 217.275 129.522 217.361 cv
126.846 217.421 129.175 225.503 134.015 224.772 cv
135.833 224.498 143.494 222.871 145.062 222.438 cv
cp
.933333 .32549 .388235 rgb
f
159.791 216.772 mo
162.02 216.921 166.517 216.753 166.517 216.753 cv
166.583 215.108 li
168.143 215.108 168.387 216.111 168.763 217.349 cv
168.788 217.467 li
171.89 217.866 li
169.842 222.287 li
167.656 221.894 li
166.687 222.38 162.902 222.727 160.903 221.97 cv
158.996 221.248 157.34 218.258 157.191 217.441 cv
157.043 216.624 157.563 216.624 159.791 216.772 cv
cp
.968627 .776471 .631373 rgb
f
168.726 222.438 mo
168.726 222.438 171.112 220.339 169.517 217.312 cv
173.337 217.339 180.449 217.275 184.265 217.361 cv
186.942 217.421 184.613 225.503 179.773 224.772 cv
177.955 224.498 170.294 222.871 168.726 222.438 cv
cp
.933333 .32549 .388235 rgb
f
69.493 252.571 mo
67.6052 252.571 li
66.8289 252.571 li
66.8289 287.6 li
67.6052 287.6 li
69.493 287.6 li
70.2692 287.6 li
70.2692 252.571 li
69.493 252.571 li
cp
.607843 .607843 .607843 rgb
f
106.235 252.571 mo
104.347 252.571 li
103.571 252.571 li
103.571 287.6 li
104.347 287.6 li
106.235 287.6 li
107.011 287.6 li
107.011 252.571 li
106.235 252.571 li
cp
f
67.5137 253.71 mo
65.4114 253.71 li
64.547 253.71 li
64.547 290.498 li
65.4114 290.498 li
67.5137 290.498 li
68.3781 290.498 li
68.3781 253.71 li
67.5137 253.71 li
cp
.756863 .756863 .756863 rgb
f
108.429 253.71 mo
106.327 253.71 li
105.462 253.71 li
105.462 290.498 li
106.327 290.498 li
108.429 290.498 li
109.293 290.498 li
109.293 253.71 li
108.429 253.71 li
cp
f
108.056 250.829 mo
105.486 250.829 li
105.486 211.643 li
108.056 211.643 li
108.056 250.829 li
cp
f
68.005 250.829 mo
65.4354 250.829 li
65.4354 211.643 li
68.005 211.643 li
68.005 250.829 li
cp
f
112.784 251.629 mo
112.784 253.22 111.494 254.51 109.903 254.51 cv
63.8014 254.51 li
62.21 254.51 60.92 253.22 60.92 251.629 cv
60.92 250.037 62.21 248.747 63.8014 248.747 cv
109.903 248.747 li
111.494 248.747 112.784 250.037 112.784 251.629 cv
cp
.34902 .34902 .34902 rgb
f
109.903 248.747 mo
63.8014 248.747 li
62.6742 248.747 61.7085 249.401 61.2351 250.344 cv
61.7085 251.287 62.6742 251.941 63.8014 251.941 cv
109.903 251.941 li
111.03 251.941 111.996 251.287 112.469 250.344 cv
111.996 249.401 111.03 248.747 109.903 248.747 cv
cp
.439216 .439216 .439216 rgb
f
110.479 228.572 mo
110.479 235.259 99.7074 240.68 86.4198 240.68 cv
73.1322 240.68 62.3605 235.259 62.3605 228.572 cv
62.3605 207.838 li
62.3605 201.151 73.1322 195.73 86.4198 195.73 cv
99.7074 195.73 110.479 201.151 110.479 207.838 cv
110.479 228.572 li
cp
.34902 .34902 .34902 rgb
f
86.4198 198.9 mo
95.7854 198.9 104.075 200.877 109.18 203.913 cv
105.939 199.154 96.9768 195.73 86.4198 195.73 cv
75.8629 195.73 66.9005 199.154 63.6601 203.913 cv
68.7646 200.877 77.0542 198.9 86.4198 198.9 cv
cp
.439216 .439216 .439216 rgb
f
109.903 253.547 mo
63.8014 253.547 li
62.375 253.547 61.1988 252.508 60.9686 251.147 cv
60.9419 251.305 60.92 251.464 60.92 251.629 cv
60.92 253.22 62.21 254.51 63.8014 254.51 cv
109.903 254.51 li
111.494 254.51 112.784 253.22 112.784 251.629 cv
112.784 251.464 112.762 251.305 112.736 251.147 cv
112.506 252.508 111.329 253.547 109.903 253.547 cv
cp
.227451 .266667 .278431 rgb
f
86.4198 238.389 mo
75.4443 238.389 66.0958 234.918 62.5475 230.059 cv
64.0049 236.044 74.1332 240.68 86.4198 240.68 cv
98.7064 240.68 108.835 236.044 110.292 230.059 cv
106.744 234.918 97.3954 238.389 86.4198 238.389 cv
cp
f
104.123 242.132 mo
104.123 247.634 99.6624 252.095 94.16 252.095 cv
77.1646 252.095 li
71.6622 252.095 67.2017 247.634 67.2017 242.132 cv
67.2017 236.629 71.6622 232.169 77.1646 232.169 cv
94.16 232.169 li
99.6624 232.169 104.123 236.629 104.123 242.132 cv
cp
.196078 .211765 .266667 rgb
f
85.7126 242.352 mo
79.6441 242.352 74.7246 245.732 74.7246 249.324 cv
74.7246 250.426 75.1912 251.315 76.008 252.022 cv
76.388 252.066 76.7727 252.095 77.1646 252.095 cv
94.16 252.095 li
94.5933 252.095 95.0172 252.058 95.436 252.004 cv
96.2402 251.3 96.7006 250.417 96.7006 249.324 cv
96.7006 245.732 91.7811 242.352 85.7126 242.352 cv
cp
.156863 .14902 .121569 rgb
f
80.5401 285.285 mo
80.7293 284.757 81.9304 283.684 83.2354 283.812 cv
84.5404 283.939 85.5983 284.737 85.5983 285.78 cv
85.5983 295.797 li
85.5983 297.523 83.6278 300.482 80.7121 300.482 cv
77.9251 300.482 75.6808 297.17 76.2775 295.502 cv
80.5401 285.285 li
cp
.235294 .333333 .4 rgb
f
80.9705 286.588 mo
81.1922 288.422 81.2959 289.843 82.8257 289.4 cv
84.3556 288.958 85.1 287.83 85.1 285.932 cv
85.5957 250.511 li
85.5957 244.524 83.9722 242.641 81.3148 243.089 cv
79.2305 243.445 73.9695 245.749 74.669 251.534 cv
80.9705 286.588 li
cp
.678431 .364706 .294118 rgb
f
81.0674 285.177 mo
81.2182 284.765 82.1758 284.533 83.2162 284.633 cv
84.2566 284.732 85.1 285.136 85.1 285.562 cv
85.1 293.368 li
85.1 294.713 82.8515 296.262 80.8511 296.262 cv
79.0597 296.262 77.1934 294.438 77.6691 293.139 cv
81.0674 285.177 li
cp
f
90.9744 285.285 mo
90.7853 284.757 89.5841 283.684 88.2791 283.812 cv
86.9741 283.939 85.9162 284.737 85.9162 285.78 cv
85.9162 295.797 li
85.9162 297.523 87.8868 300.482 90.8024 300.482 cv
93.5894 300.482 95.8337 297.17 95.2371 295.502 cv
90.9744 285.285 li
cp
.235294 .333333 .4 rgb
f
90.544 286.588 mo
90.3223 288.422 90.2186 289.843 88.6888 289.4 cv
87.159 288.958 86.4145 287.83 86.4145 285.932 cv
85.9188 250.511 li
85.9188 244.524 87.5424 242.641 90.1997 243.089 cv
92.2841 243.445 97.545 245.749 96.8456 251.534 cv
90.544 286.588 li
cp
.635294 .341176 .258824 rgb
f
90.4471 285.177 mo
90.2963 284.765 89.3387 284.533 88.2983 284.633 cv
87.2579 284.732 86.4145 285.136 86.4145 285.562 cv
86.4145 293.368 li
86.4145 294.713 88.663 296.262 90.6635 296.262 cv
92.4549 296.262 94.3211 294.438 93.8455 293.139 cv
90.4471 285.177 li
cp
f
82.3171 237.97 mo
81.8602 237.655 81.3677 237.241 80.8369 236.804 cv
80.7259 236.339 80.5314 235.864 80.2033 235.524 cv
79.6187 234.919 77.5541 234.241 76.1104 233.99 cv
67.104 221.836 li
74.8204 204.547 li
75.1037 202.337 74.1157 201.529 72.3324 201.405 cv
70.9223 201.308 65.0233 204.703 64.7598 206.892 cv
62.0645 222.952 li
61.9583 224.274 61.8436 225.414 62.3764 225.958 cv
62.4094 226.051 li
72.3057 236.251 li
72.4839 237.584 72.9513 238.438 75.5256 239.367 cv
78.1955 240.331 80.4243 241.495 82.5826 241.314 cv
84.741 241.132 84.0038 239.131 82.3171 237.97 cv
cp
.678431 .364706 .294118 rgb
f
89.848 237.97 mo
90.3049 237.655 90.7974 237.241 91.3282 236.804 cv
91.4392 236.339 91.6338 235.864 91.9618 235.524 cv
92.5464 234.919 94.611 234.241 96.0547 233.99 cv
105.061 221.836 li
97.3448 204.547 li
97.0614 202.337 98.0494 201.529 99.8327 201.405 cv
101.243 201.308 107.142 204.703 107.405 206.892 cv
110.101 222.952 li
110.207 224.274 110.322 225.414 109.789 225.958 cv
109.756 226.051 li
99.8594 236.251 li
99.6813 237.584 99.2139 238.438 96.6395 239.367 cv
93.9696 240.331 91.7408 241.495 89.5825 241.314 cv
87.4242 241.132 88.1613 239.131 89.848 237.97 cv
cp
f
107.286 163.638 mo
107.286 161.72 105.731 160.165 103.813 160.165 cv
103.706 160.165 103.6 160.17 103.495 160.18 cv
104.007 159.726 104.332 159.066 104.332 158.328 cv
104.332 156.961 103.224 155.853 101.857 155.853 cv
101.835 155.854 li
102.153 155.33 102.336 154.714 102.336 154.056 cv
102.336 152.138 100.781 150.583 98.8624 150.583 cv
97.9892 150.583 97.1919 150.906 96.5816 151.438 cv
96.5272 150.119 95.4439 149.066 94.1117 149.066 cv
93.9701 149.066 93.8323 149.081 93.6973 149.104 cv
93.1589 147.883 91.9387 147.03 90.5187 147.03 cv
89.6055 147.03 88.775 147.383 88.1551 147.959 cv
87.6519 147.049 86.6825 146.431 85.5683 146.431 cv
84.4758 146.431 83.5242 147.026 83.013 147.908 cv
82.3862 147.291 81.5268 146.91 80.5781 146.91 cv
79.0794 146.91 77.8024 147.86 77.3155 149.19 cv
77.0731 149.11 76.8148 149.066 76.546 149.066 cv
75.2138 149.066 74.1304 150.119 74.076 151.438 cv
73.4658 150.906 72.6685 150.583 71.7952 150.583 cv
69.877 150.583 68.322 152.138 68.322 154.056 cv
68.322 154.714 68.5051 155.33 68.8229 155.854 cv
68.8011 155.853 li
67.4341 155.853 66.3259 156.961 66.3259 158.328 cv
66.3259 159.066 66.6504 159.726 67.1623 160.18 cv
67.0577 160.17 66.952 160.165 66.8449 160.165 cv
64.9267 160.165 63.3717 161.72 63.3717 163.638 cv
63.3717 165.118 64.2984 166.382 65.603 166.881 cv
64.9325 167.324 64.4895 168.084 64.4895 168.947 cv
64.4895 169.947 65.0836 170.806 65.937 171.197 cv
65.0607 171.828 64.4895 172.855 64.4895 174.017 cv
64.4895 175.936 66.0445 177.491 67.9627 177.491 cv
68.0067 177.49 li
67.9025 177.763 67.843 178.059 67.843 178.369 cv
67.843 179.736 68.9511 180.844 70.3181 180.844 cv
70.4234 180.844 70.5265 180.835 70.6283 180.823 cv
70.582 181.049 70.5577 181.283 70.5577 181.523 cv
70.5577 183.441 72.1127 184.996 74.0309 184.996 cv
74.5959 184.996 75.1289 184.86 75.6004 184.621 cv
75.8905 185.666 76.8461 186.433 77.9832 186.433 cv
78.8037 186.433 79.5289 186.032 79.9793 185.417 cv
80.4296 186.032 81.1548 186.433 81.9754 186.433 cv
82.5298 186.433 83.0399 186.249 83.4525 185.941 cv
83.8651 186.249 84.3752 186.433 84.9296 186.433 cv
85.7262 186.433 86.433 186.055 86.8858 185.471 cv
87.3385 186.055 88.0453 186.433 88.842 186.433 cv
89.6147 186.433 90.3043 186.079 90.7582 185.524 cv
91.2121 186.079 91.9018 186.433 92.6745 186.433 cv
93.8115 186.433 94.7671 185.666 95.0572 184.621 cv
95.5287 184.86 96.0617 184.996 96.6268 184.996 cv
98.545 184.996 100.1 183.441 100.1 181.523 cv
100.1 181.283 100.076 181.049 100.029 180.823 cv
100.131 180.835 100.234 180.844 100.34 180.844 cv
101.706 180.844 102.815 179.736 102.815 178.369 cv
102.815 178.059 102.755 177.763 102.651 177.49 cv
102.695 177.491 li
104.613 177.491 106.168 175.936 106.168 174.017 cv
106.168 172.855 105.597 171.828 104.721 171.197 cv
105.574 170.806 106.168 169.947 106.168 168.947 cv
106.168 168.084 105.725 167.324 105.055 166.881 cv
106.359 166.382 107.286 165.118 107.286 163.638 cv
cp
.301961 .00392157 0 rgb
f
107.286 163.638 mo
107.286 161.72 105.731 160.165 103.813 160.165 cv
103.706 160.165 103.6 160.17 103.495 160.18 cv
104.007 159.726 104.332 159.066 104.332 158.328 cv
104.332 156.961 103.224 155.853 101.857 155.853 cv
101.835 155.854 li
102.153 155.33 102.336 154.714 102.336 154.056 cv
102.336 152.138 100.781 150.583 98.8624 150.583 cv
97.9892 150.583 97.1919 150.906 96.5816 151.438 cv
96.5272 150.119 95.4439 149.066 94.1117 149.066 cv
93.9701 149.066 93.8323 149.081 93.6973 149.104 cv
93.1589 147.883 91.9387 147.03 90.5187 147.03 cv
89.6055 147.03 88.775 147.383 88.1551 147.959 cv
87.6519 147.049 86.6825 146.431 85.5683 146.431 cv
85.4827 146.434 li
85.4827 186.37 li
86.0491 186.239 86.5412 185.916 86.8858 185.471 cv
87.3385 186.055 88.0453 186.433 88.842 186.433 cv
89.6147 186.433 90.3043 186.079 90.7582 185.524 cv
91.2121 186.079 91.9018 186.433 92.6745 186.433 cv
93.8115 186.433 94.7671 185.666 95.0572 184.621 cv
95.5287 184.86 96.0617 184.996 96.6268 184.996 cv
98.545 184.996 100.1 183.441 100.1 181.523 cv
100.1 181.283 100.076 181.049 100.029 180.823 cv
100.131 180.835 100.234 180.844 100.34 180.844 cv
101.706 180.844 102.815 179.736 102.815 178.369 cv
102.815 178.059 102.755 177.763 102.651 177.49 cv
102.695 177.491 li
104.613 177.491 106.168 175.936 106.168 174.017 cv
106.168 172.855 105.597 171.828 104.721 171.197 cv
105.574 170.806 106.168 169.947 106.168 168.947 cv
106.168 168.084 105.725 167.324 105.055 166.881 cv
106.359 166.382 107.286 165.118 107.286 163.638 cv
cp
.239216 0 0 rgb
f
90.7207 198.314 mo
80.5706 198.314 li
80.5706 176.263 li
90.7207 176.263 li
90.7207 198.314 li
cp
.678431 .364706 .294118 rgb
f
105.701 207.982 mo
105.701 202.077 li
105.701 199.431 103.704 196.526 101.241 195.587 cv
90.1543 191.361 li
87.6912 190.422 83.6978 190.442 81.2348 191.405 cv
70.1479 195.738 li
67.6849 196.701 65.6881 199.627 65.6881 202.272 cv
65.6881 208.177 li
85.7112 211.203 li
105.701 207.982 li
cp
f
85.6423 176.263 mo
85.6423 198.314 li
90.7207 198.314 li
90.7207 176.263 li
85.6423 176.263 li
cp
.635294 .341176 .258824 rgb
f
101.23 195.758 mo
90.1163 191.34 li
88.8809 190.849 87.2615 190.592 85.6423 190.572 cv
85.6423 211.58 li
105.701 208.23 li
105.701 202.325 li
105.701 199.679 103.699 196.739 101.23 195.758 cv
cp
f
90.7207 176.263 mo
80.5706 176.263 li
80.5706 186.088 li
84.1987 190.636 89.4249 191.53 90.7207 191.53 cv
90.7207 176.263 li
cp
.6 .301961 .235294 rgb
f
96.4957 168.563 mo
96.4957 184.314 89.6707 187.464 85.6457 187.464 cv
81.6206 187.464 74.7956 184.314 74.7956 168.563 cv
74.7956 160.638 79.6533 155.788 85.6457 155.788 cv
91.638 155.788 96.4957 160.638 96.4957 168.563 cv
cp
.678431 .364706 .294118 rgb
f
85.6457 155.788 mo
85.6423 155.788 li
85.6423 187.464 li
85.6457 187.464 li
89.6707 187.464 96.4957 184.314 96.4957 168.563 cv
96.4957 160.638 91.638 155.788 85.6457 155.788 cv
cp
.635294 .341176 .258824 rgb
f
105.701 205.341 mo
105.701 202.077 li
105.701 201.084 105.419 200.052 104.935 199.101 cv
104.132 200.683 102.772 202.043 101.23 202.636 cv
90.1163 206.916 li
87.6471 207.867 83.6441 207.867 81.175 206.916 cv
70.0611 202.636 li
68.5192 202.043 67.1597 200.683 66.356 199.101 cv
65.8728 200.052 65.5905 201.084 65.5905 202.077 cv
65.5905 205.341 li
86.1018 212.166 li
105.701 205.341 li
cp
1 1 1 rgb
f
99.8801 169.113 mo
100.014 168.9 100.117 168.663 100.18 168.405 cv
100.426 167.395 99.9978 166.381 99.1857 165.83 cv
99.2738 165.638 99.3461 165.437 99.3979 165.224 cv
99.4532 164.997 99.4833 164.77 99.4909 164.546 cv
99.4909 164.546 97.9852 153.668 91.2178 152.018 cv
75.6957 148.235 76.233 158.877 76.233 158.877 cv
76.1989 158.976 76.1674 159.078 76.142 159.182 cv
76.0602 159.518 76.0318 159.854 76.0475 160.182 cv
75.0632 160.289 74.2051 160.995 73.9571 162.013 cv
73.8941 162.271 73.8769 162.529 73.8971 162.78 cv
72.9223 162.896 72.0755 163.599 71.8294 164.609 cv
71.5129 165.908 72.3092 167.217 73.608 167.534 cv
74.9069 167.85 76.2165 167.054 76.5331 165.755 cv
76.596 165.497 76.6133 165.239 76.5931 164.988 cv
77.4933 164.881 78.2839 164.273 78.5934 163.385 cv
78.721 163.423 li
79.8121 163.689 80.9066 163.411 81.7251 162.766 cv
82.0475 163.168 82.498 163.472 83.0373 163.603 cv
83.6939 163.763 84.3528 163.638 84.8852 163.308 cv
85.3118 164.135 86.0781 164.781 87.0527 165.018 cv
88.0588 165.263 89.0694 165.023 89.8382 164.447 cv
90.1534 165.023 90.6981 165.471 91.3863 165.638 cv
91.951 165.776 92.5175 165.703 93.0038 165.47 cv
93.3507 166.527 94.2158 167.387 95.3759 167.67 cv
95.4144 167.677 li
95.3583 168.54 95.771 169.358 96.4707 169.833 cv
96.3372 170.047 96.2337 170.284 96.1708 170.542 cv
95.8542 171.841 96.6506 173.15 97.9494 173.467 cv
99.2483 173.783 100.558 172.987 100.874 171.688 cv
101.121 170.679 100.692 169.665 99.8801 169.113 cv
cp
.301961 .00392157 0 rgb
f
99.8801 169.113 mo
100.014 168.9 100.117 168.663 100.18 168.405 cv
100.426 167.395 99.9978 166.381 99.1857 165.83 cv
99.2738 165.638 99.3461 165.437 99.3979 165.224 cv
99.4532 164.997 99.4833 164.77 99.4909 164.546 cv
99.4909 164.546 97.9852 153.668 91.2178 152.018 cv
88.9916 151.476 87.0972 151.231 85.4827 151.208 cv
85.4827 164.13 li
85.8998 164.552 86.434 164.867 87.0527 165.018 cv
88.0588 165.263 89.0694 165.023 89.8382 164.447 cv
90.1534 165.023 90.6981 165.471 91.3863 165.638 cv
91.951 165.776 92.5175 165.703 93.0038 165.47 cv
93.3507 166.527 94.2158 167.387 95.376 167.67 cv
95.4144 167.677 li
95.3583 168.54 95.771 169.358 96.4707 169.833 cv
96.3372 170.047 96.2337 170.284 96.1708 170.542 cv
95.8542 171.841 96.6506 173.15 97.9494 173.467 cv
99.2483 173.783 100.558 172.987 100.874 171.688 cv
101.121 170.679 100.692 169.665 99.8801 169.113 cv
cp
.239216 0 0 rgb
f
105.979 201.226 mo
105.714 199.691 103.699 196.516 101.23 195.565 cv
93.1248 192.444 li
85.9353 211.105 li
72.5894 211.105 li
72.5894 211.105 75.1893 229.131 75.1893 232.28 cv
75.1893 234.634 96.1022 234.634 96.1022 232.28 cv
96.1021 229.217 98.3841 212.925 98.672 211.276 cv
108.225 207.771 li
105.979 201.226 li
cp
.886275 .74902 .184314 rgb
f
85.8088 211.433 mo
85.6836 211.129 li
85.6836 211.105 li
85.674 211.105 li
78.03 192.496 li
70.0611 195.565 li
67.5921 196.516 65.5905 199.431 65.5905 202.077 cv
64.3691 207.38 li
72.858 212.67 li
73.5217 216.573 75.1893 229.757 75.1893 232.28 cv
75.1893 233.46 80.4428 234.048 85.6836 234.045 cv
85.6836 211.445 li
85.8088 211.433 li
cp
.960784 .839216 .34902 rgb
f
62.6652 267.339 mo
62.6395 266.868 62.3053 266.493 61.9185 266.497 cv
51.2843 266.6 li
50.8975 266.603 50.5562 266.985 50.5216 267.457 cv
50.3098 270.344 li
47.7931 270.369 li
48.2076 264.945 li
48.2552 264.322 48.7278 263.817 49.2635 263.812 cv
63.9923 263.67 li
64.528 263.664 64.9911 264.16 65.0269 264.783 cv
65.3392 270.199 li
62.8226 270.224 li
62.6652 267.339 li
cp
.196078 .211765 .266667 rgb
f
37.6171 292.112 mo
37.6184 293.331 38.608 294.319 39.8274 294.318 cv
73.3569 294.282 li
74.5764 294.28 75.5639 293.291 75.5626 292.071 cv
75.5406 271.523 li
75.5393 270.304 74.5497 269.316 73.3302 269.318 cv
39.8007 269.354 li
38.5813 269.355 37.5938 270.345 37.5951 271.564 cv
37.6171 292.112 li
cp
f
36.6074 281.689 mo
37.4236 271.473 li
37.5174 270.299 38.5813 269.355 39.8007 269.354 cv
73.3302 269.318 li
74.5496 269.316 75.6156 270.258 75.7119 271.432 cv
76.55 281.646 li
36.6074 281.689 li
cp
.231373 .243137 .309804 rgb
f
52.8853 282.92 mo
60.2747 282.912 li
60.2715 279.917 li
52.8821 279.924 li
52.8853 282.92 li
cp
.933333 .713726 .34902 rgb
f
320.22 252.571 mo
318.332 252.571 li
317.556 252.571 li
317.556 287.6 li
318.332 287.6 li
320.22 287.6 li
320.997 287.6 li
320.997 252.571 li
320.22 252.571 li
cp
.607843 .607843 .607843 rgb
f
356.962 252.571 mo
355.075 252.571 li
354.298 252.571 li
354.298 287.6 li
355.075 287.6 li
356.962 287.6 li
357.739 287.6 li
357.739 252.571 li
356.962 252.571 li
cp
f
318.241 253.71 mo
316.139 253.71 li
315.274 253.71 li
315.274 290.498 li
316.139 290.498 li
318.241 290.498 li
319.105 290.498 li
319.105 253.71 li
318.241 253.71 li
cp
.756863 .756863 .756863 rgb
f
359.156 253.71 mo
357.054 253.71 li
356.19 253.71 li
356.19 290.498 li
357.054 290.498 li
359.156 290.498 li
360.021 290.498 li
360.021 253.71 li
359.156 253.71 li
cp
f
358.783 250.829 mo
356.214 250.829 li
356.214 211.643 li
358.783 211.643 li
358.783 250.829 li
cp
f
318.732 250.829 mo
316.163 250.829 li
316.163 211.643 li
318.732 211.643 li
318.732 250.829 li
cp
f
363.512 251.629 mo
363.512 253.22 362.222 254.51 360.63 254.51 cv
314.529 254.51 li
312.937 254.51 311.647 253.22 311.647 251.629 cv
311.647 250.037 312.937 248.747 314.529 248.747 cv
360.63 248.747 li
362.222 248.747 363.512 250.037 363.512 251.629 cv
cp
.34902 .34902 .34902 rgb
f
360.63 248.747 mo
314.529 248.747 li
313.401 248.747 312.436 249.401 311.962 250.344 cv
312.436 251.287 313.401 251.941 314.529 251.941 cv
360.63 251.941 li
361.757 251.941 362.723 251.287 363.197 250.344 cv
362.723 249.401 361.757 248.747 360.63 248.747 cv
cp
.439216 .439216 .439216 rgb
f
361.206 228.572 mo
361.206 235.259 350.435 240.68 337.147 240.68 cv
323.859 240.68 313.088 235.259 313.088 228.572 cv
313.088 207.838 li
313.088 201.151 323.859 195.73 337.147 195.73 cv
350.435 195.73 361.206 201.151 361.206 207.838 cv
361.206 228.572 li
cp
.34902 .34902 .34902 rgb
f
337.147 198.9 mo
346.513 198.9 354.802 200.877 359.907 203.913 cv
356.666 199.154 347.704 195.73 337.147 195.73 cv
326.59 195.73 317.628 199.154 314.387 203.913 cv
319.492 200.877 327.781 198.9 337.147 198.9 cv
cp
.439216 .439216 .439216 rgb
f
360.63 253.547 mo
314.529 253.547 li
313.102 253.547 311.926 252.508 311.696 251.147 cv
311.669 251.305 311.647 251.464 311.647 251.629 cv
311.647 253.22 312.937 254.51 314.529 254.51 cv
360.63 254.51 li
362.222 254.51 363.512 253.22 363.512 251.629 cv
363.512 251.464 363.49 251.305 363.463 251.147 cv
363.233 252.508 362.057 253.547 360.63 253.547 cv
cp
.227451 .266667 .278431 rgb
f
337.147 238.389 mo
326.172 238.389 316.823 234.918 313.275 230.059 cv
314.732 236.044 324.861 240.68 337.147 240.68 cv
349.434 240.68 359.562 236.044 361.019 230.059 cv
357.471 234.918 348.123 238.389 337.147 238.389 cv
cp
f
356.238 240.898 mo
356.238 245.556 351.777 249.332 346.275 249.332 cv
329.279 249.332 li
323.777 249.332 319.316 245.556 319.316 240.898 cv
319.316 236.24 323.777 232.464 329.279 232.464 cv
346.275 232.464 li
351.777 232.464 356.238 236.24 356.238 240.898 cv
cp
.196078 .211765 .266667 rgb
f
352.559 234.003 mo
352.559 208.66 li
323.724 208.66 li
323.724 234.003 li
323.724 234.003 328.336 234.725 338.022 234.725 cv
341.661 234.725 352.559 234.003 352.559 234.003 cv
cp
.956863 .956863 .956863 rgb
f
352.559 234.003 mo
352.559 208.66 li
338.022 208.66 li
338.022 208.66 338.022 230.593 338.022 234.725 cv
347.1 234.725 352.559 234.003 352.559 234.003 cv
cp
.85098 .85098 .85098 rgb
f
358.952 211.222 mo
360.836 198.402 li
360.836 195.397 358.563 192.085 355.758 191.005 cv
343.134 186.143 li
340.329 185.063 335.782 185.063 332.977 186.143 cv
320.353 191.005 li
317.548 192.085 315.275 195.396 315.275 198.402 cv
315.275 211.222 li
358.952 211.222 li
cp
.937255 .686275 .415686 rgb
f
358.62 211.222 mo
360.836 198.402 li
360.836 195.397 358.563 192.085 355.758 191.005 cv
343.134 186.143 li
340.329 185.063 335.782 185.063 332.977 186.143 cv
320.353 191.005 li
317.548 192.085 315.275 195.396 315.275 198.402 cv
315.275 211.222 li
358.62 211.222 li
cp
f
355.758 191.005 mo
343.134 186.143 li
341.73 185.603 339.891 185.333 338.052 185.333 cv
338.052 211.222 li
358.62 211.222 li
360.836 198.402 li
360.836 195.397 358.563 192.085 355.758 191.005 cv
cp
.929412 .658824 .392157 rgb
f
344.821 194.127 mo
331.29 194.127 li
331.29 169.08 li
344.821 169.08 li
344.821 194.127 li
cp
1 .843137 .701961 rgb
f
344.821 194.127 mo
337.922 194.127 li
337.922 169.08 li
344.821 169.08 li
344.821 194.127 li
cp
.968627 .776471 .631373 rgb
f
344.821 169.08 mo
331.29 169.08 li
331.29 181.958 li
336.692 187.919 343.094 186.421 344.821 186.421 cv
344.821 169.08 li
cp
.886275 .603922 .34902 rgb
f
349.265 165.595 mo
349.265 180.89 342.214 183.949 338.055 183.949 cv
333.897 183.949 326.846 180.89 326.846 165.595 cv
326.846 157.898 331.865 153.188 338.055 153.188 cv
344.246 153.188 349.265 157.898 349.265 165.595 cv
cp
1 .843137 .701961 rgb
f
338.055 153.188 mo
338.052 153.188 li
338.052 183.949 li
338.055 183.949 li
342.214 183.949 349.265 180.89 349.265 165.595 cv
349.265 157.898 344.246 153.188 338.055 153.188 cv
cp
.968627 .776471 .631373 rgb
f
325.109 207.992 mo
325.109 207.311 324.52 206.294 323.731 205.672 cv
315.275 204.393 li
315.275 211.222 li
325.109 211.222 li
325.109 207.992 li
cp
.937255 .686275 .415686 rgb
f
328.995 168.462 mo
329.449 170.882 328.913 173.014 327.798 173.223 cv
326.682 173.432 325.41 171.64 324.956 169.22 cv
324.501 166.8 325.037 164.668 326.152 164.459 cv
327.268 164.25 328.54 166.042 328.995 168.462 cv
cp
1 .843137 .701961 rgb
f
347.121 168.462 mo
346.667 170.882 347.203 173.014 348.318 173.223 cv
349.433 173.432 350.706 171.64 351.16 169.22 cv
351.615 166.8 351.079 164.668 349.964 164.459 cv
348.848 164.25 347.576 166.042 347.121 168.462 cv
cp
.968627 .776471 .631373 rgb
f
355.758 191.005 mo
345.229 186.95 li
344.898 188.644 343.964 190.198 342.609 191.28 cv
341.006 192.561 339.298 192.842 337.314 192.842 cv
335.442 192.842 333.439 191.529 332.316 190.123 cv
331.579 189.201 331.083 188.108 330.857 186.96 cv
320.353 191.005 li
317.548 192.085 315.275 195.396 315.275 198.402 cv
315.275 211.222 li
338.522 227.88 li
358.288 212.814 li
360.836 198.402 li
360.836 195.397 358.563 192.085 355.758 191.005 cv
cp
.956863 .956863 .956863 rgb
f
355.758 191.005 mo
345.229 186.95 li
344.898 188.644 343.964 190.198 342.609 191.28 cv
341.208 192.399 339.727 192.755 338.052 192.827 cv
338.052 229.192 li
354.027 218.126 li
360.836 198.402 li
360.836 195.397 358.563 192.085 355.758 191.005 cv
cp
.85098 .85098 .85098 rgb
f
341.543 197.048 mo
346.93 187.564 li
344.893 184.118 li
338.11 192.738 li
341.543 197.048 li
cp
.788235 .788235 .788235 rgb
f
334.898 196.958 mo
329.289 187.564 li
331.326 184.118 li
338.11 192.738 li
334.898 196.958 li
cp
f
333.081 196.24 mo
329.289 187.564 li
331.326 184.118 li
338.11 192.738 li
333.081 196.24 li
cp
1 1 1 rgb
f
343.138 196.24 mo
346.93 187.564 li
344.893 184.118 li
338.11 192.738 li
343.138 196.24 li
cp
.898039 .898039 .898039 rgb
f
338.669 194.265 mo
338.669 194.612 338.388 194.893 338.041 194.893 cv
337.694 194.893 337.412 194.612 337.412 194.265 cv
337.412 193.917 337.694 193.636 338.041 193.636 cv
338.388 193.636 338.669 193.917 338.669 194.265 cv
cp
1 1 1 rgb
f
338.669 199.203 mo
338.669 199.55 338.388 199.832 338.041 199.832 cv
337.694 199.832 337.412 199.55 337.412 199.203 cv
337.412 198.856 337.694 198.575 338.041 198.575 cv
338.388 198.575 338.669 198.856 338.669 199.203 cv
cp
f
338.669 204.142 mo
338.669 204.489 338.388 204.77 338.041 204.77 cv
337.694 204.77 337.412 204.489 337.412 204.142 cv
337.412 203.795 337.694 203.513 338.041 203.513 cv
338.388 203.513 338.669 203.795 338.669 204.142 cv
cp
f
338.669 209.08 mo
338.669 209.427 338.388 209.709 338.041 209.709 cv
337.694 209.709 337.412 209.427 337.412 209.08 cv
337.412 208.733 337.694 208.452 338.041 208.452 cv
338.388 208.452 338.669 208.733 338.669 209.08 cv
cp
f
323.636 207.992 mo
323.636 207.311 323.135 206.294 322.464 205.672 cv
315.275 198.088 li
313.729 223.952 li
323.636 223.327 li
323.636 207.992 li
cp
.988235 .988235 .988235 rgb
f
352.48 207.992 mo
352.48 207.311 352.981 206.294 353.651 205.672 cv
360.836 198.088 li
362.41 224.032 li
352.48 223.88 li
352.48 207.992 li
cp
.788235 .788235 .788235 rgb
f
351.576 211.239 mo
342.426 211.239 li
342.426 206.044 li
351.576 206.044 li
351.576 211.239 li
cp
f
351.576 206.432 mo
346.975 209.098 li
342.426 206.432 li
342.426 205.113 li
351.576 205.113 li
351.576 206.432 li
cp
.956863 .956863 .956863 rgb
f
333.819 211.239 mo
324.669 211.239 li
324.669 206.044 li
333.819 206.044 li
333.819 211.239 li
cp
.85098 .85098 .85098 rgb
f
333.819 206.432 mo
329.218 209.098 li
324.669 206.432 li
324.669 205.113 li
333.819 205.113 li
333.819 206.432 li
cp
.988235 .988235 .988235 rgb
f
347.665 207.832 mo
347.665 208.179 347.384 208.46 347.037 208.46 cv
346.69 208.46 346.408 208.179 346.408 207.832 cv
346.408 207.485 346.69 207.203 347.037 207.203 cv
347.384 207.203 347.665 207.485 347.665 207.832 cv
cp
1 1 1 rgb
f
329.918 207.832 mo
329.918 208.179 329.637 208.46 329.29 208.46 cv
328.943 208.46 328.661 208.179 328.661 207.832 cv
328.661 207.485 328.943 207.203 329.29 207.203 cv
329.637 207.203 329.918 207.485 329.918 207.832 cv
cp
.956863 .956863 .956863 rgb
f
341.926 247.017 mo
341.693 244.686 li
341.67 243.987 341.744 243.357 341.864 242.763 cv
341.32 243.81 340.998 245.055 341.045 246.563 cv
341.09 247.017 li
334.983 247.017 li
335.028 246.563 li
335.078 244.945 334.706 243.627 334.086 242.537 cv
334.239 243.192 334.325 243.899 334.3 244.686 cv
334.067 247.017 li
329.275 247.017 li
330.265 248.446 331.594 249.332 333.064 249.332 cv
342.49 249.332 li
343.96 249.332 345.289 248.446 346.279 247.017 cv
341.926 247.017 li
cp
.14902 .164706 .207843 rgb
f
324.473 285.665 mo
324.589 285.137 325.641 284.064 326.964 284.191 cv
328.286 284.319 329.455 285.117 329.6 286.16 cv
330.994 296.177 li
331.234 297.903 329.675 300.862 326.759 300.862 cv
323.972 300.862 321.267 297.55 321.632 295.882 cv
324.473 285.665 li
cp
f
324.393 283.819 mo
324.528 285.227 324.653 286.549 324.762 287.752 cv
329.118 287.752 li
329.123 287.639 329.127 287.52 329.133 287.41 cv
329.188 286.31 329.263 285.102 329.351 283.819 cv
324.393 283.819 li
cp
.0117647 .0156863 .0196078 rgb
f
322.945 284.147 mo
322.945 284.147 326.321 285.666 331.011 283.806 cv
331.836 273.68 333.588 254.864 334.3 244.73 cv
334.799 237.622 326.725 236.108 323.705 236.184 cv
319.856 236.286 317.692 238.952 318.58 246.137 cv
319.747 255.573 321.653 274.01 322.945 284.147 cv
cp
.196078 .211765 .266667 rgb
f
351.581 285.665 mo
351.465 285.137 350.413 284.064 349.09 284.191 cv
347.768 284.319 346.599 285.117 346.454 286.16 cv
345.06 296.177 li
344.82 297.903 346.379 300.862 349.294 300.862 cv
352.082 300.862 354.787 297.55 354.422 295.882 cv
351.581 285.665 li
cp
.14902 .164706 .207843 rgb
f
351.661 283.819 mo
351.526 285.227 351.401 286.549 351.292 287.752 cv
346.936 287.752 li
346.931 287.639 346.927 287.52 346.921 287.41 cv
346.866 286.31 346.791 285.102 346.703 283.819 cv
351.661 283.819 li
cp
.0117647 .0156863 .0196078 rgb
f
353.109 284.147 mo
353.109 284.147 349.733 285.666 345.043 283.806 cv
344.218 273.68 342.466 254.864 341.754 244.73 cv
341.255 237.622 349.329 236.108 352.349 236.184 cv
356.198 236.286 358.362 238.952 357.474 246.137 cv
356.307 255.573 354.401 274.01 353.109 284.147 cv
cp
.196078 .211765 .266667 rgb
f
327.39 171.034 mo
325.169 168.368 319.838 158.743 327.39 154.152 cv
331.388 144.23 350.49 148.315 351.904 156.525 cv
352.496 163.781 349.158 169.701 348.714 172.218 cv
349.158 163.926 346.345 161.852 346.345 161.852 cv
346.617 164.843 li
346.617 164.843 344.658 159.157 331.021 161.111 cv
330.888 164.091 328.575 166.591 328.575 166.591 cv
327.39 171.034 li
cp
.196078 .239216 .223529 rgb
f
338.086 181.103 mo
336.92 181.103 335.821 180.93 334.811 180.658 cv
335.262 180.027 336.221 179.845 338.159 179.845 cv
340.061 179.845 341.02 180.022 341.481 180.623 cv
340.429 180.915 339.287 181.103 338.086 181.103 cv
cp
342.99 180.115 mo
342.764 178.588 341.747 177.691 338.159 177.691 cv
334.533 177.691 333.533 178.609 333.323 180.168 cv
333.249 180.933 330.429 179.923 329.513 177.253 cv
327.87 172.465 326.921 169.109 326.921 169.109 cv
328.965 181.745 330.834 188.33 338.159 188.33 cv
345.489 188.33 346.968 182.101 349.51 169.316 cv
349.51 169.316 348.041 174.341 346.859 177.944 cv
345.966 180.67 343.103 180.863 342.99 180.115 cv
cp
f
351.904 156.525 mo
350.925 150.598 342.063 148.334 338.071 148.334 cv
338.071 160.729 li
345.871 161.448 346.617 164.843 346.617 164.843 cv
346.345 161.852 li
346.345 161.852 349.158 163.926 348.714 172.218 cv
349.158 169.701 352.496 163.781 351.904 156.525 cv
cp
.145098 .176471 .164706 rgb
f
331.611 223.83 mo
333.85 223.936 336.002 224.232 337.992 224.674 cv
338.004 205.198 li
335.16 204.299 332.069 203.694 328.851 203.476 cv
325.58 203.254 322.512 203.455 319.757 204.002 cv
325.24 224.087 li
327.192 223.82 329.339 223.723 331.611 223.83 cv
cp
1 1 1 rgb
f
344.373 223.838 mo
346.623 223.728 348.751 223.819 350.689 224.076 cv
356.175 203.98 li
353.438 203.452 350.396 203.265 347.156 203.493 cv
343.907 203.721 340.788 204.343 337.922 205.262 cv
337.934 224.705 li
339.94 224.253 342.112 223.949 344.373 223.838 cv
cp
.956863 .956863 .956863 rgb
f
331.492 225.028 mo
333.764 225.028 335.956 225.222 337.993 225.572 cv
338.005 205.79 li
335.067 205.064 331.891 204.659 328.605 204.659 cv
325.288 204.659 322.2 205.072 319.447 205.811 cv
325.09 225.582 li
327.041 225.226 329.198 225.028 331.492 225.028 cv
cp
.14902 .164706 .207843 rgb
f
344.494 225.028 mo
346.766 225.028 348.903 225.222 350.84 225.572 cv
356.484 205.79 li
353.752 205.064 350.692 204.659 347.407 204.659 cv
344.089 204.659 340.883 205.072 337.921 205.811 cv
337.934 225.582 li
339.987 225.226 342.2 225.028 344.494 225.028 cv
cp
.231373 .243137 .309804 rgb
f
346.888 177.944 mo
346.002 180.67 343.167 180.863 343.056 180.115 cv
342.832 178.588 341.824 177.691 338.272 177.691 cv
338.071 177.692 li
338.071 179.847 li
338.272 179.845 li
340.155 179.845 341.105 180.022 341.561 180.623 cv
340.52 180.915 339.388 181.103 338.2 181.103 cv
338.071 181.101 li
338.071 188.327 li
338.272 188.33 li
345.53 188.33 346.993 182.101 349.51 169.316 cv
349.51 169.316 348.058 174.341 346.888 177.944 cv
cp
.145098 .176471 .164706 rgb
f
352.575 218.069 mo
352.613 217.916 li
352.696 217.381 352.646 216.836 352.498 216.311 cv
352.508 216.308 li
352.308 214.146 350.186 213.386 349.425 211.784 cv
348.665 210.183 348.625 209.943 348.264 209.983 cv
346.321 210.85 347.925 214.03 347.996 214.732 cv
346.283 214.035 343.899 213.016 342.408 212.172 cv
339.876 210.739 339.266 210.445 338.979 211.488 cv
338.692 212.531 338.947 216.976 340.778 218.901 cv
342.696 220.919 347.335 222.649 348.747 222.626 cv
351.09 224.322 li
355.991 220.289 li
352.575 218.069 li
cp
.968627 .776471 .631373 rgb
f
357.987 220.293 mo
357.005 219.966 354.613 219.005 353.35 218.573 cv
353.882 220.326 351.288 223.017 349.472 223.151 cv
351.328 224.994 353.229 227.601 355.155 228.664 cv
358.84 230.698 361.49 226.959 362.139 225.4 cv
362.962 223.411 362.03 221.64 357.987 220.293 cv
cp
.788235 .788235 .788235 rgb
f
353.368 219.509 mo
354.786 219.934 357.03 220.692 358.003 220.961 cv
360.148 221.555 361.478 222.277 362.175 223.097 cv
361.684 222.042 360.387 221.092 357.987 220.293 cv
357.005 219.966 354.613 219.005 353.35 218.573 cv
353.439 218.864 353.434 219.182 353.368 219.509 cv
cp
.85098 .85098 .85098 rgb
f
323.56 218.069 mo
323.522 217.916 li
323.439 217.381 323.488 216.836 323.637 216.311 cv
323.627 216.308 li
323.827 214.146 325.949 213.386 326.709 211.784 cv
327.47 210.183 327.51 209.943 327.87 209.983 cv
329.814 210.85 328.21 214.03 328.139 214.732 cv
329.852 214.035 332.236 213.016 333.727 212.172 cv
336.259 210.739 336.869 210.445 337.156 211.488 cv
337.443 212.531 337.188 216.976 335.357 218.901 cv
333.438 220.919 328.8 222.649 327.388 222.626 cv
325.045 224.322 li
320.144 220.289 li
323.56 218.069 li
cp
1 .843137 .701961 rgb
f
318.147 220.293 mo
319.13 219.966 321.522 219.005 322.785 218.573 cv
322.253 220.326 324.847 223.017 326.663 223.151 cv
324.807 224.994 322.906 227.601 320.98 228.664 cv
317.295 230.698 314.645 226.959 313.996 225.4 cv
313.173 223.411 314.104 221.64 318.147 220.293 cv
cp
.988235 .988235 .988235 rgb
f
322.767 219.509 mo
321.349 219.934 319.105 220.692 318.132 220.961 cv
315.987 221.555 314.657 222.277 313.96 223.097 cv
314.451 222.042 315.748 221.092 318.147 220.293 cv
319.13 219.966 321.522 219.005 322.785 218.573 cv
322.696 218.864 322.701 219.182 322.767 219.509 cv
cp
1 1 1 rgb
f
368.161 255.198 mo
368.169 255.563 368.456 255.858 368.803 255.858 cv
372.293 255.858 li
372.639 255.858 372.926 255.563 372.933 255.198 cv
373.092 246.505 li
373.1 246.082 372.801 245.737 372.425 245.737 cv
368.641 245.737 li
368.264 245.737 367.967 246.082 367.976 246.505 cv
368.161 255.198 li
cp
.278431 .207843 .168627 rgb
f
367.178 253.242 mo
367.196 253.836 367.658 254.313 368.212 254.313 cv
372.767 254.313 li
373.32 254.313 373.781 253.836 373.796 253.242 cv
373.811 252.642 373.366 252.152 372.803 252.152 cv
368.167 252.152 li
367.603 252.152 367.161 252.642 367.178 253.242 cv
cp
.929412 .588235 .180392 rgb
f
377.406 286.541 mo
377.424 286.754 377.663 286.904 377.939 286.878 cv
378.215 286.851 378.425 286.657 378.409 286.443 cv
378.016 281.246 li
377.998 281.006 377.744 280.835 377.449 280.865 cv
377.155 280.896 376.933 281.116 376.954 281.356 cv
377.406 286.541 li
cp
f
375.618 289.898 mo
371.956 287.036 368.04 283.976 363.843 280.697 cv
365.455 255.46 li
365.525 254.368 366.408 253.498 367.466 253.498 cv
373.845 253.498 li
374.902 253.498 375.786 254.368 375.857 255.46 cv
378.008 288.544 li
378.039 289.016 378.011 289.473 377.932 289.898 cv
375.618 289.898 li
cp
.321569 .247059 .196078 rgb
f
363.308 288.878 mo
363.189 290.922 364.161 292.638 365.483 292.638 cv
374.835 292.638 li
376.157 292.638 377.105 290.922 376.959 288.878 cv
374.615 256.095 li
374.548 255.154 373.798 254.409 372.939 254.409 cv
366.857 254.409 li
365.997 254.409 365.258 255.154 365.203 256.095 cv
363.308 288.878 li
cp
.278431 .207843 .168627 rgb
f
368.609 259.405 mo
368.558 259.588 368.531 259.782 368.535 259.983 cv
368.556 261.071 369.44 261.938 370.509 261.938 cv
371.579 261.938 372.46 261.071 372.476 259.983 cv
372.479 259.782 372.452 259.588 372.4 259.405 cv
373.571 259.405 li
373.601 259.593 373.616 259.786 373.611 259.983 cv
373.568 261.688 372.181 263.035 370.512 263.035 cv
368.842 263.035 367.45 261.688 367.4 259.983 cv
367.395 259.786 367.409 259.593 367.439 259.405 cv
368.609 259.405 li
cp
.929412 .588235 .180392 rgb
f
367.179 260.275 mo
373.834 260.275 li
373.949 255.998 li
367.047 255.998 li
367.179 260.275 li
cp
.321569 .247059 .196078 rgb
f
168.237 174.652 mo
168.237 183.244 163.196 190.209 156.978 190.209 cv
150.761 190.209 145.72 183.244 145.72 174.652 cv
145.72 166.06 150.761 159.095 156.978 159.095 cv
163.196 159.095 168.237 166.06 168.237 174.652 cv
cp
.996078 .819608 .666667 rgb
f
168.229 175.234 mo
177.404 164.523 165.632 152.869 153.47 158.19 cv
143.915 155.475 135.999 169.062 145.544 175.889 cv
145.544 175.889 152.059 170.677 153.253 168.288 cv
155.534 171.437 166.492 175.56 168.229 175.234 cv
cp
.839216 .839216 .839216 rgb
f
162.752 156.548 mo
163.141 159.519 159.934 162.388 155.59 162.956 cv
151.246 163.525 147.41 161.577 147.021 158.607 cv
146.632 155.636 149.839 152.767 154.183 152.199 cv
158.527 151.63 162.363 153.578 162.752 156.548 cv
cp
f
153.47 158.19 mo
156.899 156.69 160.129 156.58 162.841 157.423 cv
161.042 156.067 158.536 155.223 155.761 155.223 cv
152.253 155.223 149.179 156.571 147.418 158.598 cv
149.121 157.77 151.175 157.538 153.47 158.19 cv
cp
.176471 .517647 0 rgb
f
157.251 159.114 mo
157.251 190.19 li
163.342 189.987 168.237 183.116 168.237 174.652 cv
168.237 166.188 163.342 159.316 157.251 159.114 cv
cp
.968627 .776471 .631373 rgb
f
157.251 157.067 mo
157.251 171.283 li
161.359 173.535 167.021 175.461 168.229 175.234 cv
176.444 165.644 167.865 155.309 157.251 157.067 cv
cp
.788235 .788235 .788235 rgb
f
152.883 178.957 mo
151.209 178.957 149.852 177.6 149.852 175.926 cv
149.852 174.252 151.209 172.895 152.883 172.895 cv
154.557 172.895 155.914 174.252 155.914 175.926 cv
155.914 177.6 154.557 178.957 152.883 178.957 cv
cp
152.883 172.605 mo
151.049 172.605 149.562 174.092 149.562 175.926 cv
149.562 177.76 151.049 179.247 152.883 179.247 cv
154.717 179.247 156.204 177.76 156.204 175.926 cv
156.204 174.092 154.717 172.605 152.883 172.605 cv
cp
.27451 .14902 .0588235 rgb
f
161.206 178.957 mo
159.532 178.957 158.175 177.6 158.175 175.926 cv
158.175 174.252 159.532 172.895 161.206 172.895 cv
162.88 172.895 164.237 174.252 164.237 175.926 cv
164.237 177.6 162.88 178.957 161.206 178.957 cv
cp
161.206 172.605 mo
159.372 172.605 157.885 174.092 157.885 175.926 cv
157.885 177.76 159.372 179.247 161.206 179.247 cv
163.04 179.247 164.527 177.76 164.527 175.926 cv
164.527 174.092 163.04 172.605 161.206 172.605 cv
cp
f
156.059 175.661 mo
156.381 175.545 156.723 175.471 157.086 175.471 cv
157.42 175.471 157.736 175.538 158.037 175.638 cv
158.047 175.541 158.056 175.443 158.073 175.346 cv
157.759 175.248 157.432 175.18 157.086 175.18 cv
156.671 175.18 156.279 175.265 155.913 175.404 cv
155.981 175.478 156.03 175.564 156.059 175.661 cv
cp
f
144.151 250.817 mo
143.969 251.19 143.832 251.591 143.733 252.014 cv
143.715 252.169 li
143.678 252.231 li
143.552 252.888 143.525 253.6 143.644 254.379 cv
151.624 289.433 li
151.904 291.267 152.036 292.688 153.973 292.245 cv
155.91 291.803 156.853 290.675 156.853 288.777 cv
157.48 253.357 li
157.48 251.707 157.319 250.379 157.023 249.315 cv
150.785 249.286 145.623 248.86 144.151 250.817 cv
cp
.996078 .819608 .666667 rgb
f
171.542 252.169 mo
171.542 248.69 165.695 249.274 158.347 249.315 cv
158.051 250.378 157.889 251.706 157.889 253.357 cv
158.517 288.777 li
158.517 290.675 159.46 291.803 161.397 292.245 cv
163.334 292.688 163.465 291.267 163.746 289.433 cv
171.725 254.379 li
171.831 253.692 171.823 253.057 171.734 252.465 cv
171.622 252.369 171.542 252.27 171.542 252.169 cv
cp
f
213.797 255.416 mo
211.909 255.416 li
211.133 255.416 li
211.133 290.445 li
211.909 290.445 li
213.797 290.445 li
214.573 290.445 li
214.573 255.416 li
213.797 255.416 li
cp
.607843 .607843 .607843 rgb
f
250.539 255.416 mo
248.651 255.416 li
247.875 255.416 li
247.875 290.445 li
248.651 290.445 li
250.539 290.445 li
251.315 290.445 li
251.315 255.416 li
250.539 255.416 li
cp
f
211.818 256.555 mo
209.715 256.555 li
208.851 256.555 li
208.851 293.343 li
209.715 293.343 li
211.818 293.343 li
212.682 293.343 li
212.682 256.555 li
211.818 256.555 li
cp
.756863 .756863 .756863 rgb
f
252.733 256.555 mo
250.631 256.555 li
249.766 256.555 li
249.766 293.343 li
250.631 293.343 li
252.733 293.343 li
253.597 293.343 li
253.597 256.555 li
252.733 256.555 li
cp
f
252.36 253.674 mo
249.79 253.674 li
249.79 214.488 li
252.36 214.488 li
252.36 253.674 li
cp
f
212.309 253.674 mo
209.739 253.674 li
209.739 214.488 li
212.309 214.488 li
212.309 253.674 li
cp
f
257.088 254.474 mo
257.088 256.065 255.798 257.355 254.207 257.355 cv
208.105 257.355 li
206.514 257.355 205.224 256.065 205.224 254.474 cv
205.224 252.883 206.514 251.593 208.105 251.593 cv
254.207 251.593 li
255.798 251.593 257.088 252.883 257.088 254.474 cv
cp
.34902 .34902 .34902 rgb
f
254.207 251.593 mo
208.105 251.593 li
206.978 251.593 206.012 252.246 205.539 253.189 cv
206.012 254.132 206.978 254.786 208.105 254.786 cv
254.207 254.786 li
255.334 254.786 256.3 254.132 256.773 253.189 cv
256.3 252.246 255.334 251.593 254.207 251.593 cv
cp
.439216 .439216 .439216 rgb
f
254.783 231.418 mo
254.783 238.104 244.011 243.525 230.724 243.525 cv
217.436 243.525 206.664 238.104 206.664 231.418 cv
206.664 210.683 li
206.664 203.996 217.436 198.576 230.724 198.576 cv
244.011 198.576 254.783 203.996 254.783 210.683 cv
254.783 231.418 li
cp
.34902 .34902 .34902 rgb
f
230.724 201.745 mo
240.089 201.745 248.379 203.722 253.483 206.758 cv
250.243 201.999 241.281 198.576 230.724 198.576 cv
220.167 198.576 211.204 201.999 207.964 206.758 cv
213.068 203.722 221.358 201.745 230.724 201.745 cv
cp
.439216 .439216 .439216 rgb
f
254.207 256.392 mo
208.105 256.392 li
206.679 256.392 205.503 255.353 205.272 253.992 cv
205.246 254.15 205.224 254.309 205.224 254.474 cv
205.224 256.065 206.514 257.355 208.105 257.355 cv
254.207 257.355 li
255.798 257.355 257.088 256.065 257.088 254.474 cv
257.088 254.309 257.066 254.15 257.04 253.992 cv
256.809 255.353 255.633 256.392 254.207 256.392 cv
cp
.227451 .266667 .278431 rgb
f
230.724 241.234 mo
219.748 241.234 210.4 237.764 206.851 232.904 cv
208.309 238.889 218.437 243.525 230.724 243.525 cv
243.01 243.525 253.139 238.889 254.596 232.904 cv
251.048 237.764 241.699 241.234 230.724 241.234 cv
cp
f
249.058 243.743 mo
249.058 248.401 244.598 252.177 239.095 252.177 cv
222.1 252.177 li
216.598 252.177 212.137 248.401 212.137 243.743 cv
212.137 239.085 216.598 235.309 222.1 235.309 cv
239.095 235.309 li
244.598 235.309 249.058 239.085 249.058 243.743 cv
cp
.278431 .207843 .168627 rgb
f
245.38 238.665 mo
216.544 238.665 li
216.544 211.505 li
245.38 211.505 li
245.38 238.665 li
cp
.956863 .956863 .956863 rgb
f
245.38 238.665 mo
230.843 238.665 li
230.843 211.505 li
245.38 211.505 li
245.38 238.665 li
cp
.85098 .85098 .85098 rgb
f
253.657 214.067 mo
253.657 201.247 li
253.657 198.242 251.383 194.93 248.579 193.85 cv
235.954 188.988 li
233.15 187.908 228.603 187.908 225.798 188.988 cv
213.174 193.85 li
210.369 194.93 208.095 198.242 208.095 201.247 cv
208.095 214.067 li
253.657 214.067 li
cp
.937255 .686275 .415686 rgb
f
253.657 214.067 mo
253.657 201.247 li
253.657 198.242 251.383 194.93 248.579 193.85 cv
235.954 188.988 li
233.15 187.908 228.603 187.908 225.798 188.988 cv
213.174 193.85 li
210.369 194.93 208.095 198.242 208.095 201.247 cv
208.095 214.067 li
253.657 214.067 li
cp
f
248.579 193.85 mo
235.954 188.988 li
234.551 188.448 232.712 188.178 230.872 188.178 cv
230.872 214.067 li
253.657 214.067 li
253.657 201.247 li
253.657 198.242 251.383 194.93 248.579 193.85 cv
cp
.929412 .658824 .392157 rgb
f
237.642 196.972 mo
224.11 196.972 li
224.11 171.925 li
237.642 171.925 li
237.642 196.972 li
cp
.937255 .686275 .415686 rgb
f
237.642 196.972 mo
230.743 196.972 li
230.743 171.925 li
237.642 171.925 li
237.642 196.972 li
cp
.929412 .658824 .392157 rgb
f
237.642 171.925 mo
224.11 171.925 li
224.11 184.803 li
229.513 190.764 235.915 189.266 237.642 189.266 cv
237.642 171.925 li
cp
.886275 .603922 .34902 rgb
f
217.929 210.837 mo
217.929 210.156 217.341 209.139 216.551 208.517 cv
208.095 207.238 li
208.095 214.067 li
217.929 214.067 li
217.929 210.837 li
cp
.937255 .686275 .415686 rgb
f
248.579 193.85 mo
238.05 189.795 li
237.719 191.49 236.785 193.043 235.43 194.125 cv
233.827 195.406 232.118 195.688 230.135 195.688 cv
228.263 195.688 226.26 194.375 225.136 192.968 cv
224.4 192.046 223.903 190.953 223.678 189.805 cv
213.174 193.85 li
210.369 194.93 208.095 198.242 208.095 201.247 cv
208.095 214.067 li
231.343 230.725 li
253.657 214.067 li
253.657 201.247 li
253.657 198.242 251.383 194.93 248.579 193.85 cv
cp
.956863 .956863 .956863 rgb
f
248.579 193.85 mo
238.05 189.795 li
237.719 191.49 236.785 193.043 235.43 194.125 cv
234.029 195.244 232.547 195.601 230.872 195.673 cv
230.872 227.606 li
253.657 214.067 li
253.657 201.247 li
253.657 198.242 251.383 194.93 248.579 193.85 cv
cp
.85098 .85098 .85098 rgb
f
234.363 199.893 mo
239.751 190.409 li
237.714 186.963 li
230.93 195.583 li
234.363 199.893 li
cp
.788235 .788235 .788235 rgb
f
227.719 199.804 mo
222.109 190.409 li
224.147 186.963 li
230.93 195.583 li
227.719 199.804 li
cp
f
225.901 199.085 mo
222.109 190.409 li
224.147 186.963 li
230.93 195.583 li
225.901 199.085 li
cp
1 1 1 rgb
f
235.959 199.085 mo
239.751 190.409 li
237.714 186.963 li
230.93 195.583 li
235.959 199.085 li
cp
.898039 .898039 .898039 rgb
f
231.49 197.11 mo
231.49 197.457 231.209 197.738 230.861 197.738 cv
230.514 197.738 230.233 197.457 230.233 197.11 cv
230.233 196.763 230.514 196.481 230.861 196.481 cv
231.209 196.481 231.49 196.763 231.49 197.11 cv
cp
1 1 1 rgb
f
231.49 202.048 mo
231.49 202.395 231.209 202.677 230.861 202.677 cv
230.514 202.677 230.233 202.395 230.233 202.048 cv
230.233 201.701 230.514 201.42 230.861 201.42 cv
231.209 201.42 231.49 201.701 231.49 202.048 cv
cp
f
231.49 206.987 mo
231.49 207.334 231.209 207.615 230.861 207.615 cv
230.514 207.615 230.233 207.334 230.233 206.987 cv
230.233 206.64 230.514 206.358 230.861 206.358 cv
231.209 206.358 231.49 206.64 231.49 206.987 cv
cp
f
231.49 211.925 mo
231.49 212.272 231.209 212.554 230.861 212.554 cv
230.514 212.554 230.233 212.272 230.233 211.925 cv
230.233 211.578 230.514 211.297 230.861 211.297 cv
231.209 211.297 231.49 211.578 231.49 211.925 cv
cp
f
216.456 210.837 mo
216.456 210.156 215.956 209.139 215.285 208.517 cv
208.095 200.933 li
208.095 226.172 li
216.456 226.172 li
216.456 210.837 li
cp
f
245.301 210.837 mo
245.301 210.156 245.801 209.139 246.472 208.517 cv
253.657 200.933 li
253.657 226.725 li
245.301 226.725 li
245.301 210.837 li
cp
.788235 .788235 .788235 rgb
f
244.396 214.084 mo
235.247 214.084 li
235.247 208.889 li
244.396 208.889 li
244.396 214.084 li
cp
f
244.396 209.277 mo
239.796 211.943 li
235.247 209.277 li
235.247 207.959 li
244.396 207.959 li
244.396 209.277 li
cp
.956863 .956863 .956863 rgb
f
226.64 214.084 mo
217.49 214.084 li
217.49 208.889 li
226.64 208.889 li
226.64 214.084 li
cp
.85098 .85098 .85098 rgb
f
226.64 209.277 mo
222.039 211.943 li
217.49 209.277 li
217.49 207.959 li
226.64 207.959 li
226.64 209.277 li
cp
1 1 1 rgb
f
240.486 210.677 mo
240.486 211.024 240.205 211.306 239.857 211.306 cv
239.51 211.306 239.229 211.024 239.229 210.677 cv
239.229 210.33 239.51 210.049 239.857 210.049 cv
240.205 210.049 240.486 210.33 240.486 210.677 cv
cp
f
222.739 210.677 mo
222.739 211.024 222.457 211.306 222.11 211.306 cv
221.763 211.306 221.482 211.024 221.482 210.677 cv
221.482 210.33 221.763 210.049 222.11 210.049 cv
222.457 210.049 222.739 210.33 222.739 210.677 cv
cp
.956863 .956863 .956863 rgb
f
217.724 226.942 mo
216.413 228.759 213.297 229.737 210.763 229.127 cv
208.23 228.518 207.239 226.551 208.55 224.734 cv
220.182 208.454 li
221.493 206.637 224.609 205.659 227.143 206.269 cv
229.676 206.878 230.667 208.845 229.356 210.661 cv
217.724 226.942 li
cp
1 1 1 rgb
f
243.974 226.942 mo
245.285 228.759 248.401 229.737 250.935 229.127 cv
253.468 228.518 254.459 226.551 253.148 224.734 cv
241.516 208.454 li
240.205 206.637 237.089 205.659 234.555 206.269 cv
232.022 206.878 231.031 208.845 232.342 210.661 cv
243.974 226.942 li
cp
.788235 .788235 .788235 rgb
f
236.886 214.188 mo
236.861 213.718 236.527 213.342 236.14 213.346 cv
225.506 213.449 li
225.119 213.453 224.777 213.834 224.743 214.306 cv
224.531 217.194 li
222.014 217.218 li
222.429 211.794 li
222.477 211.171 222.949 210.666 223.485 210.661 cv
238.214 210.519 li
238.749 210.514 239.212 211.01 239.248 211.632 cv
239.56 217.048 li
237.044 217.073 li
236.886 214.188 li
cp
.196078 .211765 .266667 rgb
f
229.274 207.891 mo
228.84 206.95 227.838 206.393 226.827 206.611 cv
221.586 207.743 li
220.408 207.997 219.668 209.204 219.935 210.438 cv
220.147 211.422 220.936 212.116 221.844 212.233 cv
221.885 212.422 li
222.198 213.873 224.574 216.023 226.828 215.536 cv
229.082 215.05 230.855 214.408 230.542 212.958 cv
229.589 208.541 li
229.537 208.301 229.418 208.09 229.274 207.891 cv
cp
.937255 .686275 .415686 rgb
f
232.471 207.932 mo
232.905 206.991 233.906 206.435 234.917 206.653 cv
240.158 207.784 li
241.337 208.039 242.076 209.245 241.81 210.48 cv
241.598 211.464 240.808 212.158 239.901 212.274 cv
239.86 212.464 li
239.547 213.914 237.17 216.064 234.917 215.578 cv
232.663 215.091 230.889 214.45 231.202 212.999 cv
232.156 208.582 li
232.208 208.343 232.327 208.131 232.471 207.932 cv
cp
.929412 .658824 .392157 rgb
f
216.357 239.868 mo
218.931 242.392 224.332 244.135 230.597 244.135 cv
236.863 244.135 242.263 242.392 244.838 239.868 cv
216.357 239.868 li
cp
.227451 .156863 .121569 rgb
f
211.838 238.961 mo
211.84 240.181 212.829 241.168 214.049 241.167 cv
247.578 241.131 li
248.798 241.13 249.785 240.14 249.784 238.921 cv
249.762 218.373 li
249.761 217.153 248.771 216.166 247.551 216.167 cv
214.022 216.203 li
212.803 216.204 211.815 217.194 211.816 218.413 cv
211.838 238.961 li
cp
.196078 .211765 .266667 rgb
f
210.829 228.538 mo
211.645 218.322 li
211.739 217.148 212.803 216.204 214.022 216.203 cv
247.551 216.167 li
248.771 216.166 249.837 217.107 249.933 218.281 cv
250.771 228.495 li
210.829 228.538 li
cp
.231373 .243137 .309804 rgb
f
227.107 229.769 mo
234.496 229.761 li
234.493 226.766 li
227.103 226.774 li
227.107 229.769 li
cp
.933333 .713726 .34902 rgb
f
234.746 249.862 mo
234.513 247.531 li
234.491 246.832 234.565 246.203 234.684 245.608 cv
234.141 246.655 233.819 247.9 233.866 249.408 cv
233.91 249.862 li
227.804 249.862 li
227.848 249.408 li
227.899 247.79 227.526 246.472 226.906 245.382 cv
227.059 246.037 227.146 246.744 227.12 247.531 cv
226.887 249.862 li
222.096 249.862 li
223.085 251.292 224.415 252.177 225.884 252.177 cv
235.311 252.177 li
236.781 252.177 238.11 251.292 239.099 249.862 cv
234.746 249.862 li
cp
.227451 .156863 .121569 rgb
f
217.294 288.511 mo
217.41 287.982 218.462 286.909 219.784 287.037 cv
221.107 287.164 222.276 287.962 222.421 289.005 cv
223.815 299.022 li
224.055 300.748 222.496 303.707 219.58 303.707 cv
216.793 303.707 214.088 300.395 214.453 298.728 cv
217.294 288.511 li
cp
.129412 .0784314 .054902 rgb
f
217.213 286.664 mo
217.349 288.072 217.474 289.395 217.583 290.597 cv
221.939 290.597 li
221.943 290.484 221.948 290.365 221.953 290.256 cv
222.008 289.155 222.083 287.947 222.172 286.664 cv
217.213 286.664 li
cp
.0117647 .0156863 .0196078 rgb
f
215.765 286.992 mo
215.765 286.992 219.142 288.511 223.832 286.651 cv
224.656 276.525 226.409 257.709 227.12 247.575 cv
227.619 240.467 219.546 238.953 216.526 239.029 cv
212.677 239.131 210.512 241.797 211.401 248.982 cv
212.567 258.418 214.474 276.855 215.765 286.992 cv
cp
.278431 .207843 .168627 rgb
f
244.401 288.511 mo
244.285 287.982 243.234 286.909 241.911 287.037 cv
240.588 287.164 239.419 287.962 239.274 289.005 cv
237.881 299.022 li
237.64 300.748 239.199 303.707 242.115 303.707 cv
244.902 303.707 247.607 300.395 247.242 298.728 cv
244.401 288.511 li
cp
.129412 .0784314 .054902 rgb
f
244.482 286.664 mo
244.346 288.072 244.222 289.395 244.112 290.597 cv
239.757 290.597 li
239.752 290.484 239.747 290.365 239.742 290.256 cv
239.687 289.155 239.612 287.947 239.523 286.664 cv
244.482 286.664 li
cp
.0117647 .0156863 .0196078 rgb
f
245.93 286.992 mo
245.93 286.992 242.553 288.511 237.863 286.651 cv
237.039 276.525 235.286 257.709 234.575 247.575 cv
234.076 240.467 242.149 238.953 245.169 239.029 cv
249.018 239.131 251.183 241.797 250.294 248.982 cv
249.128 258.418 247.222 276.855 245.93 286.992 cv
cp
.278431 .207843 .168627 rgb
f
216.446 241.268 mo
219.448 241.217 227.438 242.235 227.04 246.982 cv
227.119 246.996 li
227.139 240.398 219.46 238.955 216.526 239.029 cv
213.587 239.107 211.635 240.688 211.27 244.626 cv
211.783 242.277 213.674 241.318 216.446 241.268 cv
cp
.227451 .156863 .121569 rgb
f
245.169 241.029 mo
248.257 241.084 250.256 242.263 250.469 245.239 cv
250.256 240.849 248.257 239.111 245.169 239.029 cv
242.514 238.962 235.959 240.128 234.751 245.239 cv
235.959 241.774 242.514 240.984 245.169 241.029 cv
cp
f
221.532 172.26 mo
221.987 174.68 221.451 176.811 220.336 177.021 cv
219.22 177.23 217.948 175.438 217.493 173.018 cv
217.039 170.598 217.575 168.466 218.69 168.257 cv
219.806 168.048 221.078 169.84 221.532 172.26 cv
cp
.937255 .686275 .415686 rgb
f
239.659 172.26 mo
239.205 174.68 239.741 176.811 240.856 177.021 cv
241.971 177.23 243.244 175.438 243.698 173.018 cv
244.153 170.598 243.617 168.466 242.501 168.257 cv
241.386 168.048 240.114 169.84 239.659 172.26 cv
cp
.929412 .658824 .392157 rgb
f
242.236 170.271 mo
242.236 178.672 237.083 185.483 230.726 185.483 cv
224.369 185.483 219.215 178.672 219.215 170.271 cv
219.215 161.869 221.512 155.059 230.726 155.059 cv
240.472 155.059 242.236 161.869 242.236 170.271 cv
cp
.937255 .686275 .415686 rgb
f
226.831 181.043 mo
226.831 179.733 227.896 178.667 229.206 178.667 cv
232.233 178.667 li
233.543 178.667 234.608 179.733 234.608 181.043 cv
234.608 181.043 234.71 181.924 234.635 182.652 cv
234.506 182.843 234.371 183.027 234.228 183.2 cv
232.734 184.227 229.001 184.158 227.33 183.223 cv
227.152 183.019 226.988 182.798 226.831 182.566 cv
226.831 181.795 226.831 181.043 226.831 181.043 cv
cp
242.055 172.882 mo
240.577 176.842 238.503 179.94 236.112 179.991 cv
235.647 178.276 234.095 177.008 232.233 177.008 cv
229.207 177.008 li
227.423 177.008 225.927 178.173 225.394 179.777 cv
225.352 179.684 li
222.81 179.684 220.94 177.028 219.419 173.078 cv
219.419 179.633 222.058 184.268 225.52 186.559 cv
226.146 187.975 227.558 188.966 229.207 188.966 cv
232.233 188.966 li
234.002 188.966 235.489 187.819 236.033 186.234 cv
239.466 183.632 242.055 178.68 242.055 172.882 cv
cp
.27451 .14902 .0588235 rgb
f
231.046 155.073 mo
231.046 185.462 li
237.253 185.235 242.236 178.529 242.236 170.271 cv
242.236 161.966 240.499 155.228 231.046 155.073 cv
cp
.929412 .658824 .392157 rgb
f
236.112 179.991 mo
235.647 178.276 234.095 177.008 232.233 177.008 cv
230.445 177.008 li
230.445 178.667 li
232.233 178.667 li
233.543 178.667 234.608 179.733 234.608 181.043 cv
234.608 181.043 234.71 181.924 234.634 182.652 cv
234.506 182.843 234.371 183.027 234.228 183.2 cv
233.519 183.687 231.703 183.92 230.445 183.939 cv
230.445 188.966 li
232.233 188.966 li
234.002 188.966 235.489 187.819 236.033 186.234 cv
239.466 183.632 242.055 178.68 242.055 172.882 cv
240.577 176.842 238.503 179.94 236.112 179.991 cv
cp
.219608 .113725 .0431373 rgb
f
239.262 173.878 mo
239.226 174.332 238.847 174.688 238.414 174.688 cv
234.049 174.688 li
233.616 174.688 233.205 174.332 233.128 173.878 cv
232.578 170.629 li
232.476 170.024 232.816 169.514 233.343 169.514 cv
238.653 169.514 li
239.18 169.514 239.566 170.024 239.518 170.629 cv
239.262 173.878 li
cp
229.043 170.629 mo
228.493 173.878 li
228.417 174.332 228.006 174.688 227.573 174.688 cv
223.207 174.688 li
222.775 174.688 222.396 174.332 222.36 173.878 cv
222.103 170.629 li
222.055 170.024 222.442 169.514 222.968 169.514 cv
228.279 169.514 li
228.805 169.514 229.146 170.024 229.043 170.629 cv
cp
242.475 167.689 mo
242.475 167.444 242.325 167.35 242.14 167.48 cv
239.632 168.838 li
239.485 168.751 239.32 168.698 239.139 168.698 cv
232.585 168.698 li
231.994 168.698 231.595 169.219 231.622 169.874 cv
230 169.874 li
230.027 169.219 229.627 168.698 229.037 168.698 cv
222.483 168.698 li
222.265 168.698 222.069 168.774 221.903 168.896 cv
219.263 167.605 li
219.078 167.475 218.928 167.569 218.928 167.814 cv
218.928 168.059 218.993 168.375 219.222 168.689 cv
221.447 170.473 li
221.732 174.084 li
221.776 174.644 222.244 175.084 222.778 175.084 cv
228.165 175.084 li
228.699 175.084 229.207 174.644 229.301 174.084 cv
229.815 171.051 li
231.807 171.051 li
232.32 174.084 li
232.415 174.644 232.922 175.084 233.456 175.084 cv
238.844 175.084 li
239.378 175.084 239.845 174.644 239.89 174.084 cv
240.198 170.172 li
242.181 168.564 li
242.41 168.25 242.475 167.934 242.475 167.689 cv
cp
.231373 .243137 .309804 rgb
f
413.458 159.47 mo
413.458 159.47 412.993 147.167 405.38 136.278 cv
405.38 130.53 li
408.191 129.768 411.338 129.32 414.003 129.271 cv
414.003 159.261 li
413.653 159.392 413.458 159.47 413.458 159.47 cv
.101961 .607843 .741176 rgb
f
482.33 296.032 mo
427.163 296.032 li
428.864 294.673 431.519 293.799 434.502 293.799 cv
449.648 293.799 li
454.793 290.206 463.354 284.895 465.707 283.444 cv
487.606 283.444 li
487.616 283.721 487.621 283.936 487.623 284.087 cv
487.623 284.087 478.863 293.165 478.528 294.231 cv
478.097 294.067 li
478.089 294.134 li
479.78 294.505 481.247 295.171 482.33 296.032 cv
.309804 .498039 .623529 rgb
f
487.606 283.444 mo
465.707 283.444 li
465.72 283.436 465.732 283.429 465.745 283.421 cv
487.605 283.421 li
487.606 283.429 487.606 283.437 487.606 283.444 cv
.72549 .733333 .74902 rgb
f
474.998 305.37 mo
434.502 305.37 li
429.367 305.37 425.204 302.78 425.204 299.585 cv
425.204 298.246 425.935 297.013 427.163 296.032 cv
482.33 296.032 li
483.561 297.012 484.295 298.244 484.295 299.585 cv
484.295 302.78 480.133 305.37 474.998 305.37 cv
.262745 .47451 .596078 rgb
f
487.605 283.421 mo
465.745 283.421 li
466.116 283.192 466.321 283.066 466.321 283.066 cv
466.307 282.757 466.293 282.438 466.279 282.112 cv
487.555 282.112 li
487.576 282.634 487.594 283.074 487.605 283.421 cv
414.003 159.261 mo
414.003 129.271 li
414.168 129.268 414.331 129.266 414.491 129.266 cv
417.006 129.266 419.023 129.644 419.8 130.475 cv
420.609 131.338 421.36 132.27 422.059 133.253 cv
422.059 156.769 li
418.636 157.569 415.284 158.778 414.003 159.261 cv
.72549 .733333 .74902 rgb
f
487.555 282.112 mo
466.279 282.112 li
466.263 281.763 466.249 281.407 466.234 281.04 cv
487.509 281.04 li
487.526 281.428 487.541 281.786 487.555 282.112 cv
422.059 156.769 mo
422.059 133.253 li
422.535 133.923 422.987 134.617 423.415 135.33 cv
423.415 156.476 li
422.965 156.565 422.511 156.663 422.059 156.769 cv
.560784 .564706 .580392 rgb
f
487.509 281.04 mo
466.234 281.04 li
465.651 266.49 465.383 238.606 465.317 231.541 cv
461.685 231.487 459.31 231.142 459.508 230.033 cv
459.871 228 462.468 191.134 463.426 181.327 cv
463.192 180.634 463.071 180.1 463.106 179.79 cv
463.272 178.326 463.377 176.445 463.459 174.309 cv
463.459 173.954 463.463 173.655 463.471 173.434 cv
463.49 173.44 li
463.557 171.511 463.611 169.406 463.674 167.214 cv
463.674 167.215 li
463.471 164.447 463.515 161.422 463.637 158.797 cv
457.549 162.887 li
456.684 163.772 455.507 164.246 454.311 164.246 cv
453.47 164.246 452.618 164.011 451.858 163.519 cv
430.674 153.58 li
430.719 153.404 430.771 153.233 430.827 153.062 cv
429.589 152.614 li
429.851 153.993 430.063 155.314 430.22 156.525 cv
429.529 156.16 428.575 156.008 427.471 156.008 cv
426.253 156.008 424.851 156.193 423.415 156.476 cv
423.415 135.33 li
424.533 137.191 425.491 139.182 426.311 141.214 cv
426.423 140.878 426.638 140.589 427.018 140.395 cv
427.046 140.391 427.073 140.388 427.098 140.388 cv
427.363 140.388 427.464 140.685 428.176 142.006 cv
428.955 143.451 430.952 144.054 431.239 146.044 cv
431.229 146.047 li
431.392 146.525 431.463 147.026 431.411 147.525 cv
431.384 147.668 li
432.999 148.604 li
433.057 148.493 433.107 148.398 433.167 148.281 cv
433.167 148.281 442.141 150.58 454.3 154.269 cv
467.005 141.16 li
467.325 140.615 467.732 139.902 468.658 138.85 cv
468.394 138.948 li
471.339 132.492 li
471.362 132.483 li
471.191 129.968 li
470.001 130.684 468.419 131.131 466.318 131.131 cv
465.652 131.131 464.933 131.086 464.158 130.99 cv
463.487 130.668 462.095 129.177 462.254 126.777 cv
462.261 126.785 li
462.085 126.187 461.942 125.528 461.831 124.806 cv
461.237 124.228 461.592 123.222 461.592 123.222 cv
461.646 123.222 li
461.626 122.995 461.603 122.776 461.587 122.54 cv
461.369 119.334 461.303 116.627 461.38 114.342 cv
483.3 114.342 li
483.3 105.874 li
461.387 105.874 li
461.648 103.965 462.592 101.715 464.469 99.5058 cv
464.7 100.11 465.581 100.669 467.422 100.669 cv
468.137 100.669 468.997 100.585 470.02 100.386 cv
471.201 100.156 473.118 99.8968 475.235 99.8968 cv
479.671 99.8968 484.98 101.036 486.211 105.968 cv
488.9 107.572 491.115 119.255 482.2 123.636 cv
482.511 128.211 li
483.118 127.962 li
485.496 132.83 li
485.648 132.787 li
486.587 134.16 li
486.587 134.16 486.387 134.21 486.042 134.304 cv
487.418 136.328 488.822 139.987 488.683 145.698 cv
488.82 146.475 488.934 147.31 489.003 148.245 cv
490.764 164.071 li
492.107 167.56 491.702 171.35 490.137 174.039 cv
486.176 181.525 li
489.829 205.476 488.858 225.71 489.545 231.505 cv
489.295 232.193 488.06 232.734 486.281 233.132 cv
486.298 235.325 486.293 237.621 486.259 240.046 cv
486.098 251.284 487.152 272.82 487.509 281.04 cv
.654902 .658823 .67451 rgb
f
461.38 114.342 mo
461.389 114.086 461.4 113.835 461.412 113.59 cv
468.15 113.59 li
468.15 113.59 li
474.487 113.59 li
474.487 113.59 li
477.687 113.59 li
480.484 113.59 li
480.484 112.478 481.212 111.288 482.548 111.112 cv
482.548 108.787 li
482.437 108.798 li
482.432 108.798 482.427 108.798 482.422 108.798 cv
482.421 108.798 482.419 108.798 482.418 108.798 cv
482.414 108.798 482.411 108.798 482.407 108.797 cv
482.406 108.797 482.404 108.797 482.402 108.797 cv
482.398 108.797 482.393 108.797 482.389 108.797 cv
482.387 108.797 482.385 108.797 482.383 108.797 cv
482.38 108.797 482.378 108.797 482.375 108.797 cv
482.372 108.797 482.37 108.797 482.367 108.797 cv
482.365 108.797 482.363 108.797 482.361 108.797 cv
481.372 108.769 480.798 108.209 480.581 107.496 cv
480.58 107.497 480.579 107.498 480.577 107.5 cv
480.494 107.225 480.465 106.926 480.488 106.627 cv
461.318 106.627 li
461.329 106.383 461.352 106.132 461.387 105.874 cv
483.3 105.874 li
483.3 114.342 li
461.38 114.342 li
482.298 112.458 mo
481.982 112.458 481.725 112.714 481.725 113.03 cv
481.725 113.346 481.982 113.603 482.298 113.603 cv
482.614 113.603 482.871 113.346 482.871 113.03 cv
482.871 112.714 482.614 112.458 482.298 112.458 cv
482.298 106.54 mo
481.982 106.54 481.725 106.796 481.725 107.113 cv
481.725 107.429 481.982 107.685 482.298 107.685 cv
482.614 107.685 482.871 107.429 482.871 107.113 cv
482.871 106.796 482.614 106.54 482.298 106.54 cv
.588235 .380392 .160784 rgb
f
480.484 113.59 mo
477.687 113.59 li
482.483 108.793 li
482.437 108.798 li
482.432 108.798 482.427 108.798 482.422 108.798 cv
482.427 108.798 482.432 108.798 482.437 108.798 cv
482.548 108.787 li
482.548 111.112 li
481.212 111.288 480.484 112.478 480.484 113.59 cv
474.487 113.59 mo
468.15 113.59 li
470.471 111.269 472.793 108.948 475.114 106.627 cv
467.915 106.627 li
461.439 113.103 li
461.524 111.732 461.668 110.529 461.869 109.476 cv
461.503 108.802 461.3 107.917 461.31 106.895 cv
461.579 106.627 li
461.318 106.627 li
461.318 106.627 li
480.488 106.627 li
480.465 106.926 480.494 107.225 480.577 107.5 cv
478.547 109.53 476.517 111.56 474.487 113.59 cv
482.418 108.798 mo
482.414 108.798 482.411 108.798 482.407 108.797 cv
482.411 108.798 482.414 108.798 482.418 108.798 cv
482.402 108.797 mo
482.398 108.797 482.393 108.797 482.389 108.797 cv
482.393 108.797 482.398 108.797 482.402 108.797 cv
482.383 108.797 mo
482.38 108.797 482.378 108.797 482.375 108.797 cv
482.378 108.797 482.38 108.797 482.383 108.797 cv
482.367 108.797 mo
482.365 108.797 482.363 108.797 482.361 108.797 cv
482.363 108.797 482.365 108.797 482.367 108.797 cv
.709804 .47451 .207843 rgb
f
461.31 106.895 mo
461.311 106.806 461.314 106.717 461.318 106.627 cv
461.579 106.627 li
461.31 106.895 li
.74902 .537255 .317647 rgb
f
468.15 113.59 mo
461.412 113.59 li
461.42 113.425 461.429 113.263 461.439 113.103 cv
467.915 106.627 li
475.114 106.627 li
472.793 108.948 470.471 111.269 468.15 113.59 cv
468.15 113.59 li
f
477.687 113.59 mo
474.487 113.59 li
474.487 113.59 li
476.517 111.56 478.547 109.53 480.577 107.5 cv
480.579 107.498 480.58 107.497 480.581 107.496 cv
480.798 108.209 481.372 108.769 482.361 108.797 cv
482.363 108.797 482.365 108.797 482.367 108.797 cv
482.37 108.797 482.372 108.797 482.375 108.797 cv
482.378 108.797 482.38 108.797 482.383 108.797 cv
482.385 108.797 482.387 108.797 482.389 108.797 cv
482.393 108.797 482.398 108.797 482.402 108.797 cv
482.404 108.797 482.406 108.797 482.407 108.797 cv
482.411 108.798 482.414 108.798 482.418 108.798 cv
482.419 108.798 482.421 108.798 482.422 108.798 cv
482.427 108.798 482.432 108.798 482.437 108.798 cv
482.483 108.793 li
477.687 113.59 li
f
482.298 113.603 mo
481.982 113.603 481.725 113.346 481.725 113.03 cv
481.725 112.714 481.982 112.458 482.298 112.458 cv
482.614 112.458 482.871 112.714 482.871 113.03 cv
482.871 113.346 482.614 113.603 482.298 113.603 cv
.560784 .564706 .580392 rgb
f
482.298 107.685 mo
481.982 107.685 481.725 107.429 481.725 107.113 cv
481.725 106.796 481.982 106.54 482.298 106.54 cv
482.614 106.54 482.871 106.796 482.871 107.113 cv
482.871 107.429 482.614 107.685 482.298 107.685 cv
f
405.38 136.278 mo
405.135 135.927 404.883 135.579 404.623 135.232 cv
404.543 135.125 404.463 135.022 404.383 134.923 cv
404.383 130.819 li
404.709 130.718 405.043 130.622 405.38 130.53 cv
405.38 136.278 li
.129412 .490196 .596078 rgb
f
397.827 135.232 mo
397.842 135.189 li
398.016 134.486 398.527 133.83 399.284 133.228 cv
401.893 133.228 li
401.893 131.73 li
402.658 131.396 403.498 131.091 404.383 130.819 cv
404.383 134.923 li
403.882 134.305 403.385 133.85 402.9 133.522 cv
401.045 133.961 399.274 134.54 397.827 135.232 cv
.654902 .658823 .67451 rgb
f
401.893 133.228 mo
399.284 133.228 li
399.726 132.877 400.252 132.544 400.844 132.232 cv
400.898 132.232 li
400.898 132.204 li
401.213 132.04 401.545 131.882 401.893 131.73 cv
401.893 133.228 li
.560784 .564706 .580392 rgb
f
400.898 132.232 mo
400.844 132.232 li
400.862 132.223 400.88 132.213 400.898 132.204 cv
400.898 132.232 li
.427451 .67451 .686274 rgb
f
439.621 297.898 mo
442.151 297.233 445.023 296.427 449.371 293.96 cv
449.371 293.96 451.406 295.634 454.708 295.634 cv
455.867 295.634 458.625 294.786 458.625 294.786 cv
458.61 298.717 457.161 302.584 457.161 302.584 cv
451.167 302.584 li
451.212 301.646 li
449.415 301.646 447.41 302.584 444.993 302.584 cv
442.741 302.584 435.985 302.584 435.985 302.584 cv
434.635 301.792 435.361 299.02 439.621 297.898 cv
cp
.137255 .176471 .176471 rgb
f
463.581 241.314 mo
461.896 255.591 460.432 285.373 460.148 288.517 cv
460.864 294.139 459.026 298.246 458.549 299.389 cv
447.401 294.97 li
447.439 293.46 448.777 290.75 448.806 288.52 cv
448.042 272.131 447.742 232.722 447.713 230.577 cv
447.421 208.715 446.217 189.98 446.217 189.98 cv
446.221 189.992 451.263 177.266 463.327 192.31 cv
463.327 192.31 468.105 202.984 463.581 241.314 cv
cp
.886275 .886275 .886275 rgb
f
411.361 142.307 mo
411.391 142.153 li
411.446 141.619 411.37 141.082 411.196 140.569 cv
411.206 140.566 li
410.899 138.434 408.758 137.787 407.923 136.239 cv
407.089 134.69 407.037 134.454 406.682 134.512 cv
404.8 135.47 406.55 138.539 406.656 139.232 cv
404.924 138.627 402.51 137.738 400.99 136.977 cv
398.409 135.684 397.79 135.424 397.558 136.472 cv
397.326 137.52 397.803 141.911 399.714 143.726 cv
401.717 145.629 406.4 147.109 407.798 147.015 cv
412.3 148.643 li
414.858 144.334 li
411.361 142.307 li
cp
.937255 .686275 .415686 rgb
f
434.61 150.736 mo
432.474 152.35 429.697 154.344 431.312 156.48 cv
432.349 157.852 li
433.964 159.988 437.004 160.41 439.14 158.795 cv
458.611 145.714 li
467.138 140.432 466.427 135.663 464.812 133.527 cv
461.585 129.258 455.842 128.706 449.657 135.21 cv
434.61 150.736 li
cp
.917647 .92549 .921569 rgb
f
433.305 159.296 mo
435.553 160.751 438.554 160.109 440.01 157.862 cv
440.945 156.418 li
442.4 154.17 441.058 151.972 438.811 150.517 cv
436.198 149.465 li
423.026 145.462 413.273 142.963 413.273 142.963 cv
411.586 146.212 410.954 147.268 410.6 148.643 cv
433.305 159.296 li
cp
f
465.109 121.55 mo
467.659 126.77 li
451.028 132.961 li
454.184 126.042 li
465.109 121.55 li
cp
.866667 .866667 .866667 rgb
f
452.084 297.898 mo
454.544 297.233 457.333 296.427 461.425 293.96 cv
461.425 293.96 463.634 295.634 466.935 295.634 cv
468.095 295.634 470.765 294.786 470.765 294.786 cv
471.157 298.717 470.11 302.584 470.11 302.584 cv
464.115 302.584 li
464.063 301.646 li
462.266 301.646 460.359 302.584 457.942 302.584 cv
455.69 302.584 448.933 302.584 448.933 302.584 cv
447.501 301.792 447.94 299.02 452.084 297.898 cv
cp
.192157 .239216 .239216 rgb
f
468.165 188.841 mo
470.752 200.284 470.876 226.578 471.083 232.161 cv
459.027 231.23 440.952 233.676 441.504 230.583 cv
441.927 228.213 445.184 181.667 445.93 176.326 cv
468.165 188.841 li
cp
.917647 .92549 .921569 rgb
f
453.545 123.408 mo
453.713 123.349 453.87 123.288 454.018 123.225 cv
454.497 130.28 li
458.572 130.258 462.66 130.263 466.72 129.726 cv
465.825 116.55 li
471.758 112.429 468.877 92.6062 451.856 93.7622 cv
445.533 94.1917 442.544 97.8806 443.732 115.375 cv
444.232 122.726 446.567 125.866 453.545 123.408 cv
cp
.937255 .686275 .415686 rgb
f
445.868 102.824 mo
442.907 102.273 442.013 96.3469 446.821 90.6879 cv
447.165 91.5862 448.851 92.3935 452.77 91.631 cv
456.689 90.8684 468.175 89.8047 470.124 97.6141 cv
473.006 99.3327 475.38 111.855 465.825 116.55 cv
464.801 115.199 462.79 113.024 463.008 111.357 cv
463.529 107.347 459.238 105.331 457.367 113.119 cv
456.072 106.284 455.248 108.87 454.389 107.322 cv
453.533 105.779 452.851 104.549 452.27 103.312 cv
452.27 103.312 449.14 103.432 445.868 102.824 cv
cp
.301961 .00392157 0 rgb
f
461.539 169.698 mo
461.442 169.729 461.343 169.749 461.246 169.775 cv
461.15 169.81 461.058 169.85 460.961 169.881 cv
461.539 169.698 li
cp
1 .858824 .72549 rgb
f
467.367 183.253 mo
462.621 184.442 453.792 189.713 449.933 189.158 cv
454.496 192.409 li
450.637 191.855 450.935 181.016 451.373 177.142 cv
452.13 170.449 446.835 148.634 448.216 139.027 cv
448.344 138.135 450.357 135.298 452.615 132.37 cv
453.835 130.789 454.834 129.107 456.309 127.858 cv
467.477 126.402 li
469.383 128.234 473.531 133.402 471.524 145.501 cv
469.786 155.978 465.544 167.873 467.367 183.253 cv
cp
.956863 .956863 .956863 rgb
f
447.023 146.291 mo
452.021 129.984 469.083 127.325 469.298 127.129 cv
471.341 129.507 473.97 135.347 472.211 145.944 cv
470.473 156.421 468.706 198.855 470.529 214.236 cv
465.782 215.424 444.923 180.609 445.361 176.735 cv
446.092 170.264 445.729 156.279 447.023 146.291 cv
cp
1 1 1 rgb
f
465.746 169.332 mo
466.174 171.884 467.588 171.555 470.139 171.126 cv
471.779 170.85 li
474.33 170.422 476.051 168.005 475.622 165.454 cv
473.116 142.925 li
472.402 133.258 467.998 131.736 465.446 132.165 cv
460.346 133.022 457.307 137.696 460.115 145.901 cv
465.746 169.332 li
cp
.917647 .92549 .921569 rgb
f
470.175 241.314 mo
469.971 255.591 471.595 285.373 471.637 288.517 cv
472.937 294.139 471.525 298.246 471.166 299.389 cv
459.56 294.97 li
459.441 293.46 460.498 290.75 460.296 288.52 cv
457.832 272.131 453.444 232.722 453.193 230.577 cv
450.633 208.715 447.486 189.98 447.486 189.98 cv
447.491 189.992 451.214 177.266 464.837 192.31 cv
464.837 192.31 470.723 202.984 470.175 241.314 cv
cp
f
470.035 178.251 mo
474.013 204.071 472.958 225.922 473.697 232.161 cv
472.435 235.633 447.881 235.662 448.137 232.206 cv
448.334 229.557 445.516 175.891 445.752 169.922 cv
470.035 178.251 li
cp
1 1 1 rgb
f
457.42 112.392 mo
457.104 111.109 li
456.955 115.86 455.856 117.965 454.088 119.438 cv
453.099 120.261 449.622 122.525 448.432 117.253 cv
448.165 116.069 443.737 116.106 443.737 116.106 cv
443.737 116.106 443.307 117.296 444.08 117.895 cv
444.914 117.798 446.699 117.669 447.097 118.279 cv
447.619 119.081 448.208 120.633 447.461 120.92 cv
446.714 121.208 446.043 121.38 445.066 120.527 cv
444.876 120.362 444.588 120.041 444.447 119.917 cv
444.276 122.488 445.769 124.086 446.488 124.432 cv
460.537 126.168 457.42 112.392 457.42 112.392 cv
cp
.301961 .00392157 0 rgb
f
466.809 121.186 mo
469.358 126.406 li
452.727 132.597 li
455.884 125.677 li
466.809 121.186 li
cp
1 1 1 rgb
f
452.615 132.37 mo
449.6 138.711 448.217 145.402 446.931 152.357 cv
447.285 147.251 447.346 138.83 449.324 135.689 cv
449.717 135.065 450.105 134.227 451.311 132.855 cv
452.615 132.37 li
cp
.768627 .933333 .929412 rgb
f
469.52 126.357 mo
470.527 127.829 li
470.527 127.829 458.727 130.761 456.481 135.254 cv
453.615 135.796 453.615 135.796 453.615 135.796 cv
453.77 140.676 li
453.77 140.676 447.208 156.672 445.969 163.257 cv
445.435 155.964 446.488 146.951 446.488 146.951 cv
446.488 146.951 448.929 131.858 469.52 126.357 cv
cp
f
386.922 126.222 mo
383.071 126.469 378.527 127.482 375.396 128.978 cv
375.396 128.978 376.003 126.869 379.205 125.7 cv
381.512 124.668 386.433 123.101 391.821 123.525 cv
390.165 124.382 388.528 125.273 386.922 126.222 cv
cp
.686275 .686275 .686275 rgb
f
410.114 151.799 mo
409.062 143.707 405.987 131.406 398.946 123.879 cv
396.012 120.743 376.61 123.637 375.396 128.978 cv
376.499 126.498 379.543 124.791 382.68 128.978 cv
391.618 140.908 392.149 154.956 392.149 154.956 cv
392.149 154.956 405.825 149.533 410.114 151.799 cv
cp
1 1 1 rgb
f
383.57 126.44 mo
388.3 124.742 393.988 123.798 397.171 124.252 cv
397.353 124.535 397.535 124.818 397.714 125.103 cv
394.449 124.777 389.002 125.723 384.459 127.369 cv
384.168 127.054 383.872 126.744 383.57 126.44 cv
cp
.686275 .686275 .686275 rgb
f
388.618 127.305 mo
390.675 126.512 393.719 125.906 395.47 126 cv
395.648 126.266 398.988 132.433 399.163 132.702 cv
397.371 132.684 394.32 133.366 392.299 133.899 cv
391.59 132.586 389.176 128.255 388.618 127.305 cv
cp
f
390.199 135.455 mo
394.315 134.058 399.007 133.232 402.129 133.389 cv
402.273 133.685 402.417 133.981 402.557 134.283 cv
399.319 134.229 394.684 135.096 390.679 136.517 cv
390.516 136.163 390.37 135.806 390.199 135.455 cv
cp
f
391.068 137.377 mo
395.21 135.979 399.926 135.158 403.034 135.334 cv
403.165 135.629 403.294 135.926 403.422 136.225 cv
400.194 136.162 395.555 137.024 391.539 138.442 cv
391.391 138.084 391.223 137.733 391.068 137.377 cv
cp
f
391.872 139.322 mo
396.024 137.92 400.753 137.097 403.861 137.278 cv
403.982 137.575 404.098 137.875 404.214 138.175 cv
400.971 138.111 396.312 138.975 392.283 140.406 cv
392.151 140.043 392.013 139.682 391.872 139.322 cv
cp
f
392.739 141.676 mo
396.963 140.278 401.743 139.478 404.789 139.721 cv
404.893 140.016 404.993 140.313 405.093 140.609 cv
401.883 140.499 397.172 141.35 393.08 142.784 cv
392.966 142.415 392.862 142.043 392.739 141.676 cv
cp
f
393.418 143.879 mo
397.732 142.476 402.568 141.709 405.548 142.026 cv
405.636 142.311 405.725 142.596 405.807 142.882 cv
402.635 142.724 397.873 143.563 393.72 144.999 cv
393.623 144.625 393.524 144.251 393.418 143.879 cv
cp
f
394.025 146.269 mo
398.401 144.86 403.298 144.102 406.232 144.47 cv
406.302 144.752 406.366 145.032 406.431 145.313 cv
403.282 145.126 398.486 145.96 394.295 147.397 cv
394.217 147.018 394.112 146.646 394.025 146.269 cv
cp
f
394.525 148.694 mo
398.919 147.282 403.837 146.521 406.763 146.902 cv
406.815 147.183 406.861 147.461 406.907 147.74 cv
403.744 147.554 398.924 148.396 394.724 149.843 cv
394.664 149.459 394.594 149.077 394.525 148.694 cv
cp
f
457.1 190.356 mo
456.944 190.34 li
456.407 190.33 455.878 190.452 455.382 190.668 cv
455.378 190.658 li
453.28 191.145 452.816 193.333 451.344 194.296 cv
449.871 195.258 449.641 195.33 449.728 195.679 cv
450.842 197.473 453.752 195.47 454.433 195.306 cv
453.977 197.083 453.295 199.563 452.665 201.142 cv
451.596 203.823 451.389 204.462 452.453 204.605 cv
453.516 204.747 457.851 203.9 459.498 201.842 cv
461.225 199.685 462.304 194.893 462.092 193.509 cv
463.334 188.885 li
458.824 186.701 li
457.1 190.356 li
cp
.937255 .686275 .415686 rgb
f
449.271 186.063 mo
449.271 186.063 454.841 193.283 463.917 195.552 cv
464.124 206.073 463.917 214.943 463.917 214.943 cv
463.917 214.943 451.746 215.356 450.509 211.436 cv
449.271 207.517 449.271 186.063 449.271 186.063 cv
cp
.768627 .933333 .929412 rgb
f
475.003 159.887 mo
473.399 161.106 li
471.41 159.452 469.146 160.487 467.493 162.477 cv
466.184 164.863 li
462.885 172.373 458.703 183.014 456.473 188.73 cv
458.525 190.043 460.732 191.071 462.973 192.036 cv
474.331 170.571 li
476.009 167.688 476.443 163.626 475.003 159.887 cv
cp
.917647 .92549 .921569 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.0
%%For: (\700\755\762\756\755) ()
%%Title: (1601.m00.i125.n025.S.c12.320851289 Patients in doctors waiting room. Vector illustration.eps)
%%CreationDate: 1/15/2016 4:29 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2N<dP1TJ^9;>OK<pZ$"AGl.eI.HA@q.jb,Qu3&&7ZYun.mZ;F6:C3gYZ21DRF>#k9Lr"N9:VcPgrZ3WDo?ZlD:?Ep7PEf
%\'DG:s'F$Q3^IB.[7&"Di.JE9om]V-:[/1mhG>^e/$YWKmH>e(/@6p[B!'V@n$XaS?8(2R[(F$E9`FL$/+^E$#2bY$mq[nPqle4e
%UKk?[B6&@i\6*\!MX>;fgs:4JMh')-4oDkr:I,6\RGe)7?5#SZ[=03ZJ\GjRKACBc8:]-<b9&tE[eSoVn!!4onCrZSnrrMMr[mZ\
%_U"kC@5k_[O,#m"FirN\^YWkE5jK9gs"2-TR6p;J4D=@)T1n#I55+GVY_raSQQ:bOkU@%(&G2Tkro:a]&-;EQWri;C2]M^KTC%T$
%EI")Qr;r!fEruqb6Gh?_H9dDtJ<4>/'"N?gCN^WXIZ:5R[UBC!+.1.EUM^?Y_fIFsR12<HC>7$[?H.'N:ETU5D<'larM\?I>0f=1
%Q)h<qRcRe`Iou^]bbg%J*,-kk_4XZk^2DKu^bY=+j@OUQY1=LV@f1JU;5Pd$.&;>mMkb=eXO[VZD)VYY#O@endbh_T1eZrFCFG0/
%%J$f'CE9h?&>H3l3(Q3<;#!>D$"<8O/-Q"dd[32R-[($$l]-C`R!k(AQehL@]sYQm^mo_Z:kH=6X]K#Cp$GGgrt#Li_"\6/O2;Up
%me:KKNOl?To?WC2?tGrPim9chC;/NB$0^??gGM4tQ:7QsVS8&iT^SP35tB<hJE%G_GbEp1NrSd%0DN0;GeYt`06b%q6"dBDgA]_(
%/a'/$P?R*CXjV-3@7mSgQRC\KO*d;V:QB:AE]iZOj2-j)pd\KrK8&O)6?K#_he2]lf2l=8pd#_rQ2m9,`qQ1qBY8/lhRPQG3T+&L
%QJlc@=o&e\TAo;rcbiWcN>-U+ag#[%#P%Ae(cNn*&6BGE^HDfc_iO7u\?DISO'8=7_=@3=9Y"0J]Ie=hBlMaDP[!6eL;*FO<,TRj
%^h;P%P@I:Pmq6l#n.0o&-7>7aRkSl^rWBARK7p$e)cfB4k):@U2A$6/)]2qY)QMRW#Er&$<I;L++Q;pE`#/D(Fo-t"4B*6C%f^F<
%ZlA[EPOK1l(R+THJfDnFB<0!]76#?in<'#/``OU?;57bLIN^K:P+u?#DLk3e$77>i-:070J,?WklXbtlh&Z.51IphUj4B]940\u4
%DC>P8>Tg"6$'\K72P4R_/-7'g^Hk08ppX]cPihXU-%Rs!80'=e=4l]ZNCNlJ>OJ$5/&.DNgX*E5k;n>$FVX=J-OHo9Y9`NKHrDJq
%$E]P$.YX1-6Z^Z45#[CUKdkR[a4:#YYsd8o?RmLn\U^\nAB8P?W)>dHSSB2CQV1$2Q#.$2.ebIVR8X!Z>OL'X'+>BYokD)CSp0=9
%;"*#g/JC^a\D"GCQE^%$%1-!3kW9CPfQ#=&3(?7VK6q=DO/o;p*D9i2Q\TL&+TUk=S?NcWcE+ojn",kP5S-2Q$hXl'o]>Mu'>E2A
%/H<?8BYg%9^sd3"AC.N2;m6<4F5:_Z\4u(thPbU5/S\^,f(N;Gpe1O_s#2uVnE$s[XJL93[6s/bFd?k9UYH]b<e&Z#rUW[N[E;3]
%"UM&M.l0oDH*)O=hG6FsDE'4gdLc"o$9J0X*XQ\@To;+WA;X,rX\eMWK!n)5Bi1;Q3sLm_BhQN.a0grHA8:G\'LZE*=VeltB%<^9
%hpI3NGg;b8ljpZT",Mpd[E4rsV^=/Dl?kWkR^M3e;GPBJ>-V</4oiaSBUPRfdio97CGKnc>&VbY@fphjBoun$VPQ.`^9$tM5AFp)
%V:g)s1pu%mrAs_&P=b(;4&"8'Te4YQV6[Xj!c\qYPAOFhBTgdt&ANN4VD:T-*h5W/]2S$]_6Hcj1NClXakU<Od&kf@3I4A-Q7o!t
%@?t-(Y3,#ObOe;f%X[L,-/WT`g-#f0;Cn/!KE_17P7^nIe4qe=Mo]euLfm,hMob>$'A9pSaR0s7G,O.Opqi",m<\6t`-*Sm%ZA\O
%(.,VI3b/iV/OI'<BX\97`fdS4mJ^0S4)&91ga*ug#H8E=d<6+!r:u.XW#Wt1,ujTCg:+Ojh1nfa+M*LufAUtSc#;KMRR]TV>ALZs
%V"!;.!#k+_UbP"5l..nTEgj\=Ej])k>/Csf`D*7!<NjlM[o*c;.5r_Y,b9Oc\EUAV'%UW/a.T@l8E30:X/XL/&KA0D&JG)N1@VUN
%TAfMK<eaDIO?TO=^q/LSK&[QoF](:ojWUXIdgNP2XJU$712%0e9LKdF@5OPk=]gK&>&R^7/1(Gs:9E;)Ufq(ogM)dNDZ!N64,!ZX
%CV>2-RkfQ2/Z2%c,R;e_6p:)K,%.]1-JM<RKIOCqbu@>L#,?T29dZ`@W;W[DTs%Fp(pj$[KDo,NF'cQb+ob-o;CsefRE]j7r9gNE
%:ZX6QbCa-)?>aUe:=X1HJ8:MA9.=5S^?U2/EVVC.^St%/dAajHK?No:0C#n>8S$,8(.aQ8\o:P@"u_oRTULIe1lLF(MJFJ+iqDB;
%Xhb,LmVL?kfj#h:&6"P.](Q&JZdqpIHKWF3rgXUm'.]L)e"8-0R6mPEcPjoNgkbaI\c%r(2pF@2?L+35OI=SQ_.>/5HcV+.jM`22
%n(pE,EQVt"LE)/o@Lm`F<8e=-3CVq?Z%kFnH\/lN[^D7G[Oh-3s8/TCp5Kmc`f#9*`P1kOhfuDEHrUMfL<3Tb)ul8%j);NZGk-ME
%n1ZFN=KUKr[j`Y:pjoF?X=9ChTR.$.e0+r%C!9AYq:&l2'G3e4oQ8H\jkDBV"^5W)_oNKI9H>Xh[$-eh4la+leh*&JP&"Tm;H'sD
%O@A%),"&f[OSq@k0<[m#N8:ImZYlnrg&Q8&gShT]os=A3O*\E8lYgl\eW"a]gq%TkCQUY^Us9aTZiBFB=fPS>O[#>HZQt,:)^+8B
%e=2(if5F)0V^6On$?Bkjpa]o6ctGN&1ejZ=nSBZ1eR9tX&ePI-8ns(+V:^D2F,fc[ijpIqY"A0bhl[(<<;2HE5+#6%5ROJhPlF-8
%DtK0[?<.EfSUYk!%K@jYj$slAQUTnFOa-\o9>%2[$R]7[(5DB5Mo<d_nZk]uquP4]M3gZjAW_5*K>bt*QI>H*o9l!Ld\."mjuS-:
%m4PI7WMIJVVc^+VC"tqE17G(PRdUV7dTeO]lPETtTj_qL`D"bi/hX5mY"cGj(V$BH(n?$OfVnQ=bOnO"m0hr6_[:83NT9"VVqEba
%Mqab6fJoa0^b]mFIkhY.)r%m4`T_^)iq*oU]"#RjEJ)`i>X3S*?LXD@R(7LYl`+("i\a^^dL9EY,s?B@QH/`3iFQ3@K.gMsDqW!#
%Zs9)Mj/#pWh72QR(23Zac)_eKf^&K"fG&8bSE!6qY"sXdEUC^J%5LXZF7-6F8>-3eC%Pg+hpW7<1c2#u5,qP'5H`,%K_FYEYL^bE
%d&g;HDOf%4l=/bUO7IUB'g8n*[S@e/G*T*Af2!=Hb/Hi)61%FX;XaY!DIlcB2h._e\&@[2-$Ler0^!$gV5.a1Q;J4tD_>,=[4=I7
%.p:KON6]6\_R9(IHKXC)qlfqjdV\S]2t5FEWq.QYHURbBT$UeKl*n1NDb=OkY4VU.2JLaDJT+NNbJdnhW?7Fp_Y[L8Pl!9nVkpQ6
%FZTtLDEbbECZ64:e,+;d#i/`m\+::-$2lM`\$L%2k//WOpdDk;Oi7Xt=\Rd-:6<eB#(LWEHtG7PiWT):OPJguq>\5R\a*;S\i<!i
%0TNK4ct;)n/l%MSL2gIg+J3*&\2ZdgY`86i)s8r.r6K*me$$H!:@-;t,bMK4q(oU$Icf[O@PO2^ES<!GqW5_TG!/R4`Qq8CMl?Mu
%aKWt"c-KQB[c:-*]iq[Fq`^sd.V[29%CMfDD+B6Hae/YoU_(68ffr7E%C?>aQa#h*UjA;Xfm$[g[G$E7HG=LRL2Z&S't-3(2cA%h
%BK]p*1/Ss&>E_"hcs;Mj.cs'QMi=M3)tte59VuuN?<HbS\o?ekeh0)@]:pQfXs:PJ]DMN+[5QcSid+u&EF$5k5CXkpRVQU)n&SVE
%%[U_-V?e_brg&L-QXuTm3A:D*k@(:!qWIX:M/-0spCiS@[9Pe7YXsFN#tPa7#hMiib]sdd2U)i)H$#s6:?lFt2ji[%3))ANX(^oA
%lK_u9:tFKof"/hHGDc3W=e"B!q'=5Oc:)p)cD8PO'>\V8VB6JRVlWUMK3%)A0%J$c'!eU2Yqjp:b]Xe32Jk/^f3aq_:UN0866&*#
%I+0aWHDbK6^bCBrJ*g,U5Neog][uu.B0bT'n\J1!f99O:5/thWQ+Z2sNCANl:ZZ^r@ejY//H67cfBVHhs$Q7`&\`RhNN6AkKC?3>
%iUU=LbO;TBj_s6>^Tq`<LWS!2.ElMBDrhMkhA:m[o2b':Zf62beUG!YD#[&"nA0W^k1^F"q8SBZb0t7?R>)>h2Ea\1'LoU'`WWcK
%7n'o<Bp@(G0UJijHG=p.*%!;"MjdD!W^a[%/#Tn]Z;PR>T"!1e8Oh0C&LB*Zg1L"bRb_Ll2*H<:8gA5=b+Lb.Pge\s&rieX<kVM8
%S^q#EY.'*R="F"QWTM?:4"\n'NPEVcV[u%2n+u-`8k4tI:5bo)hRG"oHLr"A`+4Em[SQ.4r0]B4\Q*RF>"3uo&Mrk\[BA=\8h.;r
%f#-o?GVA+TCbdP>Viq:<P);03%i^"G:+Z7e-c`RhS_1*`2ekG0^iT9^g%aT2a!o;n>k\6j^Mj0iRLAP]9/.5umLQM3'S5q"?ZRYu
%YZPt)20\kb_klEu][f3'2q"L\f%ssS-2nE,YnSbQQE0[ERUisH3%\LI>/)7]19XQt+1rkCWmr!SDWe[gBV2-R#$biUhlcdfL#u%E
%Jq`>kBYK2_RsiO/>\e&ZJG`ENVL%p!C,[`L:IiWS/_t2tU5%,@B@TaE:7>Xb.2DogBa'\MD6D%Q9p7'[jSJj18+uceh`X_5g%?#%
%G(sW`c*];+Sm,i9EW+BLCkea460Gm$\=!.lo%2jOWAHHUqP@-BjScLV4mgj>Xj?M`;ouLEYGZciFg(gh\i2lq]4oCBig&(NXV1+4
%,E(/VV\$GYl`B7pi)g^0r,;!*B8@R,On#%XAGg(tAB7_Lr8&:c:\bk)mJ>hEeVg0C?aQUbmh8sH2c_Tg<]tLB@.?QYK8.>Q3WD&J
%M\gD?^[:7<[O6-()]*GRS7io*0aRcH9^gc$Ik9Hp3QLa]8$Q1G""g[4qWX`=5?_t\O%(A5WQmr3`mh]J7B+:#g@n%8`hHGmO#ZWe
%pOZ]6nEeK6b&2[FJm"S2l[!Y^&Z]3L=RCF*h/KOKfaT*'O>GoC.0$p$JDY`kkR<C-ofdbdihYi`UG;FDB9CT/8QRm]"rWCW1b:C#
%1E5r2gR;J[1_psg=dtgJ7UqS.R$WbdFe(9+WJHt3N5d`bMrK4;T0]qqib]Wd5>*BLEHiO3B]]-+q^T@K(!c-9l0(pS,2IXI#X(&-
%),]QqH9[:0I:%ndZZV7fgnon5([o=@ZjjbdCRRHZik5]*F\j9Q>+#+Zcf31VMg0.Pmk*P47D(R;nQlR+H4fVjI(XY4?fl09;q)mB
%!kqeCpejf8,2cZ.I#EMn&b%@R^.#gRa%52N"anqg](o=d/4.(=$2GiRW/k@.rcVRI^5RPKMqdh>ouePKU(VnEY+=faDKK/VZ2[Wp
%k,d#%]5Mfd;kE2K^A2H9`YN=U%kO#L='jK-_j2W$YY\[+S[dlES0>EQb<&-h1I(2P$MR9nW<GK+Y?nbogM!Q3CY%+KQ,[=(e%NP\
%1sYU'kckiP"H/g97GI<,i64gN]GR5#hp+o8ntMKESQJg>):ir73N6'!m,.#TP!Z84`k8)jB')$-%T7+QjNl#O<ip@DCXaiuE^lgb
%9T-ViMJ^8'Vf23i.9i9.^"6t_/%&ukeULonbb`EqQD(o)S"as9ku\i%?Y8Ao8:6q$0RZXT`9E"4XV#4&e>C<dc&[iV6-Qude9QED
%mIRBC`,+bK1b\m!`s]X[ak4h@q@q&'q-!C*q&I@9QD^6rCUO2<aIAdP)i\sI<K66;BF<:0g2/dtcp>pR77R]qm'kI=G4"PAd&iG.
%4dhIR[9E%NJ#)U7j/1;"W_m]basjK6X-=QgkNt)b)];AJ->o/1c0"_5RMugKe^S&b'P*``c;N=teS\Qd[+_W=/#Q8_1^@)]Z6\"]
%d<Ji*PoG4<s%Y:Ai#)+0h39Mp\""4*.9o_k`q81BLka$8Q>Ae9aJ.Ii2cGReb+HQ/)I1@pH7a"j]`s$]jZ6D9U`j>VdMIg6PZc/T
%VNS#`?gH>?*jWq2.Rapudeo#,'LgbMe=r`N^NhOsF'acf_R5nt>*Nf2F],?#frmiD>c1bi1rLq[;&6Pfrs`bMW(!,Z=D'r$b4Vi)
%8Ym#3hUGl0>*Lk^b_o!)W'qToXCn7C-'aG6r2RM,[4#aFR?pqR4*PE$Z)/ku>lM\,Rc[l#pPZ@U<Hp*-@fA!XR%K61UKC2'K55V1
%+^N.N8A9MAY%%#&eD$8NdA!JZ!RAmE5IKq@96X^Grjf0bM#=f!B,6Bmf+_MJ=05hR7@/T0$UqO$F:1MBMJalP-`l@!<]*d""Hs*P
%IaN'#6SElOBQ[=k\$;mcr8qAdpS.8?T*b>*>do48s1;.o_)skr[Jt!h?T;33+$]S<s5Zg+o?$_Hpu(-Rn,o:GpqjGsZ\0Fqm<bIV
%E\+Pn)*b2]4,mFnQ'HWOs6'mlr9mo/+U@L4edHoPp+u3SQSs>4!pNAQi&dWs+aai]DbG`h>=aet[WKF2],Yu=<7gU<`kS+^Vf)S4
%.jM.>o?>8$<i5^Hq!nDt(e1Y0K)9+e#L7o]*?h`9@)um(m["m#I_Wn@m@PLY^^aQ[0qfCCoYIhM)a8q@n6CYr1=m;c:Y048]"gsG
%n8HQQ<ru`k^j#h;)+j_P^]&/d161P@T6s9jLO&N3?A3:qCK&'_gHPB".I$W`,NKr`Ur(H)pj)R0=I/5uIlj7+BNfk&%@$.kr]cMA
%;;'ogro(]sV*JB/rnT\N2mB@_cVtZId*"mTU_VUK!Uc$bb'd[Sdd`b1i3L9c'8?_lL/f/`p#Sde)FnQA^X^SI)W`_qY]P8h0jQhH
%^=2?fs!W)<)\Ypp1r_0qqE5EK^#Yf,c`30ih+'\T7gRfM9+Ph:1hSoV,I@3g9G!]Yr"6;OZmus#M'2n.U7;-WU%ib">j3sp*N,Cm
%HMJgT`?q=AAp1(9q*2%sepjJs$eTV\KH06X%!qkqEsC.O*u32r?5_R%[%X.+dS&kTA)/,"54%gs`ohY"jkf6/1EbRrTZMP?HKG"%
%EG<V?g-Mjr\:W^>DeUC8iqG9(T/&o?'.HTKasKHlG\PY!Bj5_^ai$nI&eP1pcO*7(T:INj'C3OQK,L?hPg+B`I2+mmm63KFV:oY`
%A[e8jc2g7DoV%]C+\4V6p6At/2&f9nfX@3`UKQoLX5I:^#%YSX7cm`OV+=M+SC*cjOo!aKe7r!J`A^9LdWY"C@@5dW1Z`NSUg<Ch
%1DR"`bh/>I\?.-T,;3scbdJ2^m7+A@`272'g;qd(2N5c>Q&I:Uj\DqIl.,$i$sfMD.g'V9n!71k::Z:<5%175'q5.M28q9b':U>I
%n=7:N)X@f6^>/Q^mN'<bMjP8'1Afm2YL`YLb8f(3h9YFeli$BG]i"66]AUVn"qc)?k][70bX&ekYBB12+o3u"[9gI"0N]K/ih>PC
%hYEs;Q9RR:<U5:7n]b]61'uP\W<_;STT^f+qtmc:bQSU+cPX2)&^UF>K;EVSCf!<rAbOlL6"d8e+142-5UX</5Z]'On+uA+7f0":
%32gs(NF#;JQ/K/Y8XVUN>41!-^h]/k]"7Q'X'N8L"7ORIm0MqgRmtjqKNC8.XD6iH&."72BZJRMGKSJ$nArjpmp]C&HC]5/\6ZXB
%2a%#n?7%Vp\"f?4-ZFOsE7!jbFS.D-cg*job9+-0#BRId3PA.aDJ1AkcFhA8,Qd(.^RbIRb.TO)>"1ke+^WKZl1M[UMo\.e'3b-=
%FUW7'-!Q3KMWh*,)4+'p<;TO.N9D!b+!1Od\^J/sN<CVbkhWFbH_"=D0<X"4KlKdQ[e&s:XE1RYN!_PlG$2=X.r-1l\]F.Q#E=IE
%$?)RB&01K=1/St\)%LGA-fmNS?><Qa%:!X2C,"M^LfsoZ[I.?EdFS6p#bu)R>(,SSl7Oe'>nX0f+*8t_",j6S#B6l:l:Ri.!DSDB
%NIQRY4Tjsr8Ol:O_mYlS=MTL^Q$0W?X,^UjB'i%!TDW"kIL.^S.D<Dr(ru"u&*m6.(;"U&hqBI2PBsuH7O42O1D1,&IHR\WOZgNl
%e36%?ZIc&Bb,+KpjmGQUUqIUt:9sa_Y6M=)Mq2!/,7deC=j>rLs1HprU48qPV>7UO8+u_D0N#5[M(JB2G.08S4*aVTT!rHIc$]H1
%)"#duUNSL=c$7?jn#0IXp9L28SD::&C.5^5N11,gV1l4!'gK7jTN.E0#5gKK/$8'&5CRWh_<!h_N*e#,T4LK?@<(+aDWIkUfML#Z
%c^1m/hjpk-5)u*fB[Kb5i%MG>mEQFL5i[$c3geEk=.@^6d_<9r)A07uYr*RM&C;%ibCgYu(9!<YS!g=4<D<oA6OqVUVIq,H5IU>S
%9tMWE,MbE1E^ZCWd1%Xf';Q4DJKHf"d-r05gRab4[;KhJNt$Xi]\L95(%AG'gJM$2C6HXa'^)u\XkHo<\jGs#p"':WN;?bBGmX2!
%4"tQVdoIPk_Fa2GnutirdHR72@rjI:-#RAZWYB3^CS\@92"*pB2+?O0GU;S`P_hthk5G"0kC.^:,UVPG)22$;jmJDnL^haqJ7W$S
%:CnaegOV&RhE&>Bn*o8k.lC^.NGau?'=T1qX0klJ>0UmMGWed'_6)qQqi.ZD)^@rJc*3M#U>!NUO@bFp->Dft<k?g4H=DkS-i5-*
%_t,A_`cccdDm.[ZfVhlN['!Yugo/]#BE]NulT&iaDU]j3-8muY887fL"ZrB>mV/3Na#9K3Y<G72Yo/?rkIfXLc\,otDB0pZ8aE,!
%k[l(.qP6uk>YJh4/LeV6=1X^EFJ>C^5.':;>ioW3DWMpdgM,B153+\Q-Ydn#d\9fd=fqA^B.]=0@kCNTMbCab:S_=&e=]gY0h'tq
%?ob]OI\$W`>d!U_nCdEdn'aHA(Hd_#S_FUd+p1Xudk5,Akk,l5:#\G!oT/GWRs-nnSB6L?;cbg<:0ZtfkYrpQarH=Db"u[jH`Y3j
%rgK96E()[tZt3\cBtWDV<qRf,NJSE'C1p_YX7>95VP1[A>Ag'h"NRR4@4!OXLnR64aUj*!#KMWE0WIAE'H(e]_[[!XM/.0"I0;jI
%QUi;1Sm9a2?oXSMgoRV1Q^gJ5E4\u4KZtn]ChCd;l\]hq3ScH#,XD?CAcUGX^:*hemAEn(JCW<u2:r)q[G.b@kZ:4<Z,Qn\<;0Ji
%WS"q/;=B&+DdB1*G9U>VBpge(=oG^UZ3P97a_3Kl-fYp2If803`dY%:>,rpC0qHT*Fsa\bfu7G?fY$">Wr2SC^b#:\#uc\k/jDc2
%pT%6UJH!jniQi%SO/3`]Vpj_DHiQZ^3LhKR1O.].'>eO'3-Vj&Lc1IMDX(&p>`Xh_psMWeM(J(.]0)qjo-sogO@TC!1We9/LH4F#
%1B((U07hGU\J\hOJPciYA/VdGb;&GQC5+%g>g>!;QC;*Hli0K1U1#B&/)G#V[GsYkVV\%X0"S-lPff0[>j0aHY0/_.)isBE`#gM9
%f4YR@U'##6ebTs)d5(T)AC%=c,DBEMdP-&(R:G93DJU'0Hk'ZQg8Ym1B//!4"OSbV\SD!EQLR,TU/9'Qh_`%hPNTP-hhRgeIMgi7
%IRYJm`LMmgZA?$c;k2#t.kq&28RpRT]VE-8lP^cmmt&3?N8I5sq%JXDKJ<gbmhh8I$H4!U!0s"2MA`R7Cl"3hl'//jF=`D/NpYM>
%TCF-7kPc)-X=$to:\9HQaG?lD=IN^'U1Q8,bu4m;UD"B$=2nXZ)\ZjB-,bT\7nm_JUc^#gFPW[?UIig2'm4(*=?qeX<h[NH@MD5Z
%7eGp;Mn_D,&&T&qb*+i`1s&fj]f@g0R/5iET<V.dM8h_aH\e"6U"N)'"DYjQ6LhQ^lW(OhcD9hI1c<oJhL`JYHdduK_1(jlq5<c)
%@bpg)]@F'SGMCAGU&A&NX+<cGL9X>2TA-FdpGd/EWs`miYgqXoI2UP,qs?j99!_cgq9hYNFmI<8jmL)le(M4t9<b9`^q]_-VK`W(
%T%lp7a&V!$`qX\[7LnRCR8\-)nMhU<US$(@eZ/qeEi])#B-utTgT[W[jp>?4SLbaPa[1V$EM^So%Sjh;(Yc(k!G4FA%#!\,S9&d9
%BV)TRonI(qfR1&TMI./r"L`qIr)^LWER_^;q^,K0CB$"il*aC1rDNI[>1XV[8oBT[?GjHP5+&KFk/sOGGn?5=UN)Q,j2C\B;qZZ8
%R$;9PYX28O$[Ss_kH*6fP`[;LasG&be^Y%RkdcfjIF[-#Zf<G%&+>s%%-!uop5ULV.qR,GcRfaX`/NT7*5D8=KJnfXjkHo;R>Lo'
%<(h34lmcunBA\[4rOFYl-e1^lU't"l:b'HpamiA.s0+CQ=/^>N%A;\/)1fmE<`dt&V+LAa'l[dd]7e!B\$6i]Lc`NI7)e.c$rosd
%a=,Ba2Z(XR5fpQ'T3OgSU%K%/?1j0)6+H;:_N(6l9m]mee+M2dQ0Gp(1ga-YY@K.Sg"Y6&RsOJ*X2f4:,H=Ke'hXEZY+'$O?Wp*I
%W>f-SH=&YJRI,67po:kdm$Cr,Ed*+"B="XBmW<1W=sfcn#p,^82LVOg"=@q\bjQpJVfSDr^%EoI]>JNP&^=c.1'i0>gu3;7HHf!S
%__Z*Ho21rF#:H2[QXL7@e%V6:'Nt)aL(aA23HcOAdHbEqm6N")3lSb`]#`f0"d`bd&'I1PcNfGY*E5OH-p=_')D:6tdDpY@S4<'Y
%_bCYGd2(itG$WR]43[0\"gS,M<U$fP-26rQ4!,P\^3t6MU\o#kWH77alLn8&[s>]:f"1CYG[k=\DSBH&p255\TBpg3f!euS5'lW\
%?8$`<qg>G+W;+=Pqg#Ck>kaOqoa9R`B.MR#Xc5!eqcfO?S_dE9RCrgBCi,DSFEOX^rU$p=Y=`#gDXB,bJ,#s?aCan4NJpl;^4uaf
%6?-_qs0162I/CSDITTmt2;=rKn?7?@i/r5!:b9,chempZgjKRJ'Mbd.-Y%M8m>%V=Ro^[rjc8ob2j]S?[TidE[<YXI]X?V>2BNW6
%Q3P=ih<HEt6i8E_"he)!rVY7(DJV2eXe0L'p[dSI#Edrcf/n\D."1",I!kZ?G6CJ2nmB\V[,KK)mtJI?hMppQi7mYSiTdN\,OqpA
%*PaAf\)dj[SVhg&S3M4Y2`>_McCG3p035eNfZN*"?-Ln)pE.(oHL#sR;CPu2Vtu%:e'^5e/Zc@chlYf8\mGF-[(>'qH@0qEqr#pG
%=$""c*=96b[INnEJRQ3N2kRR"XifJ^K87c3f)4[.LNVK]l^^)IDIlU+\6'PEQ^,G:hAbCCJ%+RTFfakS4hk$P8J]Vo0!DG-[N#3p
%PA,8K>2%-fD;KTNZP#mC:StAjdC](mcaUYOfR-Wr\8IqoqFpiOC+THXO1bA!E*>GODnT4(AC[IBMgO<\'$rSfOsN<LH<s](Dr)r"
%GjqDb_g(sq([?^C^bF?]brqEmGjqZAWBP15h0I$-o.)n0\MsE!]a#2Jc?f!DdE[VTG^T3]FnGCdk!o$uM_?oV&]W2TbAF56JQCN$
%,8<>^.#?u?#M?'=&kq07/fYP:_;mh(]aru/9(&YIm6T]QmFh6)Er#.jD=?QYX3E#Gj%$YTo1D6VJ%P86G@Wc`!]g;PqciPdou#(e
%YE&o#QWSJGde`&LmO`*_]2/'p]l+]^%sP%l;WtT;n%kc')fL"fY\+ebk?'ikZgGJR>28CdcX4<Mcegp`=UJ]QlbO"d?[8m3%_iEn
%1J,1"HHdq2>jMfPfm*"*YZr_9`4#><Y/<K9<h2<ujINZe2NIVmF%9%'K2HLrc)/='4o=]Z2\:.c3ph:&Sf;:li#o*9Qg]%ajj1Vm
%%m)/ik5@WKgKh(!q[YV09UI%:4%d,qj/7K>DKGJd&XVjjCgle%?WL?\B/M[HhL(W9q.9GK0n9$VYf*l3C,'(4^*cW9Afc-))rAKA
%ET^ZCo^KclPG;=mLQI$p!0>jW_X>B@%E<_%M9<iC:=nC38+@U;=+O-trS>cDP;%BgiP$/gai7YjI@@A6l5lqMeW9V$]j#hZ@_+I4
%lZ\f%V@W*gO?J*_nEG_+HIT8sT[OnUG,]S5[sqY"jpo-i/ZdJE/f2'Ne%8DggsP`eg")Xf]lJ*?GkDQ$fmI2pI#9o3fi`%(Y`!_<
%oli+[K5d`/nbnIhJJLkQb\I""a1EYEPn3?G%N:o8B"M.+-_Lh8])KPArG:oTqnj0X@q]u?i-=S/^[j3fqL0\&-KP/s_J/H+Q\7pi
%-l.m4h)HcK5QS?/YdEK5d'm0]Ye`cFnedGF#ID"rhH;k=49S-fH4*CDh<bH.*dS<ERlam.C?=dS=&gO6"u\Ik4F?d4[CEaln'SU4
%c.W%2[m,2Q[C"b7C1VD!5/mtQj,*MJe(o=kZKCU?H%1AE]EY?aprL!ej)tns4go)Q`Q,\th*846h>UHJDs8@IFgcVs_]Up7J&"EP
%0n*#jHmruTDn4,3f*d8eLHe4`s(h[O[HJWsm!\fp(%h&C06Zr`*'Eq@>HBC=EThQ3j`M&f!Sj7g+aAXNN'?bcKHR%4=F0Us^K=Wf
%\V9uGU&hO.8(8K$F\!`Fhel=*(^:pA7^`4to>0-l('&95E0s!<j:r,6++Lq-"JjrFpc)Xk)fO[@04QV'N81-SBQ*B%lA^$5^L+(T
%N&^Q&O&^G@KYRjR)DE3SLYdkX+?\nFkcmi!-7/LK7,gdi?On6tdmkY@5P4;kgdI(9&:KlXLGN51DcrA;1$UM@SN6c']k9q$42bRs
%%ji`g6L%*Oc<Y<V_sl]>-1sRkZj8jC*-I@(Bn]t,hgK5XO-Os[74Y6IN2/9+Z'7G0Q^4M'jMk:s3$UO;Oi[OO)Mo8$b[r.&`?^Wh
%'?uZ\17:M9DodjR8MN1"">`=O2"M=`.[%Zl=`>8W#>!fc,Rdn>g3KbfJ5I.2<RG9&PgErAd@^MQ?U(5DN6(E#%uJ1d2l/,&c9D6S
%.1eB,0X1aL'(Le)!PQl2`&t\+aB:&sV_OBr@QA'-N[/</$Jn@sVPt)&$gHbuPr;YRdI\$cW8F:K7=T&(E:94`]ucjtFnt0]?,g;@
%Qttdn:=#M_$iI(^AC5EfDk=A0(NH^l[!N2o+dY@0JJu1)g+4<>O7$q'=Sk#um(@W<7%;o\gTeqSJVW3r$jUrf;[R$e`r[XIJItP4
%&E9a'gYQ4T;=AoQ(]D0(KU0CCTiB5r(Up#7gl`rI!<k;Gql/]GXKJ))KkHI]]B1g%a0j\glgT&bYeSfFGu.[K:4CrJ@>\:J;Fa5C
%#P[5.O[n($Gk=/n1;CLE3J#EXD]idaB/)uYi=Pf(Q.H6T&U\nN:jC^-s)hQg3Vhb-?LHM$=!&,oYEpkbHS9/?jeA'RD=B)?AYVdD
%4"erIcR/5@dmcCNS+",k>^KL2IFUDaX7(N@.GafkkLdSTDgiZ5hT17?`,DW,2_Ct%*9RL^j^&]1hqfF;lef@_NRR%<)0k08"n:U#
%='V?r6+)[XY/ZKlo!o8MT1=8*-ZK\+P;X-OPrOT^-=&$qiumf>PfJ#J3*X)jQq)D_4SfEajNG12o*=aUC\:1.f@>6LT.h[P=d98a
%/mn]jMfJZdi8";FRK=>V\V3V9&duDd:]h@@JRFkm.-Sr$QM>\Rlp#3sM5->HW+&G7GYrgR#El(tMI2DdKn\@Wros-q]cA&7R_A#N
%+7AmRNI.;;79+Z`YHJ;2Y9/kW#&@&kiMB)m2-RnZ2;"8?3u@Ml0$hokjqkd[^432ndi*VAQbm?",-\UuHgP>$=%Z8t?gVb42=I"f
%<*j&'IOY$V`Sm:qiEfN6&^,S!NeIO_0f[jq9$^6nEGRk00!RWGgrc7=]!;7mdI-P0QESV;R)A9sm>L-<+:d'hN>M%E-AfHQ?e>m-
%ckflYUD/Hj?>VSO1c6qJk8u>&eGRP;.Z>8erQ:i,$LVG34a?n%r*>A&jDSltH[c\QhX_[X]$Pcc%X4u2?u@$/mB+u!_K[+C/e@:e
%$Jm4]nbBaUTU?9sJUW;]^u.,:Nd<e-*HABmnbR.SaRRrhEHC/^Yl?;!oXarA%Dh2PHG_4]g2[1g-``B4*_sG&NFMeW1;,65G0r''
%]>B(]h+Dj"X#ON*gKs;CiP_i=`lja6c.J:t+G23?lsoSBIUf-TO<<foO5>B#5MG36aU-16Wr.OtDol,'gSNqOc-iMB6M@(`]!_Os
%gI5YZNkCk#<aI(25m17NhqRh@g:N=rc-j4K-1]c8mE8SlC/6"_>Bm*rl.^t+NPE0_I/-;[I$#65p</$Y!I0%>gNdbq4#QSiZ1O_H
%H+.^?%kuhQrq:\ej7LI8g"-#3if_\.RflJIKI:<I2cnj_:T/?PR&bD]nkMXI.kl`#2@?k;b7ZfPhQ7Em)[+oLB1L9d`[LV#)PnZ4
%IZJF9**]PkL!ug6l-;ouq&h&oEZ]KTqi,qi?Be'bSh45uFq&Bd]sSYpE^urX>`9h3W'#\2k42Ps2&t]N&(WqJf=qHd0_')MRk>3j
%Vh]%11o:*-Z[@()4Pi&))]mOYoXtR[I!,U[pAK!-(4V*<2TQ%LS[5DBnn(>,@&AROgYZ(jbO+fUckk];ZtIE"7.qBNI^-K?BNh;j
%2_QdIG`UE_^>IZ.KOU0*eWee`_5m;.X.-1lX!ce[RddoaYZe9J%sNs-RWjlU.[7nq,IeIjp<*.+f)!Qk%4+;4fo3ubD72R.]__tm
%VslfmE4#:d83hEe>J5F_iUbpWH?#qN4ndb"k$R3,4H;No,o3!Cb/_A*j^<SmI;ARIB)g&V)dl7==2j:!O%\Gq:W:'=Nh^^j_^pVu
%1N2=,mG)F7m+,h$?ghOsi$[(DO7[U!CSTg9gq7iXkno,%F6@*$6RTFt_MA@cGA\K<O)Njj8/d;3n7h(/[sj#DWM>F0mI-Q]hd9]>
%rkS>s4$'ro,9\_$pS*+0.`\DsUVt;"U?52Cdj9V:jAn"-q[DoQf&"#J@HC$L=\m$r]ZBI[jo"W+/9JXE2hB1iCKqNneY*_HL,-bH
%pJtKK8!2R"d"*n9n\s)AUX%W]7a&A!VN9I)`SLOBD>4"Rf2!H:Epo$`<Der&=8@?&Ng@#D[Mp$00-E1+Bq#LWgM3L3I#@aR-!814
%/I3F^KQ.7_,.R.Ec.]l*qu,<VpS)CVq;JXreO$Y]Xs@sj#,V@ji[i[#XHM=Fc_[mWUTGBa]anGV^QD8!T/I$(pZkI\l"bLLQts'H
%;HA!4DJ4N?rC)2&;rQE9br'\&lrStC`>rs0>[5Sqgsf:!Fr:_)d@0g6R!Z4-/Ti?+7[4oc,MK*$Ih*Cgq#D.F[d\,%Aq"D2D6=<@
%h\Wc'r\7)ol_Jdcrec4cpGG,Hg9?1!YHSic#I.o/Z-WC1HQ7S48,a=<+h+j97U^0KQhQrZnGLan>K+JYo>BQc`s"Wt[W]+@Ck$Ea
%7B'N:(?jEDU92P-Is<K9K:aMqS#b4h@tqfHGBP_(r<\qZ328"kej[kihL</EgcP=j$:Q4`ELAG[\+5+4!>b4jqb)Z(/8a/9:62?7
%&Og^6Bb^a9B=[a3bPMuW709#b[6mU\MT)0Krb*80,Ah,PI+a5EiU/'%4I1.T#9YrA"/C:Z<;[.KY]ZF?'Xdc%D*9O_?_20S_Y_DY
%Bc$6q>OfKdEgIosfP8bKl:*A,]M[F@hUC)uTJ2M2G\e0T<c3p(ogeCoVg;NOI^U2adnK?/lI.?_U-[)l8`u=J9&$t'[b\S6Hnub@
%XX>-s'OuJW_n:+MbPoM^Qi">2_/"DI"-MEV?F/Jj,IZFHTWiIan;:SF085a>"Y\Id&+\&IV-E!C>WWiifNtWFS@"oi%^h5G:#,C)
%cJ-Z,jfa"i\!morN3V&u6h:#k4.,HI;3ioc<P80IQk=Ad^mlI`>X#^u*B`o+(PX:8f"Ls`G\>C&D7bF;#Y#pZ2aV_'dTd8ISS!'a
%gY]a4D\_uGYOGg7Kr<,;7GQkXj1V[%UYI,UBr?GnmtMm0XC#0MkM.Nt[sP05d^PBdFoSt')EM5>$<&rL*V?JIO1UnA<X-&cQ)"!g
%?VUgEY@$WC8t$EY$@FP(l!\EjILLt)(!k*+Z7\=m\TkSg35*eOjn58=*u9nVfem9,qNmI'R$$6RJ,RQC6epUG0K_;>]p8aqJm6O2
%GOMt-nb*h)*k>[ff>l#>nFcLtn$[Q:hVB_FHi!PbTsjdYAn'3&\mVj?4.o//Xa04[0CP]bQ5up-+Tu1KSeR7_T3$qTGAB^j4iZ,C
%dm:l8=R3*>o)Ju"g"lT<*.?O$3Qf#eSB3kc=Hg]BCrk^o<#9=%2(^mH,IFeG5QA7h]pRR3lE!5=%GJp'U??q@iBa0#04,F]f@MMO
%VR'4Uq/EpSK-HseRagU6f)B(ibuHb?XCcB[iaeC@fHY>7K7EOda]br'aO+nk.r[lDXqlnsgiK]u8,'GF2E"X%c][LQEh-j9mg]Rm
%e[R^fdI4-*g[\ZjD5XsO3&=O3qY'-=@^BP$leFe<o[S<\rSBso)jIZp:2f%G/FBNdhS'#OgWatUQhU^gq,8<*]`5?Xnud-9bO3cA
%h=ns\YG<kIATS7E<QPML)3nHS#TA-!Gg#EeHL_o#U;rq2T7,TTj8E'&I?^a+n+D-P%@6AHQ/[s/L?SKa_+N\NNDjW"E<iVDpZD?e
%Nf6AGWT:6if(kt`kJLH'E8(<hJ.bRd'AlFRD[2Y-52%#f4(!$S526MY,(N)lGBYNhRpUc6:Rn3,=a@SU4C3<>Ses0Hk\-kW@`Q`"
%^?3beMg'/6T8"6<8&sB/[D2IeY__CPiH+tr/RuL=<NuJ0r8r8uIj3No"ci-Ein`FeiY/[X;;;9deD&a2_UAb!UcEOlIs\)6Z;SZ?
%k-9LqDr/=`5=R;D1Q`g[lu-`g=WQR`o):@3VH&Ghf2f/B,M15kMD9_<OgCS4f\6,uHJ<B**JqYrZd3g_Yd(U5HNUsd?\O29hZSNE
%0'Z4%c>KTp='fHVg^16O_t0JNcb-%'pE/am)lq_/kH/LpG'N_h$hup%b:U1l^4,,&h44fF/)L`cmF;u?I!Hrd?U29N]EuEil]YUJ
%[k8!Ms#l8*%?jeO"hIKSka6?LI$D6ADFM$2/ZV5IG'mWCGP)Qq64rYgC3/RU-[3gT?^TFIO&f'qD]0R@2q&DRh$K5?QgoeY3a'Ah
%/JID,BDAYPAqV18kUfpTM9s\m^]&/^JZ\BP8hI&gb]WgCDUj6M=3.IUFB`@JFUX7:8!bnRP/m@k0RC@b]>+@<IfoO3^W.ql8_X[\
%RB0s)^)QQ3)$IC+n*p`9-_qQM\^Cfeor9reDl7kN)ddj($</mX5O_j#:fD6cjtB;U`)"2kVjGf7$-W1n$%0\=[VY2`7#;S1*`F7L
%cO00lA@Cr!I$n1="::,;;$/h%R!%>:#*LnB,#F6Q(f9j4Bsb'#W/l4^Ss=F,k,M11AS40Po*kia.,35n;<-*go;VNL3ME*I[b3ET
%/GrlZ5nJdh:If_^8$BeYN)_&W.N+["N\eo8X$e(F?5i2S(&F5+"k)M3LFG/GTGVJ:LHd'&_99Eu@iG[u"togl#gZq@I]tZ_<smG%
%d1][0f:FFNXpkaMP_:3>@mKn,dV*"PLDL^[/.Bef&se44'06FC)ZrtKQ:CaD1&UtNWlA;!<jZFn+j-)[@Rk?E'Wr2/Dp,Fg,jiqn
%!h5j[EqkoPoVOpE8CnBX5):r_?\[7\"#`"M:_*]^F8QGuC_sGZJ\3*j&>1*@NWI<&li6<JAd->($nWXPbt?qd!t%04L+k@%+9kAH
%6Tmn8f)m$/\D3hcFX.eU@h8WCNfB\;)\'q7I1bT[>%4KHM&L+_64]4^&N9HiI,p\0RDQ`<cO!k+[)BU2$T:[&QVAkjD>RYZ$(S*(
%KYnoK!dXk"fg,B<"BbfcinB\TTJ2lA_lW<R[K/gY%9hX+_ZVE!o),S@_LN+EBAI&+oc51%(^,p(o+u!ICc!Q$jCuOiY_9fJ5RfU'
%TZ9TT#atTm/h.p[]SBfaPDkmEPVa%M#GsoCIKi*rjTl&^cNe4e@O)'?)'Bc2eHXeld#Baof;e5r;@X*`BGZbu:`=s'+H6j'(dTGR
%=6Qs?8O0+j\J\lg!/653N/WA8Hpr91@#7HUoI6HL"?f!_7%!&Unk_&"!<$K6#_6p">`rA+$L0M@?ml#+?_M&M7HVIGq3D?'V;d*_
%oRm5r&Q#tg((07dnCquB!=XcN"FH&W+^,ai#RR.W5r.L"6T5Zg&CT@PBSJp_5m[N";KZnL&<3,#b:.%s)i/;1*Z'3TMT>G3@O7_@
%9^E1>5cbq0$.S;IZMan3QNA^)J_k&K`PiPrYi69l"F2oi,s=d37+gSr=Tnui?/H!3O"o.J_T`pM!6>\!5@\)r6$]>'@BQ:ML+3fn
%e6mqN,RGZ2nmhL:%(>+&h\NS(rG3$K,bmr0kCZSS8<Q_7ZYR)[E?pqa%7:"#M_G9p`.4-jlDsT]*s[m,MF*Ad!"gud7g0(d$\]\d
%*]4W?Pp?'D2$e^P4c$sEKCV^-_H]H$$tTd@VdhVQ@i->B9R\N/RCtfJ+!8=jT-aNAR=tAWoEbND@>j3AX$I<;Z"sMoH;MER(63;u
%;%F!f#-^?%."WR4nVeWS+MoDMcRPkH_<hhcmP0IM6Ls/O&-+^Q8;)s,jbYmL\-A6)W9D^GL]r))'0pg'a7,*lHN3X@-Z9PdTB,71
%)t>F"45R4f_5C^C;b%][Pali"YVPoL6+Z#dd&;`JfRB5TF@dX+,S/Du"aJVf_6G$(+_6#[H`fTq"*p^ag+#uKNh$p%-A*@,L#mkS
%jEX%p!+2B^*Z.%I)V_;^<B)`VB3A=JA+>=>#)m:^nbhlp`Y2t@-:7gm"$A%M:CW"QZ5/6KUEj9E8c(8Ve3dqd^PqF8(\qfsIW`b&
%EPV2O*^srP'o3AfI6Yr+mtf9n\fl_9#dQTpK0hI8-5;c"X-C6t"\T\!8&//Eqd%%#<ZjY)U*]@")Q=QAL'Z!-Agq1;nHkB_BK"kj
%+dhhsk8Ao>+GC:#NA2+UQ*=5K&_$t*USAh=!>2*i>%lP4>Vo!>8qja/'$[p'M.R3NH,Fj9X!,8=ZjGg*/qp.+4rmZ:a=eAk:f(9C
%`9ttuIh4jGcN"di'M8R`Y*5j#ZNA+tEto]r#ic6uX4F/&kck6kK08Y3WKj\-orNgs8WqO/!J?:d02Sf&,pKc$iQrF@WMnI(K2B_p
%3`+_D5)CF**X[_m81A!BBq*MJ(s[_8.LUj@!E8H.!\&6ENAmOBH%^\ZqAZ-s8L=Z$!;:I:.\@QRAB>1Ld"!TKZDA;'O!d>K#;JIN
%Rito9?TYWM6jXQcFFt]GN.EK]\h$M^)%BK\U_)/)')Qm164GgJTE[,:N(e[O(R::bZNYoKk@'+\"&0SB"=GpPT/'C"Ek"`nM-,%j
%R"jOS"dEORWD_(gM`'!p;NQ$SlR"k<+:\>G&;t$"`m2rp4H<0]P/jF:N(T5lSN2K4MT*Aa.a1OWW$]oZ8Blrf53C,OKW.>rP.5,>
%ZA4`L7sauUIK7P#)oYr",hjWoN(ChH7oSIE[,sXnJtIQD#>CeT2X=%@$Cb&/mjO:XJ]^:'!&c;8Kj^kFJ\?X($0*`-9nmi,&FKrt
%Z62aeSH;&LWA4u$6X:"lP`1<$_(iXME>;D(8_OH4F+(##aF<=ZRSP<<6LN)64tiZS=t<\8ba(Q6Gp/POo=F/Qm9HJCBHFMo\'rCn
%Ip+5:p)V8D$fZ/u(CI[u2Qi)@k#l-ph*l1?2Ak!QkVZp`M*+4_"V\r*i</'`A=3`kTEJ7WcOYb5QjZ4>V!IN6J`fV,`]R<W_$Xll
%4kkr5Kt4_3OIDrcHJeIEc$GkV$m\A_?_BeLSjc=L;BtCk@kI2/?1:T+)M1G60mo2l*^]YMac%C-k5r<N0XH-[oBu#-T@pmm^SmF5
%QGOP,B3fbT"2X?/d/[C2c@uD#jf*f/U/T?&IXXE/m.IBslnV\c!,S>+=W.+WQIEg_bsBZDaFM0A,TFt@6ii:@/nVjQC_7:J"oBH6
%&5XU9,N["_HqW6.MP2=B"ThV?n`'ZPbeOP01!g(I0oJ<N0l]?p\=j@\[fQTP#Qfu;'I_muN.M]B5rYjW$p?6@#YKOTH9W+c&]jY_
%jC+>s!YI>pL;3ga1^#I3@\aIXEG7H:Z7n9J+O%$/[Y6_2,\q'BJpQ^%EgtJ4!Wpmp6%IaF=O>S($6aY:`DE:t2k1-l_-i"2Q7:F#
%bid'c?`F$R?8@#er3ueD5<6ZElnk-j^?mA0K=6!36s1cb^bc;LLCf#n'*<`:#qh\O(e+eq$r)BA6Hg(`@DNsMl*i9Qf7>f;H[eVM
%D6T;R*lcRCc""p;L'"Wocsl:6&dQ<hLEsDa\"W+tcI59.l4#>rdF!FsFdHhZY]bI^)DTX=oF6PM"L2(5_;(^n-ZR0TQ<'F_ZP!Zs
%&/Kl!#E!m7CQMRNMj,ba/j<6^SfD'a/hT?$=AXQ^W#+L]\@c.Dj8Kj]d&!_4TC+/6Q'%@0a.\!'_\q(''iKnjQtg'8X#UT2>ZeV:
%9EW=6F5g=\X'BA&T$eaXm;5M^88\_,(5,eYh'G<CDM8P+L/L31KqX`(-flh+R2B"Ve@6F5W*r@heD1DD^NI\YrZs$CgDf-"/d?Fe
%%!2O2"k#-id\)u"J_?.<jI4mN5W!B&:RBT637=tO:YZ1q';H0_a\1G<-6VSeK[Sc$8PE>epo7q`;ecUeM\7AC0pjWt%MgsI_o%WD
%:b];n:da!'DPB3+7,t:[2,oKsd@D%4@pDAV)*oXt0IA%0DM6k2`D9Df'2TI@(u7a@R'%UKN9N:U.5&TQR@m))%4K>^A$QbZ%cV&@
%=9V9:1N"!B&bS%KmB!A^8K.[tn^>2Y*e(MEa4ptTbBHq&+5LG\OWFlee,@2_rV@!he>(1NRi!%]rN)"7NeNnU!Q2VL@bO'3:?D"?
%jPk8E<^-`TGaQ#F0\fmsap<<d2Z`nd]UV[+lEPKqCK*&,EA.6PPoa_HYtuZc*pun3qB&5=Wrc:YiN7+1QbZm?gOu_e&-rbO,?@6p
%UZ*ZlPBk&BUSpE^eqSrOcN][o()e)W+/7c:7*p]K47H?-kVJl$cpppsC'QU=naLOR0hL.+(Fgo8qt'@3.S++6L'A%0H)G?"]8S90
%W%WllR8p?LKLq+h)9i(Gr8ij`#\C6k`KsUb4;l&HYf%rAbuBFdG1U6m6U>]]/5NcF%"]T`E+C^0=g\FqA:5[._-.euQ(\eCXP.>R
%I$"h(YQT`i_ih<Udj-+O*>(TT(ib>o'Ds2>^j:[H=Z9<p3sJ"L&VeSmVjE("CPKL-AKp%t&El@-q5Z48614\>6VOqD,12qfdN4_]
%<N_bCST<Z4EFVej6ni?mP7_pr6LSi`En11d%$H:,De>ZC4ZJ'H_ppO[&3#R#'R+2A[*N;MQ#gP\Vd)3&gt:4W#hk,i0c<i4,P9:X
%&k_QWrOc'Bpk=0)KBbn]+,56#%\g<3eA)i;!=)R3N$[`L/(j&)ct`9QmbOtHf3X%LH=2k,^B\GhaA4L?<5e"j2P#VE9N*kkW]DPf
%lh)(MZD;f?b$V/5`O\1Y6<k0>6U@Pq;O+e<?C!D,@tFLPdb%l!M7rD.XrSPTXk6k]%QkfbN%gQ_;;$b[Q4d#u=2M@i+$/gu4OiT2
%fFS8=5-P>X!?N1%CQT1)iV$<FO+P<u@:N"S)9BT_iY7h"BR<jATLPfi%0'5(m[uD>f;R]j4up:6]n@rATd+FJD?E0K@(G>XR&04'
%hY[kuA#C^=pc=_Z8d<`-i&+&d\*,APPq\jbFeEWNHHc-"Xg/+]*%Ou2f+jN4ENl`98oiHY1*@K$&-rAP5&^V//-$&f/Dnhj.eNO6
%/GUT7#?4jajZ/\.kPYqHd_X0p!IdU2RSlFj@h>\%3+;/_G?ic%HI4#pK.ni"EDW87?Tf>P7L0>(5O!d@92_>k\lZO5L4Q]>:]pqS
%`TL>(:BdQXEPW&-#gIt?PnE5%Kk+1;b*Uo/_&Z!qi(9]jVVZ^WNl&`CB6+LbHI*q1\;Q0.-:ilN;J=6.d#abWJ@^mSCcLA,a\XCS
%"kNBV6_PJr/C>2kO&*0G(nJ1ND/6f#NE7im([q_F,2:Mu&D%@8W+>'&Tg!Bf&JTjPL-k)jFFl3Ga!L/&,KE/cGm9'a%T<J9SS/:h
%Ycl<XK=NlCJ[;:L*BG$_SnLq'l<,&0*C5]^O4kc%+%!=f%#UEB7:<(AZ[Jg.:nZ1@=QD_/WU0s3`=Oj3Jd>!9^^YHE`0(OLI,=p(
%psII94+aIUT!XT>#5LroE-,i%3:,BCUP*a>ZZt2XA_>H+JYJ=OAGD(2Hj<I0WFnSjK++,`Tq2]^83n0u:a(f+f$Ru(Lj;h9.[u;D
%34=rCYJ[\t;$3+D6X53(;_$]5KO16&Q<'q`T`m2F%0NiO%!']i'?JYeC=h$8KMY0O&(+T\TP2*gOU@o?;9+U&JrW@=&51bsc@!;O
%lJ&I<>itNVJ[Ah[dN*'.o_XNQ5Y7@JfiS7el=VsgljPKf&d."Z"XE)R4u9t\RELb/(DNdCMBLjiE*K97Dt.Em<[D30NM$PTJS^9\
%'rQEsC+.*)"S-f8OMkKS&FVQO*Xb+oDWn=f%aTGnR]V,"H3@qr[N44l;BR:1TXhb0L5tFY)MB$$-6pk[`slLsmAV-Y)s^\3(,$f\
%Lb.IU"*NZQ::\*:7to;r0N<di"kU%.bCLeks/4NZ!tuBnXq_@&Pe9eL+J0C'(U+1\Ya/VgUm0B93>fc7L2,!bQWL?YW8nQCPXqSO
%T/7P-cCPi8G-i5iUEL\NE(F9h6DZUd=F(l"J7()he5d=)2Q\Y:'M8T4&0sEc*B4C`a$*V7LUb6_FofsN2RK8Jm:qhB:hZn`!&/*p
%`Fb$])*naN?)%H$#u[l>=1j(LkRe/rY1`.BXp>@S4[h!K%%_[MX<92^1bKPL>2`:F-ZISF')d"W!BV":7noYJ"\2,V(k?V%L;'mV
%0O)&L9V=qhD,o!k5k%t["gtR>&O<&OW!+DB=:+&BScPQo1&;6o6pn1B^8D40hQZcH0*@RA*gPM.?St3Y9FtR7.1]DuJu#;Aj!$8\
%L)L`K6^)<7::XCKJJ/SCi0%kd;]pdkeHs<N+>J"@-iadCla'G"9b8WI*%_pE.T!5>e-]ar:nQdd.cLc-VT-T_D`7/HTLL6p1P_K6
%\&bu[c(Pu1ZE><JK00=b2F)u4"B<HPD&;eN%u5$@6F>Ib@l:8cOp&VKg[]S;'+"dh7$lOs+aF[Qj@Q&E[$?KfLbJ7_!HfXoJr@pe
%>3S3\6D./R2$rRteBb^,Ph:'(%t[(uBrcpt5"_JM)g`i=Zt=upeV#&$Mp'2Ne?`239#i:?-Oc)_ed6Km2/;?\CHs"!mg*C"'.@hl
%3Y*76KYmN8B,qQeI\>LW8'+9"9;ii[9M1Cu:]Z-XbgTC%\'GhI"/2K<2fNV>4fib4gZS?6;JK.$:fMR'R%P,\8HVAu@L7gRBSSm*
%d!KsXqY(89/6db&U=RFI^4+SjdmanH@2`'+cb:,]<@o)i(JD`@W1q1+H/oOagSFL*G($<VMBk[,i/VjTahc<pZQMERm>ll#N.f8s
%%7+:n4`u^WE!j,7$4gm7CCHkt&%(9b5V0@^B*AMB/tPF.7hUpUJAVcE;moI2eb[6UM>UBn4W@IX<3D<dYXA,A0_Pj<C@PF>0g`30
%8*O_kkSW+Zb)sT\.*1TbeE+>rK,Zk31n]jBi*fHNIu>ORHnR@H\5:.fG\2IW/B4FF:14=),dMeKP/[2)3XXMXn5Y&Y+2u+u*%YP-
%%(_f9M"0Uh*LaER!XZ<&)MB@IPXs.t,/M1,2+ThNKbXTn/G&oCA5Qbb%P(grDQn)JC/.&*F"bTHQO8ieA4[#O%%Z$]E03%Sg@;2<
%/L!<qjj7PrL*=f$T%YA)'a6#D,e]+fXB$lu(o31>MD9aB!V-;pWAHmN=h`slW'R[8dc&FVLNTF%*<neh,n3\)I3;N''t$E4aAn,P
%nM#&>5RtE2(%"1>1r.QoAileS>3q1C*"!mp^62Y.O'%Gd=)a@US4AJQ[84=6Nd:hHL*;cZ:jJIBiUgZR2sa?E3!CpV=q$[tKdFZ@
%d%mREC("%FQ3!IQ.%!Y9N2)?U8Er[rcPP6/f0X=O]m<TXW@/d@hZC9FE0h'tFV*U^&=7ZWO:K3F44+NIP8XEsC*Go6d\-Y=Ngtn<
%Kg)>D<>ZlGe]bKi"l[3Zd&["/gBps\Se^aIi6<b`Xon*_,&,roS=YaQk_p6CV=7G0jRTU^0EtL].T]jt!PWRk"O4Z,2@M-s^g)q5
%P'7TrUYKG3UGH?+W?K+`%p:e*e;Ea=6T2)Ukc;NG>$_DYJL4KDg+\<K9H`?3A`qELD]:uEbY'(X\K#!K^@k)DfdaoQ),'s*i+eu`
%+d9gbOd$'LB0CDbb_Ek$>Rg6<8BRkm'dOsPolQ8aOW-=q,U(8#fIQW3WCHs%*I5#6\;Q0,A0!D*A#j5g*df$HB0?8=a4IQH6Zegm
%L'`CY+Td6n&f<nX++4<S1-T@_D:JuAmQ=\k.r'e@+iIu8$m:Bq]EI47:]S$a(N7ct^8l3m39WUq!]>X=(62e(8-/Z$.d&Qt\#ZL$
%^@";@P[q,:[Y2@AKd'>4YODf+&?Q>0CWI5)]ljB9S5(9R8:FUNRUcdZ%8kG4Y&9'g2*A#deKA6unC\DD2)/Xc,jShWS5Ua]^dFA.
%6X;-D%tf)")L;F`'``q-M3D(cFgBM?aZ:RZCFBJ,FU*05#Q!2FJCGfgapoRkKZ[Uml03A_lHSEA$P'4rL9EB<!M5&Q'U7'g5_J5K
%OH"IVN$24pV[L>=`n?L>HkJH7Q>5i.&Ef_dX@SX0)e0nC@[:-.cN"[l`=rsF=enkMbG)D"UC%G;>ij#;=\JA*pXfQZ[\M'Bb!rmc
%I=c2[:c[W[2M&MR,S04/WAF5a4^tpn)+/1.M1UA?L^G?ig8u\hIE0s[.;VW03Z.[nFJZs5,r!rBcBs,HVY%QS8L=nScn@hLVeR3M
%W#Qs'Z)T`%e#sKDCnMHKTuF!!kX%^)P&pYjXGejA>ut5J=%X2u3@`hhe#m_t%Rl`:^TZrB#c't5FUT$EZtt3t1rQ?FauGuA)Ro[0
%OU3V1(ku^1P4RkB:FC/@OGAK2\.rsK8[XPS.3&iV;*pE`Eo]'dE;'DKQ0%3TP%2*R-3u:gW=)rjl[_qRl7rmD0TgIR&G&LdrN(rS
%-4\J!]"BDBY]<YRKs5NLD`0sM,W)\af/1\tXbpAB^XTDI8SqD:)_+dIfc+.l/:Dqi_SI18-l;-'WYHNZ<*;mjkh8`mTKOC@,"`$E
%V!?5=3Z@Xq3_2JNO[2I8mr=5.#f67MhE<F$EE-4*^XuNM0"#hRRg9&XX<?@sB\L03.TPW3!u)leY)]T27i+'Fk\_9[/S#!>eNWEP
%WT#2HMkBYn>AAIDgG"<<)oZjA_sr0aAj*e_jWP_o_PDs-k<a?+-!k#VEiGA"Sck5lkU`gSl$7)8))KM/Wlupak%G<=TdAP#A4IMB
%n:ZIL3kWoE2CBIKEKX7Q<"@N#34g(d`8!bR6&s-]+_pVrr)m:D6#D6>cQDrPWjuoGr/T]?)Y$+GI,2rOr$YodgQl_j=ZlG%TNL6-
%2@%cm-P\4V?q8[YZR^V:acW5N/6h-N3\&Us]6+IVS5RP:gu4!fR)T7Taj!>BI[IO5^O3"NZJpEfV;`eTS',]b"pRkP1,?A5lEfY"
%?(I,9LmJbKZp>,#4E0=k&SIMO8(SBD+)r]jF)e*VE$@^H/BrFBcLQ(s`:_e=WT/T#5N5?UpeS7KANQnq&4*"bF4#5AOg^8.=lGH:
%'mN@\@=h!X1%rOdP).(,79=bMUJM("]##is^#>%miZh'ti1Vr9K$@%KkGQs4L[R@!G)RGKkP]'*[G5'><XmSOP3<js._EXq"EgHC
%2.JbF.Qfin`ORGE-mI"U4c4SXL:!,+\F'&YV4V%"S_tnnOp'SMQSY1W6]F^L#+c%@-qfFZ'S:n=ATQF,npVc7)7;K_W5G/9SstaL
%,26!O7qmNVKE1")LFo(AnI+co9>*8L8l[H/Yb,[8\Y320<1lX)/ua\]n0-/R8gtLE]tib]p(6H$1?0@PlGk@1#dlS[Cgba'%SQpo
%.e\Q1:PI^2$!"n0LETlALl&OfGFZGS$^Gk=]cb-SA(&j^_Kn4,IPeDoSVspRGVMMt;Pek18qf=9ZD4`mk\j;'94WZ/()E)8n..ih
%<too`O\anN:Eac@Cl*L=`hQ)3bokut.ZI65!E;$l<#p9%H&!BFC?j=djtm;+"UL[dUuR9tH1;Z7Mog>#*&hK#LPO5f[!edH^nYW^
%f:5=cUBlQ`nd0M<I'm8Ci;U;O)2pVKWpZYQ9>Q$ZI\?C+CePVFaT5[WG"4/b]T5d'2kF$<[DLq!p&eS=:FFn9;iia,<K)N4E#Ikp
%1s[I/R!rK_>e8>3'Z,*Ybu+A#&Q3^nOP80G:)G6AZtZ?QIMa)pFbOV#Mj="c0`Ep(MHOSWKlN2ZhU&.*AgUJ<9GUo25hlBY>O<-I
%BWE\U:/,CIPjkK(IOpNE=ZV*6iKMDI`4X$5Sas=R,[`5-o7aFZJjt;@`AMWA\R<>e?9liS%)&@#1e@)KH?uJDC8`sFk<+D`KLR5t
%Apf0oP/(%n!"(lSjTejQ$pSNfThpb8&as7P`lu?V'0k2Vn21oMGJ+Go]8>rL&Fi[^X.VYJ[MNc"I!(YSK4mbl#-l"])pA@rGb"pN
%jGLq((:J!LJVfp1D"VW&l8&QNVd(923a,&3FXjcY@nRPZ=]iA7p46nd9L/bQBa7BI/DCNmKV9'1FP9-?d*l`cC2p0p8nH75KlL68
%BA=&,&J[rm>]PRPKrUG3f4t).Gb+`pYhs)KJtBq;.B^gjJA7m1mrTmS=>D^!P^l[?-ik&&b=CcAI&A\6qs"'-Tf6G[PU'(0i@6Jl
%K;-Yq]L-<^V=-lR/HKKO:i$6!B2c&t$9-d>6CE=9bd6g^d^D+VjD1h.6!n92D9%tI8EHHeY4*&5n\.3G-#gli\Lk3i!afXjbgBRE
%Dd_T2/)##@/B&U"BBcdo,t1c6UaSO*j@X$Cc4.oUXeJZi1-jmZp19mt5nIGl_P6UdO?kMNoAQj_X-@I/lSQA/QbVai"s(2+Tg#DI
%77/C-/$23=;PTq1CrP?>iDN=MXqaq'Lq?dc$5:#F:pJ/P03h)Y$&PSqHo2=:/eNi,>0Tt!JYmSkVfVJAPc1n\bmg7WCb?!AZ<s:Q
%EFVgJ0:t0>ib.dn%PQ2`8V4F`d?N\U;8bklH<PVLK2kuETtlfr90.od'mRWs.^i<1&\*Z7`nOj\cio%FD59Qm?IB"Ur2dkm4jXA<
%V&0hU:1sgn!^_sjEIn>FZ1_Mk:BDi&YLT*\2j-t:JoH+D4$CI-Z^>&+LeWp!eIdb%<`I!dF>B[+/K^Z91461c:fVghrseh+:?\^Z
%:jh]_O,EoNs3M-s4IIoAJ0DHT9NacU)BqO3/qs8bHj@Ms">pd9k@l>"`]TtGn(N*\fR.WG?%1De(#VY(X*L(oHdB#Q">uu?5PmgE
%37MJJ)G6hcPbQ%Q`@"KhC*h\/.lAJB.q(Euq4'.Fpf^@)BNZP'(n+H6cI35W)2QrgT*st\mHIGA:hi[0hTI(5j2>)G:IFB(&LtUq
%)%)02H)h%R)m3Y$oL!sr=2tsjR4op?n(E:!09!2B\e(='?3Kp0W#n<FaUopnr^$"Q;qpndClF4gP(q[?\s"[eR$[Krm7]-L(D9:&
%iY(n&oDG]1Rtq]82(0u1&HGn8j&P,;'nokpW\fd"#2#]S927H\0FFO>e)GHtV]huMJu[[5Q2Y`Mk+YI)e%O:/KmVbQ.aqg9MMjCL
%*A4uj_rPg>]uO,^QqMF!m0c,$Bk9uLn5^9Apc'a1@ghOhb7df6kUIr+PH.JuqqOX7;:UOp/AK)$$/hB=;[HWA>Cr&`Zto-jGtL,r
%^o;8pDdZ)/YrjS5-?mJMD)#lW<9XQd/K$/ThN^aj4!$8`\1e%a:8)it!fN+sfpM;l)$<8ckQW43_??#Zr%*/B5",aEl*+,E\0[qd
%JuCk#=+S=eXJGA+ZQZ&P3Lp!S/5N%B"-1Ii7FH,[cNm"&!OsY;V(=OnC\^p@'C*.Iaia\;M%qpNP7quY%l2t9B1LBrQ,Jf[?Tf9Z
%Y?u6o6Q.WhE7_>9dkA6S5XS0N.)nQeYE&6C4cG.74e2'Z2W)&7GK]ML-a6PU4F5>(QBG'dFk)$RUPJBd\;0-q53=L`g2K<iB7^Mm
%27/U$@`ZNt]:(mALW2Ic%>`3Pp4ilPd%LID-NE1HfAiQE&#[/eM]A:Hno3XH=%-ac3!P=&hIEZ&#sh3UW/]>!JOWQ30HM/,E16\+
%P8nrdOkI-o%Ln6+<UNE0j.UH'aT3\gn;-$(20<LsoZ1Q&h"=dJdDO=]\8>`:%&fi@!R[!;60_:uj.UH'6N[P*\NMdBJdr5\[5fI;
%O,(_<,R<CO,JsUuBQ??fBa][-^'#AK0Q]ItIH-Xc8[!t+c>V\g!04Fi3#.<sHjDXmq3"U&L+p>i6pF%T^phQb.O3?QV(RPCdrAn2
%aBGVHCA8':+(ID_:UK,*m$O\I?%&AHE[dU]V81(0dLDNREKf4`UcK"lp)ZJoR&dp4kS1+VGDRed&-4MbD!?"rR-#;VMMd<sG8NBh
%CWY?TqrnK.$@h-l1DWQn*nA`YkFN-UEPgDKl\R_2>fK.k,L3'trml/:kcVE:V2gOVcN_m`Au^3$SP,Zr)<WaQriVI2GlP)4POKG;
%T@(N0>et<J>;i.o)/#_"n^+NgT*[q:jD/jf@M/0h#.&DaMG%uBn%p#R-#kesS1-<j5oWY\^b]8L9N;4*J];uu0te(efFl8MgrT/9
%WU;$dBI>'c,!uNj4^Oq:i^;!4Z'arO-FOdU*dTCLI(;fZc%$_hSC,6!B[Xr=0AM)p)oK_&"Vq;=3,!PM-8bGYbT=bk'0`#XL#M'C
%9a%T_H:\XlKZ;l=fu&&J_T+IILj_Clle"Q\Ts6Ohp+RQagO),0,pV7GDgHOa`ku%EAGB[^2"ohN*l^P\?Cgm\m+%M0a$,mtNVtfB
%L[i`E=(cnhG]cL-L/2Ck)#J5`f41LGYKm%ip?Kj&A"Utu`r;I\_g#k3X#%MH]fNLcfI&JKZ2\G00HQ\PlARA)YKl@cnB"@;m(\rO
%N/(a)eI>f1B)S_6,cen^`UWdFQf!4CL*9O.L^8.mj^+<_e#,&c9SbDoWm.;h\(DQ86q>irHj(E(eCaW30ta?@LCHTQPfIFAO@\Rs
%\3muoNhCcZ!FBf!8OJ)=q708\#+4*W!TodAKi0fUGR3AL`<1"Co)9:iQ2BoOKF_tSl5^$MY8"l_iCUG&?ocZc-ouM_n]PS.AX&+f
%Y+-%rLJK];mVJ?u(oU=;gmKL58OiHH@WI2_B'VP9kYe1g6;m$"GrA\PPkZhK[\o$9Ca9;Lb6i?R-'aEEaEODY%[i@`Q0JdR,A7SV
%J=Wmi?/j$dR5m#`(XE9*La0-,h[UBAaFM4=^99IWnD4nWf[U-:5.sm5QnoJ*[GnBk"*OU+Al&is2X(<dXOP,!j0\#A:[OiH9`?5*
%WXaU*P6;5%3t[K>9:i9J+N1l&6CL,'\h.)n_(Z>!mY&J27J%ce&RXB8Oo`K;*^Y+FDh&JuFu#F?paecAFmp]<R"pXgT"t:R#"adt
%hu:ea]oRgW:hQ*.5M!]<h!q>jorJGAO6,>==9TPU"aUhE@/kq3;AJc4pf8QVdUg?oNq"u"N2<QYhW(pVaD]ha'hX]H0Ccsd^)mP^
%NjZG(Jm_.$T];:Z%!"cnWLf\\T/6*\*ek<_:j>UMKV$4&`f@5n<5nH^U=:!o91u7JO=F`s&61+jCanaEmpd8IbV(UNLpk^k='P\?
%DGW0R;"W?Bqel0]JjAVu1u+&70.0SGUBPn[Xb=9=!O'TN!bqsP6/S2`-"$jr/8[IShT$e<)d+09D'>#5PerPbq*Z?4TAeqW7Y5Wr
%1F[Q&4TsdA&a7(E=Af:]V1[6O<GqY9?2Weo%2oi@4":I[Y\")*DQ(`44Gsm)2I.$!KS/.OJ<8-#PmDY;BLn+^p)Qp>=Isuk;jYX7
%SHRE<(-?B-LPioG[0^*)8ge=rD#L0u/&/uPH<Kom4_Bs3g]lU#BW*/N4614OJe&gXLLk8"Mp-CNpp,+?6)<TjOKE%i*G6K;T/49.
%Es$e(05crE+]qF1*u^gM=:+m7?9V5"lSIV3A(fAenE^E1@NIs74O[&%&0kDK=PR@P80IPQ5JEoR7$k?:=EW]jR<<pXe0gC),QY@>
%CUk)enqEk"g9]fCi,N`H/NbnF`uCFk;%D/+Yo$!_C^43PY+SC@#j'JIc^dm""/1SC6X-[2M']8`?_J;"_mD%UN%\eI,#9[f,*,QK
%:;rL*XDh2*GH9ApJAt8Jrg.aBDYL3\oXI-f25r!cT"`72hK:F6NQMYA=A<Z(Yr&k:.KgPk,*LC&_+9(iBiE]B:aO!p3]$Q4a#3lL
%*`uCF0uZM#*cHVX5qj02<^cb&)=g+54J@qs&hEP[AQ;/Kd#KNo8j8A1f[-0L2JuuF\Y[6f="JgOMp<XuKeUZ:hm%k(eKa,\\QJ[C
%YNiPJ]TPQ&#7/`'[-:,?X/`'$DQ>"F[N4T(\BchoYj&rpU\F12gIdB2blHUumBP.MNN3Nu%"?IW_j;*m1p_YHjYKWmf^Weg)G2)V
%8!QT,.qX<.WN3m2"7";@g5ODu]uUOfQ5'q25o!FH!LGNSW(fA6U!]>10h+$n)Ejk)LknoCo5T'th6oRS>8OkJr9*Q,>8Z1+nf<qu
%T)2Ob1-X8CRim=q1";s.0`o/%2c$!6-dO>5L]G?sS$1Dk0JJK2<sTCi)';u28=S[u2)$n`?Mf[7=q<VY,bs=5a4QBQ$g0n(YCaco
%&D2#6W1fp7p.>NUODj4f7sb:3&j-@i=.;7RcXWn;=_Qb#;!Q>_mX<!)0a%f^,;4AjV=OR)p2AST=#eV[)>4V`BT?%=!`cAcW3a#m
%QH&0*U@7;m\aW],Y"BSs)fm:=c.E"Bj=,\4b&VJ,+-iM<2\!<B\W7HeoP%,j]doXL$HEUlf<Y(C)A+I&g?(Ft(XK\_/^tu_Q]Qn5
%02tuq$B/I<;'O:P8[fm&`mXQZD\5iX0_.]C\h[!!EA-!bFV.>uF[4a-jgum[ZNpFZ1??UGiW4S^558%53T8tC1BMinWaPGfV0->(
%q/9@<d=[!el^NKZEod@(?\[WfCtS\Oh`CttB']Qf;*1.(%gta<$$`/=-/5mbbU1q"5dW!pCpTi^i'kY787^^C-<@.]'!'":%F;?g
%=/RT#p-ghQ$Ti0Jcr$J+INJ[1o#RM)%&FWu**K8tI'b4q0VmQY3ab:5P+cAND*AOainb*"0rb9)kS_'&7#Y$E+u%HF##]PT0jn=@
%G]qLmTVsMLa&f1=+\EIraQ/$UFnqUneC3,Ea,h[U.GGL)0fp0rH,42F<(bP$QKgYZ$8^5;BGE:h=J\$\LAJEG&/9GQZg4[U1Q7?#
%LK57k_pHkf0.acXKt<2JR^</gis,A"7VVD#FuC+:fhp6L</Of)*W>99J7jX00q]J".F[55<S=g7?3V3;C!M`65pb*O@ArIu/Z^?F
%D[*f\Zl^iDdtS[*(&?'OC)mH"7;/X_X!#tp<;lj`]uuFI8X:AT(SH9I@?XNRNkN\lU2+uS!YSU#%LFLT&C=/R!ipnOH_%Rq2R@i"
%\Ik*piR)J)eNG>,($F<JZ#)_V5,Uqi^%9'NMLc]+HL%F'L-=J-ba7._]`IkrSdiXQ73f7GcEB3[VJ8<3XEKHTac;"Y*]?N\-`dml
%EO+n.AS(Df_?k6hPD>Yf'a9DO)eXM0Z=BEl$-Mc'-'0[*!gP-FG$Sc\4KUW%*.6KnjKe(eM?=7:i[QHn+'e[JV9.KI]tXt#Q2ebZ
%npHPtp;ui5KAQTc4IIKX=bZ=ZGE*3TBM*p!`UP)qd\H>!]bD"=XfbfJI)'/F;Dk_1NXr`_kP)2Hk=Yf%HC$"Q7gH],LA@^qm3.Y'
%[SCFFb*r'JCQ+enh"a)me2]_^W-e5Wi5UaPNI"Ie^IGtnc?C0g[+l]\k561f4H!Z(H];nJLKg0RlLY'TN!Li%cbftc1<,=%iqOkc
%S/^mmI[.qU+2Ccg3ff&VQ-Q/U\LVLCGrE1i^IGtkl((9n^<E./_ZlYj""r[^5HWP9F(`"LH6(NXF_?CbcpR>`X(XD$K\nD"$4Cnb
%%IViOdAr`=B`bt0!tJ=O=jh?Q>SK<3h&5qT?XX`ULBTd6#.,_a']1Og#p.o_%/]e&Y`!;7L::ZF06FfPG]^POm,,RpIZi_@^#N>g
%c4"MINk.fj3+#]-h9HGCK\,G,`PMSlG&d"?D[-H,DJ'/\_JAf'io'gP\N%*nSV)NtE'#lNU0jWr(C0sNgVq!1\/c8G\t'^d$*Va7
%MhD%bmGd&^h@9l6h9HGCK\,G,`PMM*F)c.f3sPqMDJ'/\_JAeQ\iBW\il_,Xk9'n,MshYlVN=sZ5QFi*i;'H8:UKBE,iK-A/E.qo
%*2`F[DT?3,.j@R)H%4sJWAL9[*2#n\NG,NT*?F(/SfAim3>-8*MpR'V/`HMUqM&Q:5c+h9Y8pH+%aunkW"<eTU=MN%%eG6/h\NdP
%=cg!88!C7rn4ZB=[uACl;k3kD5,@Tl$OsTTOMnA)Wm79!XBA@uhL]Q8O&u]>'[lG8'r/+)i%VY5&7l_kR6b`pE/8*!prL;LV?Wua
%!(CsimnjiI@&Y4`_pf6\#cK-b*2H\5`<*&3U,F1lm9!B@LU_?e8VYl(+AH&+9EI(7^^iP#2"I:UaVnc'n?X_eRZ+7#IHL2bf%ASa
%jrYI[$*k*=Ce:55D>$t9^P0drMLRUBK3*^^U`f&`gaQ+$,q'$C#:6shhpO\aoG"F8BDJYBWPG+!7kK%8`+TKnAnqL57)tn?2BCY]
%rdrtd,_WF&=j-_[!&6A:YtUcXLp)JX.E+S2Y3,i8/fu8o16,LUBS8hq<a6*]Q<Tq#9_^;^&S:(;@[*>ROFT_6MSQXk^mMlrOY=;!
%B*jg3#P^L%W/QOEph(S.b[YW(g5PcOeA09=*<_]K."3gGc-kkpC9=K)*$?M"$AKUaN._[`K@q"4eq6FgNkRbe4V*K:*X81E`]7(Y
%%aJ!WAW`fSWtK>9L'$+.TQb^iEUFqp$)!!:Mop_JgGlP9q%&D9%oF;^/"in-:a@g*pbe^j?m^Ukik$JRVg=I\&^_2]lT#,O#RTX*
%njmXF#Tt6n3G_HTSnNj"3L@9Jc5QfW[Q_AY'=ET4e@`;dX,NlCgL7_(,)Hi'&h!rO9oU,!KZ%8j),d+2#Rcos`sX<i#5_<H0Ga"[
%q-,1X0+R!W1^(/(bD.dS"uH1I<LupA!JqYjbn/kgILE1C8ZnAk5&5;?r=`f[LFpQM_'UgUQU%E7l4DmM*46,oWn6Qtf48sLqod13
%WB7u&[%=bHBP(0N4OU5sd/\HL5T`rb@TbFPKVEHB"]FF7%0f.XJ:P`o)t]ho%fsM\7kpiRX`dSeMDVO#*I@;W>$`1+iW'HXP\eJR
%>B@/h:O<)o@KNiSN6PUNBUWbF'cMbgFCt%ZAZ#:@!H<3J=3s:D'"W]Z1eLK\chkTcU=!AX2&*g\l(\%!Q<*;,[^D]ee?=j?^WlR0
%kg,IaD7/&XRK4TP+lmABRn9o>JAcX')9\,cE(h9+:mWWh+RK7!TJA*[2/'84;Pqq%*,Ps_,:o]oR-_,-(e-@R@5TAKoK&BU%"oE.
%H'"jG":MRDTF#nk@'@[b7MfBUco>L`I;4TZ7;@0S0%d*.hHg+8RE'V@EYKbRlB"b*<+*.^%:DD<L$M,EJM7Xsq63Ul>&Mr/0!Y1!
%,sB'Gi,(toeR?(he*qa8f6,;>jqLL8_51,Uc[b'[!@B!`o+8_.4*4EDG_h(0L@'>$LZKN]3]en=""`#;1?^#jp`SHTXE>P$=*E=U
%nQ0*=,7%OeFgON=+;KlQMrC=i\Rn=FI#*%1AqK4qjqM^Q@V9+GPWKCHr1,B,5JeWH+-&)?U+36n0.-Glp*0=u3oFtj%1D,gfi.s&
%(4`@,N3!3<IkijQ:kkG3TCehR.);sO]C)GcP5TRneq3l"R/,\BUjgV)&H.ihT;'Z[&gGUurRJVc?ihJZ-Dfu)7FHbd,gdJ$TfH_$
%\c35pi`\"SH)Tjd"Y$`LRh1l28/2^N6T>?S6C?k-^c43J<oHD7N:W-;nfa_'8D/Gr@F1o'.@9FTr_.m5FrHQ9_#$]k^Fa0o]W?UJ
%[+jW"gdm\)62>()7-csm^u\Zl`Z@*jXCFQ!;9U<,E<i:p'ss`TmGr2`pb6*iZ&SuLQ8@Yu&'-qU!M6>IWP.nm36[)J#nj"]QU0EJ
%=&>;+!&Q<2a,1/-n0ipbKNa:MH;Mm-X91m=ql8gCH^5p&B,K^[Z';*r;[(8K+n87aAjOf?4:I6X=%U;^Q7:l@5\*LV&g5JR0OKSY
%gZ+QH:[91&jdtk5C>"mQ%4/]<TOk9W7.h89FH<gm:ucqOJP&?mTULCT7!g6,59NX+9@t/e)0:W-JniYI^"D31mM`V%RZ>S6'F.4b
%_\;/,Uq&otj_jQa2$r[P(7=*bV<,Ycn^V6pqo@))1HD7ZGYV+CD]BMTTiJ3"Xa.W;lbop7+86?,5@efhp&erJHYo$EmeS<3`;TF:
%#0k68Q$lUd2-7:n\@XE52]6_.amFTsC&6I[la*X5-F[V,82au'q$r<a&::?+YNrR*"m0#<QI^d+[hm:I&$9]#E>CKg3f=r)BZbCk
%d)dQi+ckK<r<"CU5Eq5^$l[Scf5^UAQ%bHIkChc-O$C]@$FfD$bb4jiGpX;oN$>@Pj)n8^#),l1+2SN>&QgFhQq8V\/()B@"na4`
%+<Qp_?DFY+RHd%o6S2f7P936T'W@PgC+A#X&%E<>\jLsRB^3q>JEuE``iq2NFKC6p*W!:=O\Ak4V!\k%UTT7lFU2R4QPof>Mksth
%4]S%(3^b&+'MQ1UmC!CI$+f$o`MWGN8IY4D4p[Qm@dd.K+_DRra`$edR@<!Rj;ZN3"]9QMM$R"AU<:j'"\!UIDGK]5K\*.QJ`Blp
%>n[\t<sor_R+@H6Ef7:]%p\o(5@3F9-FkJbGar-c15r!-U<0%kiu*iZWOmi8kUb[Gf7*f#<dCiDi)=dfSi!Vfp\WS+.c@9a3)0/@
%>b.Qaot__n`93:jUUu2W$CTZ12P,XeT$_YugW4dNSL#fhF0*F+V1i1%6NlJQJr*g7c(O"&%HL-+NU@G3:F"6$<p3@eaD1T2:tN4(
%\IY<lS/:\DR7<4oC1;=<'-`nIR6O)p7^u<PK9*V:FG6@nl>h`'kUAeaC@T7d>72G2?+gI4\'Q4NHMNYm^\(L[L4$ZR>n,T.X_uqj
%lSJq"<lJUSnWi(<`M)L+S*#k9/qFMCNeN%P^'eknXJEL6^='CZGG4E;*;T.K4=f[\[YrneFXSTJR^\2ZICOFnj5ObkSqdH7:^]:9
%8k%IrM5"Y!Hnm8o]n_"$2L782F%1@n:!WoKY<b&r22-APYg'ZE/oF%jhMnZBmc%8+DZ0OR!bl+W[*b8RG(u`T$8'=)mg@/]f<I"`
%/&p/,`AEFt$\XTN7?OirJ(TuX_\]eUlVL8s2/a;?qJbceLR1<kL?#F(Sgj^(J,Na>.mriVp`Znab,#(:kK'G>BfJ-8LlRMX2$`F9
%/of^o`s"n6Ha],^Qgbo9-%)ggHG183lpe\*q"[];dietDM*<O?Laq?sqm_m[)KdA(W(bp=dpOk'B67gXiuCK:A)P7W(scl>rr2k3
%e.qICA^[oo/aZZP//]O$[q(Miki77=ku*Vjgm.@IFX?qoR2",hC60Pd\(Q.U7o/bs7<(0JS\BUR$JW>pMhfDnR@^H7o^Rl0W/_qN
%hnR%jY:ilb=L"K6')5F'f0t$8oG+f`m-A@ORA-l":%VU&dQ^KQV"OUdf`(Q04^n(XLG<VRo\;;+T.36h/UJ;EhnMW^!U*i7-V(c!
%k!3"dC@s)n\*@#Rhip)4iF]iTR8Ndm:eo(d3&J&FD]Eg'9FW]Z%KZ`b$n!+`MIZ7s6!Ku,gW\2`&:WAB3`M-tq&rKFq(\u1*9?C-
%k\QnBDKY!j?S>5\=p=5Q%>G%B)&O<U-cG9?a<2l9q6AR#[(rfXq9kp%DW.QhKPW2k,u1!QG'LHKmYc/5FY"k#)sE0K]m/u3.tR<?
%[K]M8)j2a@s$S+'-r819aQ9[gl\HD!i7@Vab;,OLCWd"RV]Z#1MaJS0=<^E2`Au!Ma@98&G&aPn\'BG4EHEs?gIPH?E!+M*.Z61T
%%tcmf6eA$!-qM&IgKduPDT_.]6-.'?bN3PgfO9\$0#]j73YiB7%G\qI?9EH*?WbtY.9b8o/%FT%<5qKThT=34ClkegkM/rE5OD)I
%E>3[Hnn]Q6@)Hrm?2t,e3@b'K=k#oQNVMH6Od6_:S\$9fKn?@F,3KJ\_^;l45E!,IEUFBfX$AEhPQ?n73U%O>+:KlAcsrf#B!JH?
%O]UbHd?to)%`.e&\cX0.iuu%/2DT(/8tR69!1:BG'a<2/jDNU-:';fH)E,FfpfZ+[Nuq,[pnEia2]f2h<&$YU`NLWo,"\"SRO.)(
%8e,jCgE<f=0K\bRMG\QIO2jXB*hZEh2)[b5M[02jAl0Le2/[@kC_nrJJ+)Fp&&2uLNVU5;("ptRgFRObGe(UrN>*Xl[O+CGQq(j:
%O$5WePVjLr+N2V-`dB$ITd,j-`"3@PJ0r#l0LZ,m>--NTBW)D4;8KF1i<GKN'2qj7!@je2j6B$IQQJXcMFF?b5_=W'h@O35bOGHJ
%l+7%HRGnP0kO.FGCSm-?n=[\4F7?sr?mt$iSc;3#e</snM<kHS(.roL@D:Zh;X#lf%-Gf4Hbof=9/n)4h6J%"8^Ybff^P.-h35L&
%O<cJN@h)>d4_/$^.>oHs3kCdN:>KZ5^W$i`p]]Ue7>@u77`Dok7&"<A&P!`dXXj>ucF0(GkAj0#oGCshQ0+?4+gNP"-_H9\]`7gp
%r!1/lT!D-ds5r]us1eU"s7cQmkPs`4+9(*2q`d8.rqcG?rKmQ\+7\m9H2HLSh+8,&WLOIo/#146ljITJ3e":P9Hqc"^aV^3X7E$A
%jK;F>D^BkI`GgRrUP7UZinp`Z\sqU9$qd4pJ1k_F>Qu>j@H>_T9\g$,8GF/KJf.u4$TJsN0CU<b]jZL'J-/T2\A;O6N/SgGZZLu$
%#q5-XHX&8#T]O@0Q<oT\?2s^B35fDJci8C^0N9.>s4eX%Jt<5+rB;jkRl25OY=hKGLg=h9d,nFYhLa[u)rC(Q-Tr79cleDbmV*)j
%T)_@n_'e_7RNRBj_BHF+n/!>U74S.:\-&f5/F47%>X3tB@_;'fcT0Yfi10.'E_^d*NjmP'/*D0`hX@61)lD]jCl_Z#.2UM8JfQm6
%ZaPb/Cc-i^VN@<fY'<@O/)-'</NE"Yp>In;74i-G>!GH-11Xj$`B.T^eJn4l@(+(!l/u``l8:6,M40gfM=\Jf+0DKr8A)\SSKCqc
%5,f=6[\^sLGD-.,F;ZHu\^,,8K-r(#G1d`)MG62mp;RC!Qg4!38Acam\k71^?C#g)E<0oB]Ael1f765`2]HJk^Nsn4\NX1opRuh]
%2*NO6m`W$=EZen5'C7=/0O(</G5ULjMj.W?3ne-Q^mKOH1Z\604BFS3kp@8+"ANde[Db&0QesUm\6sC:Y0o&-X+&=0DPSUfGN8U>
%f1RX[2AYa7`ojB]!RfgY[C4fl)q-!*0ZYu^j]ohs*YLi_QTYmgS7Mb-[g/"AJMrG"I8Dt@7r*ls^b*8>ppbiqiU5^O54&Pfr-'YK
%rjs98podFr;7D[4Ik`uk^B;dS!*Ap<-/^I]U%u@$)OV<&.R&Ps>`8-X"4@I@kKWCEKE1n2gb"UqaJ8A(g0krRC[W-f>d1bR=6URO
%<PN-R2c;H9]5dhZl_Tkh)iOG,j7Ce_+Eqj7?EXA7C6>)c"_(rrMU,*-P>^3'JHUQMXjF`d;PtJBgDHnGY^#%-%WJK;#!OZt>e%E@
%Es?diC^*ojD$F$*c5G9J['K+Pnc!9VIciWa.B:H0U`Fms!=SPS%)55C5)*=ZEB&KJE&\EC\P0l!XDBnfqeI?p^ctK>O:F\>of8PC
%W&T`,IFYh=8?$"]arYqT&73.>DaV`#ST/&j.f"I3GD%'TLRn9gW%^.3WjA@K`!mo84t9`cK-]#4+48/#18+$N:"R3sf;c*Ze$g&E
%05,;ZWielBdIWumPE,k8\1`ok`u?QbG^%1@FJ,-KeBem.bXcATp++B!KNg9dET/m8#Xoi0Zc&9[n4Wr:&7>sX*^Ndo$IYc[BHarP
%E`IM`q19h3oEeP\V7SnV`%jc#LohV,Gg*CMqkc;,;EGGkH$Ze!m*WTM%Q!\Qk@+_V%4XNK-?=o+%phXH;^OIhG'kJ@B1;rnLmVoQ
%_hI"[BF$o(<egV_0?n)t'dQ_.1CTd5IYil63MO2W#=GSCFYHD(M[%<u!!>BZXr9h!6;Sb%Hq"X`M&,Ui-dn9EhBDP3@n"^K^]Mik
%`mgYK8:pO=8E-!`Ue;I$l3W2)579h97crbIdeS2P\A/O"\gTT6O*LVE'FMqIJk+b>enc(=XFa4KRA,!@!$c;QEjm5(&GGnET4R/u
%1pHO`@H<7ZY3/LSA0E&M/V+>Dq_JAK5jrdN%#Djf*[(cVqR=6GL77_,"7'2]gjUM_cFHiWn`W@XnZIWHkW=9=7(h%M"rOXN;&'G"
%j:PoZ(%m4^1UKu[1$An$83Itr@j/Bs6oK=KRR[ubXA"3H!U-c:6/hVIF7MTjl4>q;$lVSnM"`2NQEj!T+ND4<H6+B#Z*t+W%l9TN
%g\%nO_$QuJ!!Q->o7p%^r='A]RgSg!Paelf6>m:H3!^*+5QJ5$mi0FU#ik7^HF/hk)4XpoHE=5o7#SF8jneNc.K>)I+j>eU&EteO
%,q77_j&B^MB'_p)1=^\>NhWVZ%YQ/H$T0&9%nlX^>lD4=l]ATu7^V[f)"??oGar_9+1OtL:(6]qO^!+0WQ<6-/A?L/*^#IUOp$<W
%.IF5m.s,ce:,\]:Qd7Ft:5FG^&]rH5F=!_5S.Z&gM(A*'L9!P!;Gng(U_I`N:m[BQH6F@e;q.$pG[?0=6edK]N`5cXEc,;9HSR[5
%Tq&S7IKqA,PAM:28-!c<C%eOORY]0u7gRdt<l*SGX=1_4R4p^*IHNK3q?g`cpsD&?nHK;'2r4R"VfN'((jko9O:UWq6fq!ET7P-e
%"(*2u73JE`)rk*Jf7G1nERu5TU<"F26R-*)_f4O]SO."jFb?d!5[2,Vg_KtlS"%*%kSl]OXt4gJ1]?lJIF.oXWca46X=Y`(5)\EW
%hs9)AHWs`?mN.NS:gfbS/2IJ"FWZ55Jbo-F&iokR#=9M7^[jaE_I1gj)&<"e*?l!H7u[W<5ftnK_`G,ER(&2>g-C`;k&H.Y&-;sU
%Ut6cXERd7FV$K62`h-XR?lSg[nj_F!m6Ebo))pmMJP>sl\6]uQOGe/9.cauQroS4A^7ZHZpDC1o-Z52pf:=drK@5Fb'(K,_>+.CJ
%/';b]NT^urf,EgXNUd>#f6O!\diW\h\n`Bq%SpHr2OX[MOP6!#+ZUd"^57WE8L"6!0"U,/$Y!"n_bBcT)h*lB..IQT_<&2L;"-$^
%jn_hd_"X#2:8BS7O;HU>=eD<`Z3+"*Q$u>Tjbc_Td=EW;6K0=bmZKM?ZjRAk8Rpr2qM[GQqqDm*&QBa%+XRD+VO0mFVm),D/P0>/
%JbjbhKJL1cNjFt_Yl6-UMXWOJjDb;V,^a#p"Hg_@>eesl$h3+GGT.)8omDkbkRR<u%`qeeRpaY@i5%=i_R@@X=;H)D6Y%h`D&kr6
%oVf%Xc\'8(BDNIZY/%Z.W78]/;P9oog7HOS7,;IXVW:"&3Bm</DE9'KA-ZbELr^iM_ZB?pq9J$9_"mVMGd(\B$_;,Eg3`=H4WeSE
%S%*)`hO[/;X=\4\HPRh+9/;e</,[nc!u!(rhtB]jrV(cD)mnJoX-!#B?ZdqgXZH%Bi5:0JHt1<eKp1Q4ELb+UdcG&)TVG;YC[Y*C
%i>E^G.@0l6]WMeXpqp^(`d"pY!$qmhM?nB>>RH=(46JX-&m8Y]Tkd8)/W>>j`XLt5lS)Bo_.NBG&BiuW&:"11/h,4"V81V/jA6<T
%BeaBm!h&;`SPHEr,YX(#cLqAVBN`9Zr!\%*U-(eI\%jW#iF7?]$E67=@8_FHkQXKk(*Vb^_8\ZsTJ:J<..+\._*GBD?P!5F.e45k
%P<!;BO9u[Li^%O]J=9m]L(ajo%D0oB]^rk_,Q#foq%=@S-.:nGHO-=ubV,?&ggKSNjC*%YffO1X:?\C,-^hUo`YT8;LD-o!l4J]b
%jBuo3!2\=$</Xg<El3s'P0*hf<\3=Q"@!a5VJLpJqP)MZ+;-><YmkV*JF?&*W5/(lE$W:O$a)4c!tt('AHo[cFB?FE[U1Ig9m*oS
%1=fB"\&")@AUMKDl/+O,^`0[QQ2;#A/U6mOq3N&H[U,)FU%8T8#lU]$Mu\Ts.@jO=RlW3R?:bAL,YD;_KS7L;J&(7-]^];)iMSKs
%gV$,J'1)mV-@YP)8PnK#[u5UtI,T*G'R8h,TQpU(;TY!Z]hAke`.=\lCL*%bl1ApD!@m9hYBArE1"\Dr4,hq.fN)C3a#:an_%>0p
%Oqkq\;NRsn#<]Q<d8SXg`Clg0!Tl,%V3'J<+fNA*n"987>*_(jG6HIR-c)Sp?KXBql#f7Z]?;?:6G>%0$Lap$dTYm=KsXQObY*7g
%JI3KcVlL@=<hd+7\)Or@@u"`mQ=:4/lqS,Z]%.laUsBXta\;A6Z0]WebO]%k`EL&/M6hkW09[r[ib%/OK903r,Ji3P1H[p15nkCN
%p_"pJ#:qF"p9R\"mSa[)eg>s%Di02N$q)#4@`WU-LDgbHnpldSSctY>@\Ffa[[G`NRb1OLe?b%a?$6TU:</VtalO(#d+e.efq;R4
%[iup;p\VSrN>4;^Ga9^=3f^9tNB)$>OrX>.T\pd0$_$fIR%F(`LOCS$Fp/:Y\X55s+99hUN-!>b_kS+!dCP0sVQB<!!t?Y2>UBZM
%Kf-;+DO+],3)<B)'"[W?]o2n82i?cb<T&-J+3?]@E%XEsU%.(KPu%MKj),9'ZrTgp\l"-W`S'L8<i*8NRi,!gRODR'+NmR)8TO5"
%#mr!<>0iEp@9c&)dnE8/MTq]d'4[Aah?Hek<=N"Zdf9=K"8.1uj<:l5MNo&I0#kHG<u[dI3.U9M##W_q]cdI]HO(e[''o\*L;8?T
%K^QiS<U>j:AofZC<5K4N)'L0'de$r]']VO@`e*nS5"9!h,i9Q3'PfN_aFG'Wg06F+i9hSN?:rO>6P$]<$0"bF3#RA`^?33T=Hin$
%BH5im6A%*h&K0qeB`nM>8`=.6aP95/<&0V6cqr/3'#+m@gn&01FN"G>rfW'h+MeCH;/.q.4.sK5W07ZHOM$<=WT%kq<_u$jiI^O<
%1+A1j?$cZ6/ItPdA9"J#"5P;F0uaK67pEO6d$U=3kkWOj*-7OR8Mo__5KffPC3C8BBg@7d_/4VQ.lY=_#2e:"H(eck$CVBYY%<?M
%@PT_ja:NHB!Nf6FA!nZRAnOjlW[m7!Ii,d@Bc\L;hP+nS3c/tu8V3=.ZY@=2UQ+NeF<2CpP0EG-)e6mQaN`F#Bni)cL3uPSPiLg7
%.oAf/K!)#/I1[8[:6(:K)^;'k;e4i@3oVQ.@%e]7'uX5[<)PCu:WV$sj?OrX+qD(Q$<ke09,L(B3"Zucb;bEdZ?Ke^"Y)qZct;0H
%/ncFtS6)DcT=2iq]MUbR*uD:+iYf[r#,\*36TL$qClh7'(Vu>0*U59eE$ohC].YQHde!E2'Wb_+EmEXma4/->)W3V[I""EPAe$pO
%<cPW(PFU39]aM,(.T>\#*u>V$kLE\A%VT9dI7>q@r_p248Cf&/8pqYOhr50mk=B=8r!eMo=mqhpYN\>^aeT070fmdu`*Ppr.5U5A
%=m(I>.nlnQ;<ph:W)1Q<4E)-o6/*.sP[i2NKM6]]HYoM@8MU?QGWdA8)Td$[,iS0GGUDJKMq+MEhfS^om@Qa?=)dZr3ZR3!j&#)P
%ZoZS[B76fqVtYK2ooa0*7W%I_*5)XmF!uJUk'OF3,"[l?e+9N0PpNH-/u&bS(%Sp'8V')le8$#sAh_VM.++\NjbF/6HTK+l5>3mh
%-d*Ij-kaI-eK@3pq+$ia$cl3<b'0dk_Fop$U3IGas"+AGL,:8qpFPO6boAe=j!ns8g:R:Xm\g<J29-\NEPQG@10AA"K.[k^Ql,Os
%a"O#m-5=uchnpbJ2*XP+m*;]AP-WNPWug=00[5`oKlM3b,1o!PgP&t0=r>FMI7CQ+;tI8X,O=$RJLVC4`k?jDQ=hCDf(Coif(&@G
%ktdMM;1Hl]CH2"_Y$L8)>Y4i)A!lH<;BP=T;L2ZlJE<JkG"9m/pJg^s=K@HEbS61#&o3ds$"N9eQOQd^JaZIK^84OML9ZOVXk6]b
%)#5LBV#M:h\\Vt3>Him#kA#(g_S`Laq9u7]gfc_2cRiY8P&0<O=V8@mfg41F2ME7thbcnU/o+gc>:TANB(`A_o\p)Oo7Hgi#'FrY
%c_DSIBD";apL8X@Wt,H;o!UkJesZj`E6t%k2a[0ePqp.pUCUfgFR[q7oXtB*_12qBkq3%%o^(a<4(_:7$arjofVY7/%k$eZU&,Ih
%/+b`VR3$Sf9o&tEdQJ,c#sJc.C.=kYZ''W.qah%pW1[UBKOjVQW90Hcq0Kc7pgK<Ln:]eHeI`.#!C/VkS8F+NK'R\#N"B'#U?ppX
%1<:h*[2PZa3&[Fq"`t5PFV%/5aK'^=->L9M9ig-DEu;?QZ$07N.&Q-1o59$8TZ^3M:#lKsjIcPg>9Ufgd:T<B6-"3%-"NE_".$Gb
%C^MBCP(8pt7^I]Z+,$qI(E#>KrI\Z/g77^pQ/an?l<"JX`WHj!?2tilfBM4BE)O'+&7l03j+;;;Cb;cNfoE:;V1-Df95h-NqoTfe
%;,&P/QQUO1&*XQ(.fK#D9sA<Ol;6&Q,[6$tE3LKjTf!&o_i6QnP%1_/EB'0-DBXmZf"3&H-8Ja!E9Q>6;F$R`.e2%ZD#sQL>=Lc'
%?_AGO1Bc"RL<_"YENU:gKpF@)e)Q<d4ST/Nfb<7+"Wm5#/O-''^i?;ELsU5h1CTS2_JJ1!iOF$5:E4*3IDM6lhXhcokY#ThKeB`j
%i?.@=ULuC7Q>A2;5_n^BAGV3N&^u)oFh,f^L,CFO*_LMe4aVg:1msqCH=tN]`/G(Oi'Q%NpEjZ'd<?.J<(-N!+!F'o;56!#79D;J
%i@\'u51$8&3t.6Aici4<*uN:%MFD4ffd([,f6oIX)mo]gk5mL$IWgU[,HF`=77\l$l&=8L<$r\#>sLr2,W<l54Qqujhluk$#Gu2p
%C,<c`!)40P[s3Klo745moVn+S#Nu?sCr#2!OUdelW>/2+.2!5SGRolWmEcI[A9gA4c5bGbPd!*lAg@guKmOTscq=>"88n4;-:b1c
%cAi#/TLk-B.'W6R,i@D`'u7@I!9GEf%r=U;W!<uGF/]:QU;0=I?9GSiR*:50=h/PALm>qB1%!G3Cn6J;%\si&2C+/-RHO[sj^RNq
%mLV&g*D'SHE2+^J$5N6r?lX7>YX1bG;?J[-N[SL8Zr.JYor0[F;7Tc84dl7<EgY?'9G,W(OR;ac;4/:_:PQn)L%'Q*E[[N=@]"9_
%P0fOVL7LjU@0A-$U$hQI;+r#9(DNH\d@YnFb,6*3_<IYA_JXH9`OiX&@./CX1^CKe\oHoH6f!G^:P-Y,c(cDk@?ue)P%fbn3#5L?
%V9_KLCnQX@+Puf]8Mr4@?b4m?XF+\Y;\etg2.T&BC*&QICt'B*f*7L]p?U.;HDQ395!c*N&8$J,7>.(???[gh<M2aU!i'o#Hlii#
%2ml2:i#nVd0^6"3:ck'_5efRS_E"UA<elI30e@:=f'p^9arV2T@rRD0Tb,(`'GL/FV-HM&VlWd_/bBa-rtMAgi8>I_[6?038D8UD
%/3Ji!mY[m4?k0a^Bui*L7_h<LV*g..%@KJJGo82uf.qHYo^GsIcVu'T28-mpcTt6HAc??QKmD'TJ!arM4G-J-:rP+cl<tl<=L-E[
%J/Xc@UbNP<iF>K2I%p4HdE<)YX!!OqJ/]<UrGi0Y>u-aW`\OS93'!BZ"riF`CfVVK#9"HOj(!MgL(MAY$^/tB,$do$h+K-s+4?Ll
%Sk&t$p#=N_F<,c)83u(<Z5.mq;5>?A[X&:@c>5.7j;QLQTY(Mp"e;gt'ffZFd/8qYf2#9-!`5i:#YC`n7&`;s7Dp;i6MB.tUtgZI
%V0>L4IJQ';A>jh%'D4.M][;"6K#Idp@Wi@%-^9<.$\>r2:luM+5Cj+T:`iY@+o+Eo%9b/ZV-S227&>ru56nJD&sDoFR6?<:anc8P
%4&N3i3tIAT2`LXK^,;H7fHD%SmTt3%-J:]M'X(E(+3*"[RAEYY+s%!Q0qg<qhg=Et*Jn`P>DGCIe*a"(X"<%Yi@%^dbODK,Tg`!0
%bS[(.#FnpkM005!BG%ZV>>6O_'6h_3%[mo(1a@8`Topc+%nT*]RbFU*+H'F8flWo`C\TS++2$iD7`KT/>25gC*qQj:r@eoaJCA?h
%j#l5#T0gjSP\,)@!\(k"bEKY8>h-4n)J.d4*&Ubs,j5eVQ-Cik_2Gp;s*Ug"?ci$HWML<^j;)95IkG\Hp;kN,BZus[#(mc-6R[/B
%+2J@?;;-X'od]&/lp+SA@m6uVadbj$P%Wtp/2=$\91TNFK)+M>3/]-E.8$jMV&"02%unaW'm;t`nb00FdjE,<<C_SZ]08/#+I.`U
%_JD&.<:Lg>CWK_hTJZpA6hc4%-rrR.KT_t,pK&%!HZ`O`[87Sf#WJ#YnuE71&6e;XJp+Z!(ahP"]Xi3N#MuiGp4F]05+E-##X!d)
%15EfgNRje^5S'Qc(e'I=<YsM(@hLJ!"$mJc!n*qVX.3:>M+G+?TBh'L5)a%*Tl?AIi:KM0'YOku9W=R^fj,,',\9Wk8I;c"Ci0Os
%L+eS6fq>%ZG>m]6]d)U0Ocf*LJ4gjo&+VV2nEH1IO'H3?RCbe>7@VNle."[372B@>mp&I#*nZ@,Xu4O=#7)a='!7,V1b3^%eI9eA
%$MPG_H%kmO3Y'--%""N\3\'[uS)rgf:8X+)N9$LHo25`BQbm3>kJF85esOUX,7L)]8B%@mTXGX/p-Vm[#fe."J`GUAO:T#kQ#Re'
%5G^`YoH35-*LapXR-;R%D-.o4M^U,ikVCpl:qXc*6HQ?0!-MPTR>?ZVV$4Uaf!NPH$RfsE8"-\nkX(j'<Cf23PAP#*6L2QEB):qC
%<X[_]XgY%P@#rsg6[9V^)G6R4AG":W7n+(`.fgYdMh]5bB/F_U$HkkO/G=dk3V$4PG^,rI-_s9CKQf^3M@uhsCCkKK78Y"LYQ[Da
%Ef,e\_fq(>*54(FD_8C4*,8^TECJjDJ*?&Yl9;Z3S!`,A*dlUYdbE1*_JE2m<R'D2,t8Pi[f0?Vf-uLWbfIPU!dhBVliU$L>]U;F
%V\s'6et5fmb&r4)768b7mRL::5S&"K)f#^<$DPXnhp15#eJuZm[d.5G]:*uOWS8`q\=es6Bq:=+%5liq(n>$*.!/mM%Q@@J;OnC:
%(m@\Nb9GO_CAu1[dh5lS8)[1ocE.Kg9;+?[cTjn+6meR<M%a?B+Cg`"d"cdAC,37Ce$<ie.$9f0C7WC6dHaO-%lbuf]*!?2,(?Tg
%T2l*Q'sin[m/\K\Dj'QD`+$CFbY*!7kL2!mAhZ3-%-Yne)E`\G#"qo$V\:AY`5?Pi]WS>TE*s5)!TAX"B#r48qY5-hri4`$:d<:l
%(;?LL:Ml00,D?YK\&99IetPOpU0Yb*V1$,Wh&D>d#`Seqrm(rZ"a?<l$^8D;OaP`UBKZ@<LF;bS@-#;?<.fT8Trl5;2O]p\Cb9gA
%1\"Xr*g1l69SeG,>.1=I,6g@98jeO2)nbJ#UIRI%Spn=^Tr"Q;!!N63,Zs#lSK@<CoYhgR..q=EpPf$^Y#<2oQj3?:P33SjKFc2;
%a_7qI$"e^LTLLe9nViS(F0fXs/E_,E-<Hj%^M^I'g6(g3]@5`fK9nA!#p]='=r9eKSieH*GRNq&hH4m!KjOg'C-2M3p4uP8-@6[Y
%J;f2pS78s>>4^_KHSg4'>=Ohmg@GkT-m#>$+'Cl?g<)2<0i5'#W5Edh;Mdc'fG>/0=;mK64X7<<X0B\oN\pnT<'+*#3_VKZiOI.l
%piPJ(J/bQT8OqXJB"u%PmrqFqN!o&c0Kb$h]p%EV20HM6@HWFR6&#OFIY/]I!!S=86d:m0Q,\"qhq5!\"ee!_Q-e?\NsjYD;Io+S
%J3YQ7$fNA(FJf?a-P3G(&3E%.l*)Q.7M/a"9F,hjj3.a4fr9(E=N5_PE837S/FW>S7M4.3/ZXUniB.5(q>hT=jm_kJM:CP%as#km
%VYdK#kQ["hAp=^>>SVe[2,:M\/D"9CZe7p1_gFYA`?;9C;;7-Q4dXP>h'U:(,2f]'9c1iI<'p#OFG[tQl<+.=V9anUR`GOD1`PCY
%$a"MlSRpYOn-@):+IZ*PLI_S)F2UEM+k%@E4-H#q!ht!C^7L22B2n]/!R2fl5[\i_r32*@";(0;%q`GAaDS0qHh8hC$Oe.tFp(2E
%,)>Lgap>)>[4X:&4D#<DL(.<,\8g!mf&p*hY'Qjrrd`@)jIaCG6Uj7-lZX1;!lIBOFV*hT$mgl36W!I>9at`O`+Y7p4u=4X<2F%H
%^OHpQ";MGN1,I%_[5$q/k33sY1A-;79>Pa>)*UHEG:poM:5%O7aYD)7=#:]-P<V:p1?ucAa8@V6D(o*fEdaBr#UW-jm;m""AM4l"
%[=CLD_N_d$Q%lLJ72&2&8uoEmN(^B]66jPpAPs\c@&gk$J9KHNYltbP&.+\?(O?0.Z%f3)&p3fpja%W<Q=<5=V^%D__i7f?`]=8/
%<dGg`F]t<q"W!(]K7jn3efG`eA4P`#Kr&h2TRnGp9W08f"cVr$U0`la48?Hl4_3a9]7+PZ4A-btP`ZE;%8)DMmLH(g6;J(ip&kQ+
%^8la<]&TA6+7apRBSPQ]"-KTSN[X4bn^,"34DHh,.W&I0]@I.jL"NeY3:q2VE>"ji5]35c\0QKt8+Er]_4aO'$i/"'i8Xm$k1a,i
%*I@/%j_SZK]V%Mai2XS&"`gVYbCit=P\&=)Qfu?6A"(Q-'a%9r`t3&mTS1'HZ,AIlS1%-s)7QqL]WeWd.oN9(o5P85I,Kf20R5uI
%-]tJWHM!oCU(iAO\-p7'>nnEd[d\%gW3uNmN3\(h(kf,JJWPQgmnj3KAG^>@8BM`^&iPXE^STneb!DIn'-8K4F8rbEHrr<+\:c*l
%"]_4`Y\9J>Fc#7lYYhlE?O1rgpLlY:,];l9dk&M2]?r)\P)%CdL)E!Ha`C:9Z+(geRG\V[kR[h6o#p-2D1e!pR#Ych8r!_X'L<:.
%dG3KNk9YkspYe%P)[U(PaOcCVoXomWfUrlfVpgT*iI#cIZ8&Na"']!m$pRa%^8>lIb2!RZHqhp7PK7>gLW&+Kjaf`)%Mq=)/%oqq
%TYs-Lk8X*1X"%F:d$Vuse/]j+*#$Ho**rY9\l<]gUBV7>`9',`:1&;T!Guh2)tqG?*;\r62R5\oirLWI1I@4cinZ5hgh_]Y?>+jU
%R3/$4D5as&NMNsdHla!r.G04iGjR<?=Zjodq<VsCo5067dFN6.H=HKp!c2t;1Bso!6'#6Ch2GY/-_R]]g_+P4LrE,g,>&XJ1_HcR
%58!X)IcIKP=S<n8Ao_(P9Xt=V'I8+D]_6u7'0pE&du-Fs:lduj<m^V-GA_,",0X&l44LWf1"Z7r'IdS40LbXaiI\5d/h"@9psOYO
%?>@*[GJ;[]W#Mo\_0o5);],aR`r=c*NVZ\W!^+!Y\tEGn+5r]fYO(+L4&M\E.@e@uK-/6kd1E,Y;URHpCnL`8MFZ_nTpn0gOpqpq
%:?>n6n:ach3gM;a99`Zrc--3hKF>A+]:dNql?7Q3qV(B)SPtsG/u_Ve3JX\I`B(Lq5g3j.?nYC7N*X:(?+!s7.!hK^]YI0G\(3`J
%ne4GA-M,=HETY2oqs*gh-Mm3[f1._0ZW4kXe<fY@%<dc\NI+YB&*$$h<4L:JdAqrPkYm0?';-`8ofS;4`1/]Q`_C,^j5<6eT5%WU
%fDjsD7=shMRU:8mU@7]2_JebE[+BDpU@%DGf'B-\GXCk&`hWoH+P/NiqW:"RaDPb;=5b9;$OaV@O"5N)OjL66Rdl+?DDc#LmntX9
%h$Z(tiX!s3fF>^!i]^Q70?8$(BZe,3*YVq9L0oF^p>Oqp(r;@T+O=GQEZ1))=eG`@/DZcml%]&_O7R*J`W[Y1?*%X,aCkT[PKR3,
%8V@3C]0qd^^$WZRDueK!2nt)PL30+IUcGp-YJG,"&F`['GU`Mg6e5>N_5f+G5IWq(^Ec#>d@C:cO(tI!V('fS6QnfaKI./(,+QI8
%%Z<R,$58[`';G=#L77).j>$SYl"E:kp/o@)Am9)c$nY;#g,\Co]'G&/<sLi!dSYB*-Zj4b7!T6F*j2.(@9AdSaBJ37EYQ97Dn%]t
%6A,IPGZr9V!"e4I4@H0'];Z:OGna*[Q6bbnG?n+G9PS>mH/KO&Ut5=df[7S;$i6h$_t0$c%%>kg+^fjZd7_/H"%KuYC*3Rd7*DYq
%4E^85NrN#dV'$*k#d\oDg6tLu4:B9LIbl#?D(h2t`2PF^p%<"73F$SFmUun:SP*`ds"+bEY_5+U6-.#AB+/"QZkS(:#+%P7>U;!-
%H\NX'MmNECHIf:#il-VWS*[;Qq^(>7HZtmk\FFIWqT&29Y?'8XB92?tTT[IH+HVt7`Z]E-.XVMj+6OFR@^#"/!d[r+(l`it@u1\S
%FC%Vh1DV<4%$r$4;!f97XK+C?-b.W<Vpej9)1oSHQsgiI.M;:6e>lQuA7$<-B2Z;:H=8.t_r5JU1Un^fMgKA,B"inqbT;R`JD(;&
%Wruu<?WdZ?$Ui`88+IJ,LS+kf)[&nEGj'-8OZ\d"#OF9.*$rr@GA1t+KZ\8C95>'1DV2;[&i/A]@"Bi=E]+K548lg$TlWkX'k51g
%`*fnPB4q'$<K)gG_(jm^c`(ub*7.jkb&X^QNcQViq,O*[JgH_JnX!p*'1M7!FoU]nL,J%[Vd<]L1?cs.a6HhI;KoU)^`>6N>2dAZ
%EfeU'8r6f$be2[]^]^8-Z3GHS`5Y(sXr?MdYnA;!F1X"q98sq%[nHmp_=Im[M&m/.GeondqB8obOGbH,Z!nb*CYb,*4J.uYRJFdp
%+q^"jIDXpS<2:%52e8MTGFZ3Kh&"+AAg+'-T[j^Cf)dd=Omg,]7@q"@2!?9[;mE600_lo_dp//=Om*fg10Xr#[I%rH'GCsh<bsKF
%(L^5d)XTe+J^P5$_E^Za@:!`RmhLaa,HW*"ejV3=cubhd+D'%YDEX#m&P=jbCV\n_O_&*eUkZ[M2\8I!TKlT`20_qD7U+aVY&]Z`
%%W/f1<Ggl/Z&Bf#0_]>[CGZs-o+PBYE6F/O3>nsAK;;P%1,b6-/U*>>Bp+6],iYm4#UtE!T]-r;0u3D37%beXbBe'N&ijGBME/VR
%NBs\kELs1i$#Oce_@MG-b4k)ekT\`8[0%J?n<mfV0[*+aDd-g1Dp[8CjNfO-b>9U]D%-P'LIF=IPD#!qnGks1YFdY_r==o@eKuM]
%>gk]DeZo5#X=kUi?gpSY=^Ne=0f[%l?'7O>*i2CuU.Fm44s]HJ./orl-NY8aK(p'/M'c?JE5+pKO.M:UAo*VQV)AK]YbEh^Qr3r-
%;Mf<-Ec#n;hO)RdA"sX6E%]V/-J@g5M4t-J#`]>_*B"pl@@(s)m+iT0+`m5TeDh#)D5jmfd2WM>/I_<;UL=n&oJmHh-i/6.he1Xi
%6u+LHcFMI1+$qj$Q&ZN3I([*OcU1XAHkKrX?eh=KZ2+=[fT74]_87j&)N[Ccb./S)IN4gRS62So@P$UIFjo%en/pEDbNJ^T0'dg/
%jaORW'&lVL[Fn"cm53T(fWp6^gaM-rJ@pUh`ZtiJ'(+h8!rm3O@[$:80/[C)FTm6h8!%Z"U<+@M-(%0kME,dL#C%n_jfEo":$/Q5
%<E%RH=$3QW??)&P\5D0Y-(ge:7KUa8LP,rmUEm7F=lVKSnj>q&7?JR&%dTeT4(.Bc&(pd&@=3G]K._&5?K1Lm)0Gn0Um1%*oik'm
%dcPq_K"X8Ojb1&miY6TOeE30eP_[[RY<R,G^d3pGHPL\ZVj*&*Lj#r;A"*e)V]lbci6V76.6>+'I-'M6r"Q0CL:^8i6?W[q#`-&:
%.6hpGeFZ7eo=d41$0#2-Ae'M#5sc66=tG(ES@e%<)9Kg^1/Fo"f1M9V'F>29XKPb&+djL?2EOO[:p>u0V^3MWh8:(eDMeXCN$"qC
%(s*2<\8Vr<Ne9S+n,L8B'R=CZ2"@)ZYGe\DGMNY?R1NP]%Y[!,f4dTc55%sQnZ(==;<bh4BC5atou\fG5';qTVdK=PFU%Q0'(hh'
%'HbZ-$(><UYggs4a6>]"OVd-GjoX9rc2#ue*3qLIR9;)",Z)(q@J^!K_`HFI-p3;t*WdF>,!L+7+),?4$<W9%oT[,o&15GiRtpp@
%rqIKo>OFBE^[IT2@n8O#Bd?*n9@S2*8S#Um3Xspe&:_:270<^33.".==bG@Ci%-Aj(VNcd/XRq'>_4NJPI32TmFaokoNSPA,$#Kf
%\7_Z$abnj6-)b?b&Gk@3o:\h=:j`!P0KDV-m%jBo^%nD++5]4Q@If"`qch\655+uSbTHqOV[@`t%&m,`R[Q@U*pRj53u=asbel>W
%_<)2k5-I&MdG\RIK+7(3\$301^kWTi+YR"T`M+H'dNST7#@m'j#T`ln9="4uND7'28RSE3/oYVhs8'(q5aAW3$jA4]O'itsQad6=
%#Uh\KK#6N3p?@gZkBs3*J`K-K$\HI1N;crbTJGWg]*)IjAXSVr+PBH+gHXq7WUm`(pj.HATnb(6P'W$+Z9[=_WeR<%X48kF_oXl7
%Gus4GPB#-\[hf/>APY)bFL5FOis;pdo7BFO+=;^#E)TLSE3LI3!Z-fIg`fYsp=k*J(!(;2nR$e#Lp$iG6O-+$lBT5UYA,JZ!.E8(
%pRcX;[7Yco,]T@Ed*1[i'*&Vq#>\fGEh!GZ$H'dPm(#mMN1`!`E&+uWVmLqJeqAWD:=B4sn0f\OSbYF*B,KM<3*W'95\NHPYH*9R
%K-+3kBP,20GnPBP>^t1$o/')W,N7j[I2o(MAO;2^b+rMc5uOIEm'XXXcXFr8Sm)`3=41C)UA@b<.qgPJ2A8Kjr>8JkM/r<c_[Pr^
%E]qTM'8(lR#D>P2(4kY1nRk8\;U0g&d4AJ!E7pVuC`q)Y&Y>ebT]f0!2k6Jf"X'5L;(U&8D%`c.\b.-C9KP_:I4_)N*Hu0\p\dBF
%)md145M"BOn?6hKLcu-kZ#8Rj7Zdj%>P-PA#.^j%mU%ZhJ)/]"+&8nqNg\'D*86QEN&VN!hU!N5ZP0o1s.&hY*cYn^GmM*!S"+P`
%*,<1p8aPH;6jHlFJ%gAFkk4+4iILjoO^cq&6m(<Lq.D2oC<Js"ftZC7??P$nkPaM0?-S`'PeD_1K*%'W8E1-),mOd/>,d+9fkk"r
%_&\\qUhnRrJEm-_`'sp2_M!^i!7A[+q$"p=Pb^XTfOYU-L=i@QpINbqO:P!thqBn`1%H>\XY_g^+46<VE,6!lj_G,;+gu;B"uOVM
%%c(U8N;+5cMZL:4GZ3DD@1,eF/]$aL)NlilP&W\VD-!PlY`G_'<CSg;c&PbVV"mp(oO')!7)9;/F"W/tQqqHlTeDZM"C-KqjEDR@
%O5%B1hsZ8*"K0TcBV8++:OK*^FUOK`\%qebbHI/!V"&$;Y#5^BVTGg]!J8.]nhj6P75D"e;Ln816I'e\*=q6KG_)<LX>8`DR<XTY
%N<bU`I.2MRZ8(ofU=Kn"N<9ET7MgZrR(dk!,.>S7"S*me=N$a<$PkM&cu<8$$he-[kF;aR*T<t*pL5gCok$$`&_n:XWi2RUb[X<M
%pYktOL'[PF#\V>0qn(u$kc)ZM+N#uZ8Vau11\7NlM3>g#K/5u&*ZYkLGjT3?ZqsrY?qe%Q7nj"68f&bWLf"7Z.(tEO%@^JA5)gsP
%>CneS+Xdp,bXJ0;IHV9tN.=)@i;od4cn-.nG)"&c/&qoq.tW$&9d7-BVSCF)bRB=#+WAtJA=RFj)=WYG/_nDqp[N8<^NOLk4r54U
%#ae5PH`^3MMXd^0#06k8D'NS[gWl51fsY7+EBUOtd(.cNjP$W,WoF[[/"H0I77$&f:,7`8QTdMooNUJO1sIr^NFHduQ.gcjIDUrp
%Vh_m?64_h7;urH)TVonR(En@Wrfi=04Tod-d3LSZh]!8^+"p.NCT$7J:R'aBeA_Fe,6p%_fR;E=;jmM3Zs!T&JP$6h>t>kQOHtJ5
%P2pu+-N6-\i`%s&Tsg:l;m*b]@KUYoP[Ia6p:dCq_tHJl>G1FY81JY.;j%h&0,A+@LgOi\,/5JM?f!1f7uB,F6"`W.DD_/<rtnM`
%!UgD01lVMI(4.9j.7Z*'@krF\]H",iV6uB);/6'SBCaYWV@Y/BP3'QU553O-5_Zh.)-@Jf&+M>T41gnL"l5+GKdB<41V_=!CAYD>
%%7q9`1c]&,Y>OFc_!;R^KW((>LUVjLTdttJ&Nn+5JWH#]3+E)1Sqf[9"L*Trlq')X-.CpkRd0!hg)HnFj.oHG-DahLa?$,"#1E_A
%BO`AG8>.T0g!_'mm<isuQYImg!,&u^^d-@(ZTU/52^U@<MRs@E6g=YEZu)'Z8&Ykc*bX`)_-5o"Uku?UgOeL=UC<oZ3Y4UlUCRAA
%Jmom:N\=s-!f&O*+?a;5V2I?V/a5g!L(*Ns4pps_0\V(fE[>18W-3cH[]+iI]V2lsMADs.ah`d[mN_G5;tB<sqKEa`cKYAu[8o+r
%&tY&B7lC#@aRXUS#)1&U'/C=ko1qs`]jG^bLs$r5SRC;L+Ue`eWmdO.$2S;`fS&K[#Hod;k"t8ccO/t6o2IZGkg1-m5FW2qqm99j
%qH@u&O;L*6."0Qh[!X.V4X`V5U_/?&a?NJ4=#!dWK6/<HiVN-^\H/e0%:_`H*<k2=m+\`^fOWbt34JClLV<kqF0LA%#[mj\QutBP
%J]B/^-IE&>H?u[#DQ7ZG>2k`\R$b4F^Ienq0.d!Cb<mm]S\13Z"bSCd(/sI5i0u\0;cruGkFF`]aZA!HgQSHY:6SijErfj+$+38f
%N81G`/2;"kC/CW8'eKA`7?O=M6]lfbOGX+(jk\-AQ,beNMYR;RQ"@@:ltDo\&f?DOC`Hts,<o=V1ZGMfUbB=VBSkkBN)Zb46Ejge
%KIY4jF_Gb@LDV!7HCi?-dG.]nVYjr+WZTpI+Y"![beb.Y^_f8l9b$Q6S?(RfQfS76>RW>%9!FWiCF&.pB:k?3O^M<EMd;!C.-n*f
%"6Da*[,@p)D$mWj^T)]NajN4K0h`+D_`SeK:.]6X@=0d0ir&%>f,cl#f"VrTkQTisMb-;t[AFqr/pInP[CTIs?'$&Q,IR;@e-4a?
%&h`CJm=Kp5V3PtnQeH?E2+oZu`U]kIkQheZQLY_L)%t'cdPk%\N*V$*GAS-1a4[tN]22kh]tN:?oWLInOJog*_8k]/K0_ZZG`"W%
%;r*[VY<WnV[t!g2=47=A3indaM7U9)ZusYBmZ"2.R%;%&Q'@n)&"nVpdRq5AI5?$Q(Ne2N5sa*BDC$j`f62)9G@J?Pa-qDri28GP
%bfi4+[Vqp)%WId()L[JQ`,NaNe#pn%RE[*B`=afm;XjP]C\3O;&Ws/2N0uY;"s\HD68P!4lk!\.*6:\eJnu#\r.DpU_gdHE_BZhm
%0*_QKUb]Ct*3o\Fmbm+,>*RqpJ&S7dB)"p)h-qJ@\%B(F56+a'Mii=83IY%F`=E2X]kI#8)eIn=0J$A,W&Y4CGd#-M6J2]AgcQC9
%"ok^.Aq](lBLNNE=ktfgIKAdP7-9P/.Y<LdPi@hCXoV(iM!*Ks5?lCgKt4b)%ESG6>5t%A7-=DO_X7h'FJo?N,-g271eZ0A*+Z.Q
%9#0]n&mq<eh/L:nI([cJ7;(@TCqt`LDU:fs3mcjh?269Oc8END,JHEg0!='5TC3q*PrNF^,JG#2YMLA(bnc6TBJ#G>,bRE!&'r`C
%l\E[%\7o5F+>0W9RZ87K(_RPph]KF.$kInWZ5sH#`SjM7dRHTMg@S>pLt:<,<YB[Q@uW#2n@=bW\?$b_9D#iALF'Nk^S;FH`-R:N
%*/m+MX:OK@(M@ij`c4#6nGnaLHU[=-c?G$:h,!s0bDAH%Mu/KS]6Kp-W-o]"]Za\eH+1-Yj8$W+P6nW7Mp6\_=uh/9qZ'hkI?,#i
%LSj3hpVeu%>=qVmJ[\9',.$]@:(BXDdb`6%*/O8T19=BF@KM\*8srRillZr/RWJ>S1$0#U5sg1AHo^VV+?h/[=Je`=\lK^`7HN5=
%BZ3j8g?cYXVt]l`XhXo4[2p;h%6"c[Um+tT$PCC+mKfX<*EHNY)J8C?Z;Vpk.&'>6<ieS(Nr\&_&Yg2c$NYfB1`3<dA$I%apdu=/
%>4XAgrX"!X:o'*Qa5sI73GIj2GTW"&Epr%n]=<@)LM'V-+0kR,j7pSW*lqYP'UoAd/05)@FUB.19FbWsBr/qhL1&m!"jmXngkn65
%AWjml9;:"7TlhK#/(RRgER%1##I'-nJi5;Z.q=ea[9sr`Kj`8=kSO(,C7/>Xcf%>+BflG2K:n\)C^Rg93:qFrGC)c$n<=+=(7b:f
%ck]n02ZsNEA&[r:Oo:*mL]6I^GTcfuA+EG5IUX,>):4M7)=Ep2!=<VhAS6aP$ErrL3!m:@6q/aGk`0,nR<Gj)CW(bb%fK@'/1[,o
%T+KF=WP!p>$;-=j*X.BVdU!079gE*Pm#e9lc[eb/Tpu.1Ao]"p@95@1A>))l#j""hgpl;(qfk,#F4:'gYDdO-OF)&;opX)q5]a#J
%i+poZVbYneGpnjK1g@D.lj"a9]q[LT\`PV:)%#@+P8>LF)Y&)SW)R8ih'g4Tg=O\I1b0"PW]k>L%N(CESqlXbPJ]/A)>'U),ZaK:
%ljn*AE\kRt-?8$Q&89NBQ&HCN5%8_YjH#b]Yogk=KWb7R(9ruSqgf_e1&:cu`)Q:@o)%C+nd'hL4FaO4&.]-Pf_`KNCHlXZmg"Wn
%r=Ir$<np#3U5a-Al[FAJhOn/'I[6?c_!_N<c"(P>gjZaDeW9&%`bq.8ZlbYA/RS3=1o\df#NQaclLTJ7UGhVPf&69)`MM5bI^hXY
%5A\j<#D^V'J5fr/pr/;cF>Ku/r;`.7R_n1(o:6[fpA4k#8TNMSqr'_J0@fZ<%K'RM7CUC`;M(XZH,R\L*W!:=aG<[R8*!9eNOfb:
%D<q/6^A\aa+@%=9s2h]7Cp>Ar*"A7#!XBCqgPc?[E'2NB5r!4DE!(0rI$\$qBZ$#,Pd-J_L6D9RRQ_ST!n#MXT`nBV+p>!nE+UZY
%a//Iu&%=[d0D[M*PXd2/9#5<7]Xi'dSVI<[@(<72ld?+Xh%-HrZ+HkIf?9<3*.;-i5Kb]mmMiK[0DB6pq9+/#!g4k+@/>WY>4h9b
%'Y$CJ(19,/o,'b=UlMV$Et07b\qCcki7SK-N6ab_@+Jkc,K!B)O;X@5(>)WiM$U%OVUW+7HnC+<)J](W19[/gH/O"0:RaPa0=!0D
%,)JlU,NL]O33H8G!,td^Zr[kA=cJUCj\#A0JNuGt80@5FPf@C2IQl%+=Hmm1;_<<cs&T<#_Ih_2[i%M'g/d56^6(8&@`?3aE>L"a
%f;@kn&[l1d`F5k6,WU?FNfC#BNj4PpOdR;dbskQP[67hhNYW"Pem7/u)-i)Rd5Mo`J1*/ooQEU<"9ZKGb)$pr;21O$6mHmBnoPt$
%elf4uZFomU)kX;Z$_^>U(t/nnLn\K9]ek[;US_i&>Zh$%cWZj]gP2*0^a,I5?5kjqTH?`6K.ndR;M-$<%Qu=0H<WM=CT8/D6S\"1
%.8j'=ZU4&R/Ycb_NWa*@5MsA!E!rHdRB/g>JDa]CcOLCu1ZnN1SDNr(hc@-)VbF2rFNt*.$0NC49@I/Br.h^<Z78l7+R3@/rm[]'
%)0N3X&*^^)08&FhLO7]AqVEc]^dS4mA[*$tK=rH2s'L[&_&H@;Q(^1i:SFcY^+@Xq73-tUp&4`hVOdI]ZMG-W:^uuq]i=UdQ^,ng
%ZCQb3YKq5A:]?L!.,:9Sj%=rqk.-nX]0SW!e'MGcR3V9-(i*O$o>qD*k@ElT!8SqB43A"g5^_klJ^e3p4V$uo6',\*`eeFZSnM&O
%7/jh'$LjU3S,pT]6]!@@<*%;a]YA:B>r;JA9,<T:4K<B4Zt\/!3.8A'WQ5;!LpMMa1hJYnm?fm6_pRX8L[7;4>2on.,8PkK@S/2[
%&Y[eQO?ci5S04?M"U3p*4!2uG;_aX?Wb0U?AtTE*4n+00/X>:FDkntAQGj[mXA&SG_m#1Ak(]m.?eCH%D@Fg2dPNfa#IYoJZ=i2V
%)=9+`"@DJ-nqI.eL=\,BR+V4%f3KBrLCH*t.nVW!a2VA#ChcZ?AW'@2D3gL*dgobm:Jqr4=6XJF*ojLWh)Y\*@e;6$;7DR/fH__9
%)R_9*An?R=$7!HQ:/[7fS>%E1-V(e>&gD8>T(E'(Tg!,b'UI$;XNH_<Bjjb^%$h[+>!T[03<F.9VJeR^Am.Z&a%4d4Nd0Y%I<tp2
%F9,(1kA'e:F>%"ab6U*aNk&*>DT(9i%)3f+I"q@-*@[//^3OWe-=?CQ89P<Lm?hQuX4Q_E;#-X4FsL%Fhi<T?Bi!Iq$!-r%:YQI7
%UHE0uD9#%RK;[NBa(-8r]9,t;&fp+P"?!UXX8C]Y=b"X.D)WY]^j+^rF\LXY[iLANS(HLaie7.2h59EaD+>"PSEJMXNf9M9QgKTj
%#Y"UerKshf(/!BsM0[)dE5[d40s6h?/K'Xc37$!gQA"aLhFD/G8c&ECMRdV'd^;cjR+AEnj86pFn&g"/^33TW2tq1%DJ`2h?<mJs
%chuR[jiNo%3EtMPJA-Z]ZZ#m!K<lV[_'O=gJ%.aFc`NIq2Cc5_/e'sJO!MK_.c`bt;.uF7^cUcFh`pknWlTgK2[fFcTWdS1cED;(
%KJHO67X].UUjdd<A,qDA>D@igq5aY``t$nT>f#9Cp_N)Y\[PH]ck$</T0+mf@NFd`a.R3Z3jdM3CV]q["*[0T%-R=[l!'g]kh])'
%`-D8s.7ttm>met;F6hU&JID+qKBq\R_'b")j@_P*ZSr^Yf]CikqGQL[?X[=.\HnA85!:Hoj.ZY#M5)53+IcZ$SfTk8O!gho7'.HF
%It\q1)t"gqKQ'A`s)rYoStLjkAjQTbl8\HL$974n2V[H/qc6K.k^%#uhZr9AeOY+n$eDGfT5I%MR1^W=k=`f"K]\,#@AY&936]UO
%G%N+h?`b"HZQPUs@*RVQ:u#!_h%L`L3/@M_YNmrekmbK!j6@l"5$AD$"mu,1*f$BLQe:4M7[8XJ9AH2N$s$tXiY7cH:*s1tpZ=J?
%GR(KfTug:;j!#cSfg+60Dnm_k=J4!$YX*=Ggr3'%\_RVUO*CnL`iX,QE;+aGmuZppGTX=Hh?U3ok)!3O%#]iodBU3)bg?sc_&FI)
%c63`+]ek\fP^\8Cfkn-HGJ$Zg'Q,dN1.3T6!Z,Wl73McC-j3e7HjESmSIIs=9bHPC>5m$ZTAb:02lfT/Y]mLuM#^1ZE>V[MA*(0$
%I2JC1bscQI!_@S(fJZgRJ:1TOX2*3KrS^N?H0.?K$+GiQEpW/97&RL!?eeYjKDOWmoO]n1e=!e:*<D>GPI"gF8SHqTE]0W3i<Ss4
%j>sO=A33RS:g>D:D<2/h+>Dtk/#NB,4)[p*#@J"J7.54,KT9:5Mf0\2B?t",<%cl22UD_-)`!>gPB_nJB\-?\`P*:G`197%(9R-$
%5(;D0nE2eHnp)el[*93E5U1BF"YQ8):KF(hgUm?$lsnE:A.RZNB;XPo*tT-RN5JnB;&aLS9K2J"_9(`Eb$U0ZWu9cRd$j9K#ZmW6
%\GJE^^CSZfX"h4-jZgm;#n@tE0nTnWZ<(XJ/(l%Y;e%`JJ<nJr^`ds7-8)>&6Cu7pOHFZ@9LidOqZqF.lj0*9:^OD"'14Th,4AEN
%1O5V^4jncg5Qu)0Nk'J/@\."^UkBoonGJgh6@gk.M,7iW#.@DlNnG:HIkAV5fmu%<i,\%t&)Vf"J"EDXrKBYUZMgLg%55,?\OFnW
%KoWXk.uH9"0k<=6h8+/k_+9gRDs7n"OisfOo&12BOQd=a+m0Bt5]_^4jc^!JVOnM?:YKdN%@+K<*0us>a!d\G$jCFV!^*#,e9uH$
%,OH0N179OVOf(FZ<7>E+3X3pHl%#7<DVSH9)kXpCWb=Y:ID@nIJZgmMOCnU;4YpXn<BUGHobdE;Mc'0.6cAA9&7\^+*)T_g..*PD
%F*gJsdNP=1s"(JJc7psfO%4oH_guc!/eH>bfV'XQ8'U3VP0f0]NH#Gr%^m=2Z@_-j;*TW='MMGJ(mu@\Zlg6c-BAidXoEW'>+,`8
%518E-H^BjXRSa[G\I?kD:&Gag>D>!]Iq7_GFpBm`X_`44kf8ZXAc"]i6^]+CR;=)084KI6"`g&Y(qqSc`b`5KJHG$"I`YF1jIOB5
%HT`^VP513qLZRi-.`"R%V@V]L3=;-)MEa,:-X^hpG&i[sBS>]nE<e45&F\e#kK/k<%*auG,4=MGk^%8CcqY'I2"p30%WE.:kDq\b
%$CDN^_[;Asc(,iI_m!8!I<++5B:U$%\m$-k)6Q>'.qW<j_F3P'>IgmkcX\`MH#kV72=O,]f7O/sX.nBEmGKBdVd9&5JN'7`[G;).
%*Rq;p*BE`HJ5A33jE,K[jDoQW,s]29*WjsX;<We(h<=t"U-XBpI<s[&gt#jYcbZ.ni0DIan0kXaf'DR?)_oS@kpflH*Zc0-;<J;+
%i;ji1o8pH!UN#7hleugg23b4"n"kFM3Lq65=\$O7r@,$<4%M&Tebc*WnhT=m3<H@bP.c&tS1^Or)`pPbj;b[M4\+oboYTM$7$8Y,
%&Wo)T=d7./6YAF.Jk(C]Cr3;@-;FOqT8O*[A3;nl0N"-\A[aBJTf]d-R:[:nRT%'dO`RO60'l#p`]k`nXu,bQIt9t^bd]Ci9`hSE
%3$ofhYW"io!iol^>cu-m&.+pA:e]IG&bfZA-B^H`h0AXI@Y(K^MDiiPMq\>-^5!-$PBud90h?k/bmlLpc^oY<](#BI#p,C3N;5HW
%D1S3r;AS?1fVOmR,_:I7>QDmOhdg;>K$GSK)+?GDJ0UF1IWU`b.]/'P-:]>blCZ'>Np$f\)+j4'\1dP@MO*fQ))QZFn>k!`\V%@k
%RJHSj#Xj9J8GatY")tA6U9!:e)0A?gA<+`Tpn5<e=8^Gl7cQ4c8?8Ko<5J^^Xj#jI?)7cWOS_*:R)_Xi39-;Pc<Ye8CO+n@*/]<U
%jU&Yj3(\edngqH"U0F33)G@'AjU$5bOgr$b#o^0UZWj#?9+$,j(3"rfk#Z2lcU52p:H\V4462\TaK@%;a]tE;b#l,8Oo1!iNdc8*
%@7e1hF*Ug)=bZ:0-dr<ckoXN\Z[mqsW7U,;rIs%Ek442%3/6FY-_1GUqRr5.Mu%fS:EaUu![.$)?_-CZR5E-/FlFEZ\KGa3JeL4Z
%^"Va&=>f,QFVY=lFg'*-\`n!S;D&S2JQnZN&^/QR:JeqHmC+[ngG7:Dr3q%orh$Pta/3pe%u0?l1?60A6<W6U_uZqR,pYmQ)4O.c
%3C-@jiP?o`5;+.*J'.&AUfTr0Zp5RmJs([%nj.+\e;eaF*Fm;8Jr$_L5tAHiJ4T>CIIKP;9Xp>'Y6<urV;"%n!tHRd6!CQ8XMtPj
%3E0D^/Wr:>@@_@sW>Pi'*l/A,pi/Opcbpnu,SQ9&c%($;X;9nn_$fUGIDsUY_[6\s6I&ZnJE*KkRilu9c]sc-c<^cPLa!'e^U-6>
%_%.]CWhBV43j&l7"!3R.N^#=&"#'CmDX9_.3"K98k>Gr-]ejdj6B;0O8\jgI`7?[m6iCX(nI\+WN(-\taOs2[G_f*3?LLRu'+j"2
%:F)fslV5G$3>.KX\0-qq!pJk(BCn>"OH:93N/>\1H1ms\E=*>(ObJh16W>7oqqP]_EUh+eK#]DE7i1a4-f3eQE.>m6,$IhT,Ttis
%A/--m)T>FuX*k`!6B*N;FHo6c"#9qr%bg"\@LkP@\aRiSH[B_9OIhhEGo?iuok:5D/9J-?L`[t@o'isk)F178r$6kgM@oRZ.k$mJ
%m+)8lj7]ip+PkY;Bn_HQJmbEdE\9W(LamT(X],"<[H>5UPrlP\^Oa'M4N>W5P1pW)#!7qm($FG.M9<]HZ"-q_hTeMU\F+[?4j4s8
%"L5nbH%7kbT/-tais6-08l7X1/4bG9P40h<P8^oU,[suo'#h\VB-a!oEqY:S#JCI"SLaDH`T#1oWU(0X]K^(5Sm[+W$SGbu;p\E3
%TUt=7KM-\*d(::c;5&#R#"Z"e^Di`$RQr(8G""mOe`T3YRmI`]gmuU5#uX\mN4:s;f-]G2#ZbB5LOgILl<P%>mL!VS2hLD,X^!B0
%cSQ\BbV;nE(VKg:*eM"hF_i7*CtSkkgh/`R!VB<NVN42`$^!.EhW3(5f;dDFU?K^L^>:LCA15u?&/_pfN\_D69UcLi3Crn0U4"6>
%7jHI\I!q<"`"YS3D$<RUUb&_JUK6C)bhQ2!B49ul[.NRWRBAe8Rqf-c$.:G^h-G006WV537/@a,rW_S23TL>t5=35gDEtDRYD,C^
%cObn^%+F8bAYFe=)tGeF1J;\AUGu,ePtA!]&07E8YGh+3liX9X4M1F;#,sV2)tBd29q"t=-RH+l)<a:6:p$J-ogc'MYH]4Jg>t,0
%PROTIB"Sg$LIUUTaNAN1_WtBWs/a(6l[-QDA$]19`]dZPf4To]8_/'<LamAB>8Ndg%_u0r0C/EOq"g8MFd<.J4[4oTY$Lj&YHR`4
%R2*/*og2VI'IEq'_&bC,M)s7$)6r(JYR3Nlb#=:])M88,s%rObRL=`3FXX`/F]7cTm*.+84F1a]b7o!-Jen&8XhhA5#(Zl"YOqWt
%HS]I@qZT+CD'l.BQ3'CrZ/9dMR#Q!5,*e7L[dE#el(UUh>9174O6XP[GYOV=4#@q]%[ILBe#1%pKe%$^:mD/Nj*H^d<"R\EmXQ_O
%jZF-+OR(UBS-YDf.JV4#1rc;+T"toi8$rHd7'EgHpd6-@aRRo,KDBr:Z";c6]:=/e3+QAb(Q^Qk*\L(M1iKeE,ZaSaq8&>YM,<Pr
%jBHfAJa=;g5F"FH10!u)IU0&8TiYY_%YgUHG>+aSCHH*Pl(<$r[.Hh/hYI%anF*Qss+t*8-cj4$nlZ7a1DoUnP&2A>F'b9D'CL6n
%VBb:gO*U]!gl1u1YWJ'PJq(PTs*ft-r>P\XnJVpFAK347%VS=0PZ5oTi=OPp"<SZf+%$c!r;QLbd/EmC3F+=?MPDac*eT089J@[L
%6*pV)"(CqZWgb2bS8BbXKZb=:%$ODmo\-1A\7DA786'Xn3;sYW8*?Km:Ea:),hol"/t-nHR>),5S7.Y"b?;?Yi2Y'3"EtDrIm@_r
%`B9$foNE8eKF-,tH\:KgXj&qYBi7AAF2WOprZ%l?SW+_84@"?ojbTIckgP0%&\VFP0A#-qbV/?@ek8&_2kuWrNHURfF0:i\pN^@/
%4"P7H3Rtd?>7F%7_o-/iY6R2OVkr7cMI]@U;b>[;BmIUJ'?bgK1TrE_E0VCR/+"%lmTk);icWXqj10g32O]OBV<me\NZjb^l7GKf
%&9L(#r/,`A!,W:a7G"[Dg%>mg0U?%APKJ^8B=P^36krouL:i"G.=L$>r:LF.m]0:X\K6KQklN+N%G1js-]MZ_OPra#Mc<"\T5g,2
%O*o=R!"KDB_PL;<cEjI/bSm=]RihpLdsN4(TFGh+;teD;`ehd#KP#mk\IMb6pF^oB0d"cmK9cK6T?aS"*SZOqjPPI/\TaU]qmajK
%0\>LHRnq:`"htS*M-Nf:3JI'$Pg\/ZJ$+9:6/:):Mm`4mIU5_.o1Zo(&-%gaWp.1Ddl^&.n3Ei!6"-kg(,u(?EPib3%N$T*,q;Z2
%k!Z"EGtt%f1^0XsJWG3d()'[;hLhKXU0[[%fG/L?7j0`=Z1ktU5a[2=9M?$%&L+M1Q,D`Y563$70CDo);+_:uph[e##LaWq<^cfS
%2:kaYX[H:+qh$9;@Tc4)nbs@]/<'bl&<<C]Cgo<L>.@QC7YWVHVfCQ8roM2u'Wrqi^)R$TG=2]t<:Qmpac'/H$pO:TZj_1U7/F1<
%-N+V1LeLMH"$s>m"l;p1.Rn]t,+sdl]pMBn8+WrNG!PJ^J/H"AGFV3j,m353=9CfXZe%^+p0:"W:7=+,CQ#i\5fCeUXu<<!&;MnJ
%)a&72]LL_<bc[UR43Q^fSh26'p=Y1MU5:18B*WAhj$H"14AVX\pT=_'&3.%VDFVnPT<CX$0XGC5a@H=WRhdWt3>TFKEm?`XIt''Z
%+QCfMqef8R7BoWbl'YP^M8G0QKE;Mf.qRlI"Z/Q/TLpV3+TunARMi&(`#A`C1^*FQ;1>R]7slL9k3j45Y@Y^3h`9%D_*3R3CNLX+
%86S)gk=SVRS7>e7"dpZ!HDA_%Xo@s%e!op@6X`q\RUn,?'.@Q`[MZUk-n,bjNDWb@G]N(]RH[-I(Q&hFIF,^3oHdTq=:C$:3n]rn
%N$16:I`D$1_qY=5QqQRhDU<.LjB*5^5]r[UaNMh$76F$pLQNT0)E?#f!n*NcQD)8d`[IEr!2:*iK-`3FOA[;coL[i>hoQ[D^=#;"
%;7a;3biQVc_">kn[&`/0i+j##J$QA@1gMrT8G5esn8Mr`6aRq9\71<"D0G%Q<B(U'1Z::t,(Rmlq7jP$i420&kndn]"hSc9p))Ml
%dVVLH1+%_(;RJo#%#f:G:Eo*48;$6"UZq=e15>LJ'L5'>;kOC&FBg()Y/HQY"Ta3$3;Wjg()&KG+Qfe^P,ceKUl?t=o`Lf-E4SP+
%KjorqJN*n$M)^u"UfJqm!;:<&<EoTZgg"D7;@<_!f+UscZ)25RL'3(S*^"M4*PeYq94"#.,,obF<;1OtAqL<OHu2dtBh=lr3!dgE
%:8Bdc-W.NuP>79mDP:FS'iO755oVr7*hL\&*/AQ5A<^lsG.>!)Q6L\t1iATPD/-r'l$bPe7$:N<aP#0&(!$\1aZ<>6Vrf.YWA%Fj
%g&9Y#m_^U6e^r(kk-r+Lrd`,QmoSJWY<mK7Nb&NJ_\Y5F;@Ok0%pm1IKb*+gl+0/%+aVF$Z!lhHfatZqdQ2:_a=4Wqs(RLYqENQ1
%;ZD))<IV]okEKT`Pre)5#81.0!]KfZhFIdI1oY?3rcTc#?bWjeS(Y/XXEhOd6Cp58]FHRJXF_jUM`RokbGZgJm"HMtJO=a2JU&3O
%U%gP\Nb)Ug+VfDBM/7^iAg8<kib(XXaa_kRTTeRgJ"ED)2.Af"692lTnfr<Q`DA#X+jS0GF"+Jqd7#sGGB+!-F!F#iRe`3*#&ZV[
%NcV%Jr;3"XFH?g3OcrkJJRB,.$r)21c$Fu*8D-K_%(odr/#PJ9$q@\G1MB,_YiR5@UoJ>L$=Z.YVrkZB+V4@E'`+NfohS"*n^HgE
%j!hUja[;6&c"nm'E]d,1@IV.q4[k*eo6e8Gof:7X`Dh=lVAe3T_''.\5i1b\))c.q6,]R-5<dca<U[hPO+Fm_<W4B_6DRTliJN1k
%I8S\]&Sln6/QfPu-VmQO6q&:Ik]qFtY_PgZ+k725rJ<pa":N*3*X!q^'0PCCncg#e_ALApVofX/6mhFh((u;:U,:MdEV6/!*["+p
%q5;;X$,P>TE><durqsFVF,:P]l5JMai*HWj$Hb^W,&AL6Q;m#.+;/P9A0p@DUaC#D81jOlA]@."_8%taeb)IjP%$O.`I1m5A)g<^
%CQ[,`BUD\.iX=N\1T0e\,/1*mL')Z]VtDu]VOrb.Et'*]Wri/]V]2:B.N&AFK/i(sM5\,Ze/rUn.<D(OX7k97Kg!`B(?fp4*Xq0D
%W$gh,dno:K.'?;"Q>"4II^Ai`*gsqN&IS:YAJ9J;P0Go?d,AKN:h<n_Gj1B.P(Z_$/4K@00o`sOM_UpC5p]6a-f6ouaoaM&(a)]U
%Z5Jp%]8t[tcHStnFl$\DE&UkP!:kECPMu1^Dh^VVdNig$fJJ5+0IeU=eh9j>7AarqM;eN[\%aUW2a\D/W=0,lLBqE0*CRCI_0*m$
%MJe+8j(S%5*H@SCbk-C#@a7o4hXW53L^bMj6'TWEbER)U$Fg=Ph'k5\j6M0lSDA-:_n_N'ERZ/d'Z:'L6Ei09(-q;9\I(pKXRL;d
%b=>CWp@BISgEQ7\.7!u#7c5Ks!5nB3T9D;[1(Yrhn5ADloDeP=MU$A;`MB6<!Lj^33FYah]Vil5ZRA5`$WNbO7Q9VR2-gM)FObP#
%'5jB3:%V?<Xh>WV/CduY9a9&Z'PqWL\nmDT):.d]oYQ?o9":Op[L46.2RUE9?_Wn@DXC`WrdU/?'SG95n\if]MRI9mHTG$FQT9I-
%^!M_@&j3a@]:d52=n4LK?e`9-2OSdifh1!>_2sqFSj#rs7kg=j)lP,Hh'I;ff60HR*Te[A)YLMog\YrcU\JIa\_\r<TP.f0NlBIm
%DY-9n\Oq++4qWBU\7:E\=s9fK`ch<.UV>qt_JAe%)+`4*W?$(#ob=2C2.!`pf!m^223RkhiSg>F1o-+?T)XnCKefY'D\4Q@N.lL3
%dlGJ]P2=U,'qM_-X-1`P\Q\#"/U,B$Zfgc96N'/O,qhaSrT-"&^6Y/V7@QO?BO<_k&Pju)c5m7eP:W$I;Cn[&"0HWA9q'N'h;Tkh
%Kl*P^2ohDee?=YP<JjY5V>6a]#X)XS]8i]Z)thXDrRkrV0$I&;D-YrR&b+g",U'bT-ia1YTZ/7GcA0u4PPJZ,*=/Y];=:;2I=ZEk
%=(Xkj56k3#dX+cudZ&L_dZ&Re;MQ0aW2jE,CTbZ:b0h(S&'3;=M7R+tXJcW_[&#EFnVal3DmL%B-<NVMg-CIT_F%9CP9CWs+V2.8
%?^O4d%-%)"1QEeER?.:EU&2Vf_W5oc<`iV8B.KE$%:f[6q'^[!398*ch6dcO+^.2nFQ'cs+#CUU&+Z%_Xm;?I[EY1.D.V6BqJUYB
%`&bHh_-W#JGs'Q$&iJhJa^9?SgdPXt5OUh>kP_tE?<etlannhZEDp/gHZu=V(pB9aDaV,o=-Us)8gE+rk6NNEU`0K1/Od_QMO"tH
%QH^S$0dAa1g_+SMVYIb]hHc&n[#rJWfLEerg0dq%QB,dCS"=+*`FM([8\nJj7!JR"dgY7J!ZlXdfYa:AW\4g0.:M:Q[Ff&c"lDN1
%Z:_7Em_ulO+1EWR:JI3O_,0[l")mJ=A4Qe1k3ahKG-CERLpD;!8"ZPn#gZORgo0Wtcq](]&;K-lk]/tni]X#:fSOSO*u>L-k-nXm
%q1\tnNGF.iR#^!+"*s%4:)W7VY0udVoDWLK*g7?1pu,InBr*\a557\Bi`mmJ!:*[F0o^*Zo@H54"%Sg,"p5*ed?O*5682(Q35XgX
%eVEnmr+bEcq4<-1%bX$:@?!Kb326MP5V`06^V?t-Y*#olN[s)$).)sscak6WK)5IY?X+Y4j1LJSF?*cO\f@&XZL]sLAY%t_9Tn+2
%GuZ'+l:kJ)iU^QR<K`gZX@e6c1cAJ8PTVF7f12BG0X8I)'U^)"rl58LG&UkGUSe8uKq'^K"uqKpKfpH\m4oi4B0>%*@'"4erUsO.
%OC$A8VCm!";j1F4,UV93;QItE6LVdY-a9:c,T\VZkGpbDs/K7SV5X7f/A.R.Vt'T2=ho_^Pr`qo[R>_ng1,`3)Z'j/l&g=O50h71
%\WY(K)!]Fc%s:?d6e8c=!o,57*)UuI#shG3F.t([O,2lUNW.1Rq=972jmcV9KGt4HA-IUH%aH@3Dos!FjN%*`'K?Z@7`I<so:)+0
%@'QISi'\Y'1bdK]1?U:K2<mg/f9+8PFe?VS*j6%0i.(VF:FTe<`&.5O;_`7gS<>h@<g_B2M7f0"75_Pcs89X@rps?8lVJke.cN(7
%8/I#:7c6i?\(>\RMSBX]ZOoA4]:'&>Ir"7s7d/(bg(T;Y?hnTF,GnIHBVLjgq/g'g4[grA![C<E7gY`3-\StbTHgZCU[h#8=.4bR
%[J&N:oK^^_%[JI2OOBcaHo_H+o=/N_KZ=HU@HMn3E;*fWpS,9,)Ktrj&nQDEqZf%YD9P0kaoK`Qi24",P;eCZ(^sUBLn`H\cXD[2
%qY<O]P'ho;_@bgkW#GSXR]YY;iQDOT2:F50_omc*YBocSjm2J[Jiid,O$:Hg7l8ts7h^7l!$+pnH7B!`U)p(=+FtnC]89i?/%bc?
%>6:4nB;5G$Z;"\P<rTVu+?%V`d=#P`r=j"orj[g%i9NL0X?S[&;NVkocFaa(.:^<^P9Y\iO"_*,BCt,?%[Ji*?\!/GG#qP;oqC>*
%Ph6lA8c5S6F.9<(<e<f?7.ZOp;h7s%`97WS5c.inbRB8lFQCg*?M*m%Rg(#@"kphC)0lE0i#uC(!GJFV9g`BEm+C,N5Wr\[Df-Ie
%"m2]`*_tiZC9o%TV^#P]JUUB=P2InLX4$i`df?LsY4QeidsroHSkd=r#.3c2V7C;bdF5:iL1a;n0@9'uIa=P)5W%o;;4IV8MDrI7
%JUS4L_kj`<jh=X<$HKC1N&)!u<7*BfOVgDBgI<utKC'^8>:4^nJgdIGG"3U<lU,W0%"!X_//?T'QfE4cH`2C^s)cWN3"8=/6!,[-
%5QeGXat:[bdGjNVB`F7AgiF0iW"d);$(h\AXg?\g:OsecP?rJuTIKaS=Y]=-2XP3TMN)Q[[O'Bpao:C\`=Z='H9&n!H&+/DNh'$r
%]]\)1f_Y'rjbt;in;SY.4#GZZ6EN6:kTQ^#f_7UPlG@V/V^YOQ.2)n\W%?]*_@5b%."YU?0.%uGL"g%WdmS,nId*tq/Uso@@l69-
%`]W_Vf#;",RuQgiN<A`i[JND'?i9hMNkD50To5CkHM]A\a&Atd.g<!d1qakddu&Lf/Mh-#O"Lsfk<H=M/.Te0o*^l+;k_\8r&dS.
%dj`0H4E%8`D(fQkKHf5kk\(H4l&k=DRmdisd"g=r55G/4\6PtjfVMjs<r4&b_*h]XL@^6P%Y9j%>j=2flF$>fmrg'ZBt)rJ=9@U_
%&%Jf@Hl`L%Eues)K11oa^sBL1TVlc`e9B5r]0`UnBcIg#mn<!;'(j]m["ff052<i=V;6HE)[7uI5c4C*7W\%S%msdlgLWB=kW0+c
%FhO9`>p7dG*<npUNI4k="X_fB=Ul+VNl1j8G@MA3lgK6EW/,b+&'4,F-OjDn`92SP%hj7-#Xa%?XLKe!HCkCnd:;,j&046(CV9p8
%%E/*^G@MA3lgMm5?0/_.OiA;h+<G1o0>uOhq`Xs&8'qZ8LP-B@jm5ik3TJ%5-4,#Y,GVTd-=/m+6%"L`5!GKFj((W>"IA()%A-\E
%M'g.Hro;0;/U,i3IbQ[6SHlUhjqVGd@;a<KcCFidE"k^KmJ;)CNb1N72_fpT2oBujMH?i"Ul4X(k)1#R"SDb03Q+u)d2GU'4sd!Q
%2Ks``%i0I_N7i7KrG0mtn>4]e+*b'd(2%TgbR;&-m/tnmF-$.Y'eKB7Hf),=acU,C+(5)A2?RV[_V^ENPSsQ(&f<3r#.P9a.;C-$
%E^o7i;s:u_T6&4#4RTm_XNF3p7tA*A>/cKjVn'@kZ"(qL]GZIEddmY2\NJ7+*+uoZ(L/,lq7#>>UtaC8Dg3i3XX<D:qWH:5T.\iK
%EKjtIdX@1)]Q`U#2u@qD9<U-pDg7CW\/qljW$p+A7HUAX11Q]E^nF(+6Z-BI]pM#sLem2YE;V]5aSX.UM1,"b5aYK]0%o:6rjE:E
%iVH[jfk7F4rnO>[HJ<jT*QRpJNJRFY-!pH=HBkMV.Q6)E2DD]HbaT3?'<e3\oADY;df-[REd$OoAY8_+fuWNP4\'I0hsoX]21+.b
%D\#h"?d#)@[@G[?no#;nZ:DLB@?D6<TE6["`3W\0k(A`_9GrG*/4nr.4#5'dT-nWYEc_>[_f/>M3nG6Pm0p_*iWU/Tdr,<iA(aIL
%PGRtErf*'(^r=PO9K\+F+C7hkn3E-RTCLXbFo,n'^@:jLjgKsOi^R)\jCW=LC$.lZA=XLgJXCZHq2$)=<$f@6`;I1b:;WDHWL%bF
%RsHb4F:6JegfinLHo6:dWkOgZQMn6MDVn)+!K9sR\m:b(>`oBaJcHD]H&UZB?k4&^)qkD[a2;bK/(RKkViX)Z35LW7:q-0,N&UH]
%I<rCCSi<T09Y&i_eM1o8<F4qS+7k]HY\]l%rM]')E$h:/nEZF\8u]<o:Xs`=+>p*&+3[J+:#1c`b-P-P@EZi"Z4\@[iu+m6?GsF\
%JsWb>n<2H>+BaeMYV[PQh7X$bBMg?T"KroA(Nm910*>u#Jocb4Q7*eY)*'<!d)N)hK[IFp*3Le=^"8LIN*Do&7g,]q`)Cm<\g0.M
%kg?&*)>/+[j"U2I<!"C%UQo&YR$a5d:5L9?3cO$r/(X0!5shD[TGge;ifIrC>?$;SPM2a2+aHVH/gaHieA0#'F[Vp%99CaPi9HCZ
%9)tU0L`CCF+L\#T%,=j&=\VT>p5V6um%2sAn'@q>f:Tps8mHZ-7h0P\`'\(5.]46aBGn*0ruc6,<Xqb(itX('Oi^R!mf@=5X'Y#C
%4o@ksV[+Z%c@G4U`"8]3T74"*K%1qGh2dj8WY1IS#QHuVJH*LX%i"3gi^A*s<+%O<EH33:J\N_&'=&B)(Bg/=)9'3,ODC0*]8mk4
%f-AeGnj#HT[^'ZZVL^G1gQ`#<;0@V@<?;[Hca)aI.2!0Q_).-3]Lk,$j;9Krk\\HEC6G"3S*lp[0[@5nN_HH8::7,*LAGPnd2hFj
%AT#K\@)pLA9m;\)+Yhl#diArglXP'm(_JB)c>LuYYBoCBcB,'_S*kg&P<*F0*V,ol_Ij\M/#G?U,)Q>n3[BUIW]D8.9.k+^"/;VB
%r"stLTI='0`7)W\I@0;M97^?_(Y+(:RrUP;XRb#G7=+RT*Q3I^`d?nZ*oe`UmE1($Pu'/inmIudf!Hk:/A.,/L3;U/XtL0k?Bkc%
%Aej5_jal(=BIRiA6O=F30i%CmT+96V\GG-PjdL/]nR,1b^.O=cS/cB>E+_[SVgniRM>@*-/`h)F#g^Ra,b0=>)8XS=OU2'X<6's)
%@I.Ul3X&4_67p_G6p=t@%^t93aK=ImVM0d,iBP7pcrTG/)2\\V=eYrW>u^,#5rSljPI%>.D.+OY6m7b=(qW^ZZ6?_Q#VJ_bnO18K
%D9le?#rQFeU*r28b-fCk@Q2Zd/9!h(_Yl$>'u`@jIpX.%8!qX)&W#-pFG>AAE>Y6M!5U.I(>T?G</;S+m,nl`#p/2CZ,2;s!QBMh
%dF#s*BKO`7)^F(eUKQ,1E_A,>;eOlRG2B6t[gRIVMeOtua_B2/*[qs>0VZ(qP6+On0^gk$]9HiHcGY5E)'R4a1epkJg\,jncltUJ
%OoEt4i.`P7WX`jWlbu*A't=t\F>A9)e"Y::W/$_<on$2e3CGNhkc'H[kCYId<Vm<XETDETd8;'&gY*8bn(B)>nQ:ON1pCP/-=@CN
%iqZ$'MUJM)056t@%RRcJ2VGCOVO'=?d)^1QZ9U]#Pu.SH9t'70a#%X2gi&KfZPLkTEt]q2f2c]o\9t$.9!j$McL(]47+:L_@NkJH
%IDRGm^`VW=kC^uCX8]Oqa]&Fpb`jp,;;_ee[]G*t#TPU'gH+kt[iYq`6oD7LnjQ/fPggOIA0V1uLp/EsA7fIA@;o,@(\;c=#=+^!
%kGH3u,FY=8Y*O``_I=KGj(_69PURI$f_$<7-?>28O%']igr6T8B,6J6K^5PZ[(+M>5O$!'mJ6Z^c/,G[5?sgBeFj"+rnn@_kX:kH
%@loIB&1q"H7K2mn513&Z,[rXABp[<lcj1,iW.?TO't-N4)i"t/?<!$U]$B0gV8>Mf*HP&Ni5;rsb;O5H-D?I1"^/Y%X6\jaMKMd`
%C=0F6*&5K#2BuI.k_#g)&@8]fS`@Yp+:Nn9nQ?)qRnO&PJ*e/B<<RbF%)>=C`oQC?Y#(L)UM'UG*X@KDW]DZFhX,isd2rLY'Dim^
%WdrB6_t8&jVN\JeEEI6,^gA>^i"5ZRb%_m!e>aM-XYq-s16_*nL;`[9Bhug?8&hfFlpL4\VEbG&'o/l14[GHnNHPQ1ib.MY;AAbT
%D+[5sX=,'T<hX$lDJ8J*^d!=eI?JJ=d1(7qT_@?F4ipF\;Yn&+Vu^k88^UR#UI&?Ck]WZ\C8Zrh-u(I!iBV5(@RZt*+n5%2[KU'K
%diluIF>!)@4#DBZ(pY8OYUDs@@23kS/X07$:7_?]<LFo(=btNCHnE9@Z7!N/2L;mZhVJ^"0DP8SQXOdp]SrsEqkU7M0#b+L+jGGR
%_(V2=m>.OAfAK9U7NAmq<)_XCS@ce.$T++CljU"%7N="]U3\pCK9_ql2W@p3iF^$9k]=M!3#DO,r>]g[q0<kK#NPBUGG"W$Yr@NB
%0]*(?hep0AlJS_;UUZ\0@e,l]-;gnF2eWENMi@)*P2En!SJ*Ad2nF?3=.>\rORJ/"/9j0CZ#1r&6n-r^oX(`(5;6/AN4P6GEV6P?
%B%E:(/2Le<d;aOges_j4FCPc?VW`3k@B9Kp4i`Pe2TFB$1Of%4WQAsURDS?j(0,JhU?_eMFOP^Xos`bTE-V+k_XFsehW'')YZPC3
%nWD!H@=HrW6,gSl[tO'&qrNITS9G#&O]nncg8HXV7$C7-W.p!8Qir5>bSjH++dFTO!/`978T^97"/CWT]n)RebX)jId`[6J/Xe[j
%If`:!7O+P(T)V'Tq+(d^Ppk"E"qdt1MFMaW_%7a!'n$R5[/*N0$T?*#1DPcK#PBLeOo&"\UrF#dH8$\'.S;3<,oWisbU,(d<*IGU
%Uc-(,&g&\$D'OI=P\>rF[uc:B@!=:G1H['aJ7)tI3Q,Ni0'a>U0Icf=c(34N(0K[WQQeK/&imF:VT>^!_7XOuLPV]<M`Z1N6&Nei
%9=%Keh$sIie7].^Y9*fo[S3Z\rGAfhPlU0Lq_rV]a`gLBN>'Kga:QM9(fc\!+gXp4eD,Sd=cr0n52B`X-Vt_(lU@8Q*/&VnA_NU1
%7R&LTHjV/Vf:o<LOJ>^32NfDTn$Eu&-/P$@jN6G_NScIU-q/a<f?MTN*E!iDOh)"H'\WmoQ:95\"=d`D3_h]hjIh_k%qT5G4o-B*
%N>hR^/\9W'Xrrn;Aeojo;+i$_Uu%*X'(o($,'laQC<G4T1J0;*?c[Rb1mVu41nk`^fn_)rQ\LVM5Qa7]Wo/nt-+6:\hT<70?')SW
%e7b.$AcGc"Unbe$'0TJCI46P\#b<,u13,FU4[nm9NR@*8!E@1%a5G,kV16BTiVg^gQ2K2IM%#rsA(%eE_t8*Ckg/.U#"K`-9&jqj
%r*fo"]Af_Z3m.(Y,q<SLl?uo0/a::J5".O.?1/0RfFJE5UB`BGlq#b*&ohKphPVd0HI_oR:J7g.H665N;Dc=hpDGXno1&193kIRb
%H67%G&4>7F5!>)me>qG](GjP1iG+u.Gl?.B53\DIjDJ.n^GOpSBmk[cKI&IWcT@P;ldYe'[oI8ZBmmi5g=WesadEk7gpB98\V6AD
%fD9kkG:hGC\@;uZ4)J/.#utKaqK,_R.UW0m^?S\n]T=j1\gr3=.U&MhZ"a.AbONYWGVcE;d1P4J2_@hneKc92m9Pn?,i7a5mulIE
%:u-#9QWI$a9QD^\:9NS;SQ_U&TM84QC7Ys9U6Vd)L6%%fEA^O\?UMr,C7\E'P8_Zp4FRj"NWW5OpnQ%K2`4B/\=V`[k4-g(j**B\
%@$j\HJ"NutJPfkH9n/qkUPs1BE)GC_kt6Nu40!,*BlJ1#$k8,oE;$F!rb*dOI;A83Ettj\a1SBj]IoITK3S(f2#-rK!H"L:BlH6Q
%6JjWpK7Wl!%IUHORV*g/7Oni1JZ,'pSfS)gd`Dlo-KharZLT*mF)a>fmSCilGp"N+(8'ZY2Uc#G+\Nr`^egUi:8\6X='g6(DBKb4
%Ag7do?@IfaEV9//&-Mb^foRT[[)sNuoTrW.TlaI;28HMLB^&L5]0OmOHOAm#"Tr`Vh[!8t:cIXF3o!rMr]I,'c2Niu\jg=J?60U8
%Tq'[j$rT-l-;,K=_73n[Wihm:19-k]FK0kN8.CLF>nF<m+RsrS5/XiS=A'Loc7h!*Q08p='\P_uGR%$D%HLp&s7UNh0j+Y<r!79@
%r`q@80>&#`9:4]4,#'8LOSOaaN4YR1@*M]3S*7tLZ&MIm',*a9qp-u*66[Bk\Jq]<7q8K3af+><l>ZYiYU*(;H:)ds&7:(53Z8r%
%U@U(Y5]<1sI">M1lZRP,I?kReGa":IZ=)OiTk#(k(e(I0!#caA>C0k>g`W$:V<i+O#T6IMP`XUd$<at!I_o*C4Xk\%4Ar2mnj*%&
%Brf4&5-'-=Z7pHXD7c`]C_28ub0.=;a0.hl_(V2,P5k4WD6EA+.P/lo;BBpmpXlA4,r6=A!N1a:*#OWpEB/OZ&+4Wmd(j8>K,ZQ^
%@pB"?-I<']WG2kH_bB+?i8_9i,kj$s$6;CSW9msWZo"+\Vspc"Jet]!7$,"M\ehSrYRX"k9gk+\X^"KQUn"HfI.6Od-nHP.e+"%F
%UoHdTfG\*l5la@gs0CJ'1.5%C!@Q8B/NY_rA'0.5[c5ar=t^CUnG.ZOqq)!c>t0Taggm.tU^8Ogl]!kGk6'kDdG]mZ-/s):1d@Ua
%-]R*554K=NX#EaHY5VAdMGVdqHL:caERY>B)nijJ^bHM"eSJ\`OD\]8"=c[JZ5X^]!7[e(c7.?oHBQFn[>dmqCM@Y_ZN!%0eZ.Lj
%!YLP47r)EP%Gqomp@]/W/loeE_=V#tr;jT2q)K^)$nbFC>]`)'@)\:cW[*A#N'HE1L]G[f4uTMa;q)Na>;:ehaK1EK\K&m"$Okq'
%^TFI,m`efVSb:Dlr%s[3+5g]<FmH-re'Pur"Ek!h&:=c!*<o)OrX%pI8p#aRD-?=C_n+6MFe]BU*_Jjm^#LFOlR&pbb9`2I_))lm
%gg15J+Q!!>iQ(*bibT_ZS7V!h,^J`DnFCN5gus>#f%iC9=`+IZUadntKuk"OKf0H1h-XAs>,3/lW'relUn8aCpA)BjB\_c+BnHW>
%QU57YDCiid%A?:+pc'*G_LB]#O2<bSPngYt1Q7aW5=H1R1Jo'ZFNm-?TbO>8\7eT7"LUr;JVlZ/L)=d9f:=,c/q/.>_,5hhf(M/A
%J8<rTlQZ9#CuFjAfo>$7p\fNNW2NfFZ&J"\M5k;24n,DsQ09@1gHU^\'U08B$*pYr8@,-09!9Eq'pjN3<`V;UEaE'8Wc7qKItF\C
%_D=\I!#X8'iJM2u8@UeQT_egu%n8+kK)sdiUtHunQjtX/ftboR=dN=b=E0?S/,g'(&E0I%Pq<A],%r$59(IsWG<Y6C"^-:75VWYX
%"X0+76j^o5.D1hL[.p$S.g[$rNXKT4Y2bCVOh2GY9ctWr3VDB>SI-Sh13>Vf&6)Na)PX7Q7fY$CFY+t?OQ:hMr!ob\Oi:Fl`ZFg$
%,Kf,-A<I4c3>W@MDKtUTV`VQ+&_6\\2I="Q,3nonr=ti(=fn+L'i))83LJt6SOEl!#*[Y,1!XrqQRi*Ag;+;c'P7CI6E:QVIS\5,
%\oq'="n9b"="XXUKT7P@4SL$jg'bgp3:\$?$BA/A@"O['^au@[\Mhin(1\e#IsWjNq]>.:#`Nh6,<^5VI>]PEcR!E1@/cIP`L:1l
%!$i;!l,Ob,.is]ihRb_e/?]9_L::7\"UJZid0JL'\Dn#KfSKK0KODa_LfJh"]5)!?0BfI;@TsUIrNs6j=:k6nCS'B'^"Qi)9M]o6
%Y$G#g,P<b.s'iWR($/e4i]]5*;Qrn;X-^?_a'"G6e$sJY_/+LX\C-H;ks8h/_ZPu?=@tTZrbA14$P.OM_JH;X$GErUq82Yo5uc#$
%pOgQ`EC(`p3>GntUXo.2RhUa7hrVKSn2fs2MMo$BEg'sX6dokTRkRdhVu=4Sibpn.fTs^5"2KM/H/0q'^O&S6#+i"[\oH>/5;*!7
%FYo23d$g"b=+%o^<4b"*UkC$eGL:Oi>RHQrOoaLE"*Uj0RoWBsUCi;l3hI?f\`<7h;fj#gQQGNUhKF##Y.#;Wi,Oe](KJQ=Aq?U%
%FcUqm=k(;.V=3HZM70j0;P2A(F[#9WB=IPb"'j'.kAs0HFNBNVm1er[4f([GcIX)M\F&[t4O/H3<X4M3kY+/EQ8V@[qrhsmlVP+@
%kAu!@chcLq@r^EtlN@<\ca?KTg=oBMrn14r[-rCud>Qc9SuVtZX"%-S;[AtI=%S1WYrK%#;P>CF:_TnF9?5R[q^-WO_OW.:rBXI?
%D"cTj^_&slG8%Bce-JZH0h!mu.B)5+`TuG7Tr9=PjjK1H-KR!J>F2KN:YE'&Y=euWdUnB<c-a=8a+Hl#1LA\5n'L,c7*&sD+?&8p
%7Hl0`=OZp$K0T=N3$2bJ2rCLhG)q58<P@6rZr<*TgqsKu7,1<Vb1XtReVSPZbqmZIJ6]XsnXn6O.Eifi@PN@V"@pq#W7`cf+p<B[
%6uc>6c(s79DVjiH`?l('W6q1\#nf\h=9N6UH4]&aP8b'5@dM)HP;4o<U\cTV#qB*r&V@k6!SgQ.s2C&;VK03],t%ZO`e-$*Qb#PA
%+Ka7qP/buSAJ\o/-&#X7,_su@b1-j9DUO?SW](E53>#@8>0U&(QO%6EC>B!ag+2hA0Fct&'s76N6>o/bF^5,n;9C.-4=BB9PMt,1
%#$nn$XMu-^9Tm=W3#"&WA!E=Qc)S8Y>@$UZO9^JFWu$nX_38/@@ZT8g4^Y#*^nrN7d;AYecV9\!hW>-!Ve,&gKX.UX]hEbSXe(\A
%D1+N\&<\4O^6Y?:brM/`\fo'h;+e8,f=;kM8m,_'PL>ufNA:5IcIdN2d8.7tgs*m_pFD*pQhud#i0k_]/@!<*d*:g$8hhS3,^jBS
%;$t&uEb(apDn&?!Y?dqP,bFIr4f"FJh6g=%X$e&fV9+P27i)"qf>j!RP^E@lE,3Dcqht+Aer=c"+9&P;o!,gX*gj[NQM8@[ZX,`,
%iM;+h<'o3f]Lb,B#\p?GmR&G'_\[0Co*)bqpsq(9JXX:q]6reEV*9aGHte;*?,0jMHe6O&nB[o]dMJ`m,ISET_W+k4&93APqt!1"
%q9iPQ0/P&,hb&#WJ+Thd&i>Z'(D#d%/d26T%*O_nhXFXY^YuqC:kpGu[L[EPLdKi<5Ge7XcSmtPhL+h+2+nVMZXMr*$c#uM=",+O
%^i.&YUUV(q'IlN\#L(skd(;QoKXsC(%KO0ToDWQB?s_-"qoCCqf&2P^dc[YF2Te)VpQ*+cJnSqZM4V)A]]CL%XI`]Skro[POU!-)
%oPbeR!O)6!/\Q)olZKS\SmWZJnYYJ7!%SbsQ8oI`LdLf((#<B44]pc%h-X4pW9KXg2:9[YRZujdh(EXqL:T28k4f5(mX%^\f'EoN
%ZhN&ldr[N,(WZ0[2bBnplN[Es$KuG901(c+")e>X'T)aVm\$-os3H*,@>OBKguGn-[CH5V\1POLr$/hp)Y9a22ecbrYj'?HUrYtm
%2n+j0jVCd?[`1bf2S'T$H$7T3k;`5q:5QIAl-U>snG_&Y>a^-rgB/n]Q:GObfGJ(tB0'V@M?5'U.9(XO$nmJX'RG$SWpKja)OMi+
%^-6isK`NP9M!K9sWMFR@q<P8AP_$,g(5MQ$N4QDM%_>HreqjXFIJKN;^\_V0hFG0-1D9Q\l=51(.O?@X#NUc#.J.^X#)AXGE+;L5
%FTkV"8\(eqN773Gk'spVro;qH5@3d(Tc4G`Skc0Ye)bOqE!5%^pm540cXp,*>2D;1;0Il67tFfH_%DPE/i4m:]FFN3I$eg+Zj<Tt
%/]9o3..Qhq'SaVpe#99-UL+IsA\-(:o7WLad65?#(+QQ%a2)LT(S,ZO]J'].;oZ'-5.^%p@C*F/#Dd>Iq^@)BV=1N2Fc2u`7j%.\
%Hf0H>#lhdR@N@pUfLnC\0.pgEN&=%[0F//D>9e%2M8r@CRgA%7MW$u7WTj44HeY>Mmoo/62`?N#j[iM2<VX37;,;R)2]Nn>giom(
%,s#4MLbSHkWt-Y%]Q`h+DM-jhGq`Dt&'+28bg(K\T)K0^!ig4]kDIDLXdY,N9e1Zp;Ykd'[Wip?[l6F8DJsb9D=HSO:0hY<%6]A_
%Ds)iTEL>8]Q16'IG-alY!'ecp79Y6XmEoie-8!$HK,G3omua^VUrZdHO.peGJE\$"JJnI0Y!k[fMI"/W^n6M`F^Z.4e+A]!M%kqX
%BXd$2G+>`4;E_a8gqAFT<7E$2`c]kF21$"9J$(%kkX4n<E.GY08pqXsaT%lehg$-s;h=\Z:qqI)W"F*XV!q:?8R6t@U,(IhW'#/K
%Xt?.S;0Be4Uq\rE+2;h[^6$^r<>aqV@e%;q?)i+U+.L^;9_`uI->$`1-p2tX:jE!;?chkbeD&(JKQcbM.K#``qa#p[DiKD(NkBgT
%L,Wh$IneIs,FRHubK/`amSVMZ6VTILQ(23$ajV'Gn3[S6rl3JL@I=q)5Qdh0pWP7L'd9aj$BAL^"AH+qTiIl<7]D1eSSHkmmLb>*
%rfZj/^LP^<&)6`GNU"PfW=SYb3R`j859k[Kgh?$9a5[cbZ&#P<]NFO=AE>S:$<(q^<l-c)lX[.Q^VePq4:!tqeM9J2!^am_=d9hj
%n>BCIWXn:=%4(O?4-DCeX<O#j"Xb])+?2YZaQ`'QZN?a$;,t&q1BB4a.!B3],@r*es6IqL5l2U4!/b[8bQd41VSD[fq"@q0pTL+\
%es01_Yj"r;WidP(`/4gY1jUr++R4!MDGm><\,XLnN-F2&;+Nrk@+6]r3P4<+<T4r0L^`8penf?f,IO`:A"a[c$5>0pq)NQkh@EV6
%f_d0.YHru%Qrj)7RQu%#]6R;3MWGf2IJ;S/2B-P_^S.uk*SKSHpm@Z.^XrDbD_>3AH[f@kq@SYIp9j<p^De`Pb'd_6bSZS!\B>5"
%@Nal#]<7oL7[=r([?c_WoZIg1?9')q28sZch(I\g?Y!i\[-8Ra?e5GPg:qDIqlVksHZ5Q0CS1$@qJu@*.BYY=/2(FqAXG"&qj48S
%2YMm8kW/_,K1E]%fBo;/I.0l[YWC>AIi[MooD2`+>mFbeE8J<FhL+oM!,GSoG$P+s\!F5r?g9f.OE`i\FOU9M_6[AF[SpYm]]jkI
%mDEN7/'(JhlcqpXh;99D[kF40hqYj$N-/q)IKM8Pe\1u*-:,6.edrX'qgUeSo]pn\.C--`#6<Vo4tcGfH=6?UmTaiSJGm<0qm(M=
%bp29b42Io\`n%mqc.3tC(&kT5_1u1iQYh-qg:l;;*QDKo)o1taQ[XD9V?;tPk4>"tdQlp*Fn@.p8!,Kg6]>5>+e$8LD]R[$RBrZX
%FEQiP2p^s&o^fsYII,W>p^8KTN=uG*]9\6W_JBgX\b,\AX[D>_c^-RQQ>UX9f26*uD_V4q<Xo<=XRZ=AV:?+$Zd8@3N>*i8UYUsK
%A*NfDpXoIbE9[%b3CDGJ*\:&MB;]j@Sa?lIV8(9F4g<)SG+:A)85u0>'<u[jRtsdb%f-+Xa3r.!@-6Wk!^]]u]O$:_mj!'%+ZsZn
%,_H(',&nM@U)3bd.+3B)(m2=MIGH@#B3u?k4,'L"gtr<#cD[)UR`I\YmFr[E]6:jTg07&N]R<:=E!GF+.i)b]V:K9QmAt^X6JC?A
%,i+1ddaZ53FZ]r8lo6W$4%8jKrcXX6e,/HIB_LndA%4JeG]<,A^$`&<^Ocglpk"'XFqZC'1n>j)<8W.0.n-0O#ofBbI?K[%"C3GS
%!pE5(9sTE)gnN9l;EM%n0mt4)PY_B\P3G56#'a]'kkOpM:rF);GQ<",ac;6VZgCDQ+PEkP`4?2UET;^a2%4;-o',YC"Q/:([e,R/
%]X(I?8/7XRB'.%oANf#ILo`pTKQIZH_pcL8r2Kr(V*g+*_#F%;lTI]E1*9-&:+u3D#NJ'5]g+5F&Pi/o_J<%).He2)I3<qR@!4Hu
%HJ/M>DOF,XnJPB)jbVM+"tV";g93;KMJ;KW4:-jYq\1iZ<V+HLhb,uKb`@fD;d=C&q\5eX7%DjhIP?^&4NCd8lb0^(0Lg>DIMeTI
%6f&Ul-d"&HpAM;'3LIVg-@l`dD.;FX1L/E<D$''ho/.:\@aK<LB1ugoJ^+^l]$;*GD.,+A.`jrr3J`;.dXu%Nc%+#`SDSKU6'CGf
%/tL#hfYNO1dba=U=?@^*\VbcsZdtq'kAZmM23HQZ.I296_B]J5ecD5XGYRF;'$jOBS\W&BNY[KTJSJ'KISY-)[pTosTm34F]H"4I
%OQqp^95c0?X37H'=gO1_*>\'5KkskH1n-K^B!CTK"A-@8ILEgkaC-$:[@[$9:GA!EG)f1X_lO"R<**2=2C*rlFh@Uu8PP58RGl.=
%dV20kS^U,(Q4GZ[EP?(I)<+UDR8a[S&Okgc^7&m_=F[H">?74f\pf"-X!WW'<\QYa>cYOTCM5tbOS+W0+Uc_#,hC&d+eIqu@uM4?
%<FZ-l5"H;c9r!8iU)Ro-_=-QR_%MfB@5_8Sf4?Crf^1Xb<IdjU-L%R+C`lON\l[t-7c5,PFS9,1RYg(i<FCk#ME+cc9(g"D?%O[j
%W6nlb="(>Ca=,pYRJM[j'a!d4GG/hhTE7cIU2!L@rY8#HW6n0Bj`KM74q1b!*70ETe@=m%Ya.17&Mo*d((qb3m:,QO>1:qKCJ2">
%l[^30e!2^%@5q7i5q<5*lKVZ][8IUWHI9gPQ>Bh1N=6YPO&QUns2[EgbV(fN,tB.5V\0G@6:2KH+RLGtiZ]joKWa?0Zm1h]1$R/>
%H2@@]lC^2\hgW"^3PN-a8'm^iFcn2QYJW=m;OS*+K0$j;&5i?t8rFV5i!W:d-k5#V^bd;,bU!*?Jr5to3m.DO16$X#.eD%U07H`p
%rB[NJhX^@uQqpa)d(fGLYV"2QqP`jGgMa#UOD#rZMt2g7m!NrTl=#n7XOD49,$8JXFP&aIF>DZ@7PVMk^sF+^MsT>6"V$YR$&"/.
%j+IikB\re9]0t<[c*!'fe3,ZpW_eVs*EnR$M&?oOj[ZZ^f-Z?6q#B8lIu5d"Mo_W,itO$b!W<D*\[2Y;RRq('2T@FJ1U:rgj>cf)
%Ae73%7/"`PB5&CAWj5ae@:87^I(#g'4Xf1G:/E4=%P(Nkali8/N,H\aQb[1^I0n]S%VUlk(!)1j^`b2-S(POV'`GJ%P`ZK#00$:%
%5O?V7NqreIC(,1fVNkW?HUS*Afg>J[d+k(G"8ThbU.P[L1'@Z\<s;>&9V='TO/C3jg^i.SGILEWWq=h\7(6*@H0t4c3WB)-G\b3>
%ENM",H[pXfr3ScK58:8(C[CBm:H?@KR@]*;XlqlK8>djC!W^SZ(j>`up?>#B;4`SV3][$3OVs7/%T09miEh*:3-"`6Yd`"h]fC<h
%qhqh?]Y2.X@[rlm-))McMqr'4$fD.)q\#>P,%mF-jpS,fC<<KJ4e'p9`hB/Z%4/"uklYN^c,2@#O!YJNhen,RW-U4),1?iJ^Pbe[
%!:)9APZd;:K(T@=I13SeImPl[R+P:?:dA^kKM_Gb+5*QICZ9Y4[?P*6;c2X/L-r%/Ga"Ik_Nj:r?gt^`:sZg"qKA_8<ts5,5;Q4p
%5USTYLqj]90q=DdGga`16aXKOX_mM+\WN?\LE'\I/T'Vrls1=ClOtk<j"M>q5R8i%MNQ3fh.;8H&(;UQ$8Pda']1+m(sMXun3k,-
%Nc)4Xr0T*];:g'&SkhYWHM-`#+rG@0Mgkf0_7fXtY9S2?#4F/%I;:H/W4J_n#-uV<AWR0)D$Z]2BU3m$cJ1O-N<_-\=_</S.c$'R
%.:UYGWGR/`Z;K;Xbpkqm.G[Mt1+Eo7<3rFMVgA2XWu-OH.MK]lK8>a_S5h7Cn<V)HR<R`V;=?VRntGE`YjkV4_Ws2mF0h"q61_&2
%]hUnhap&.hW=T<6rmA`=UUP!acQLpUd+uu/D:<9@6sYc*biEcqFpWk?1R@4Lb/2XOO)u9_Y[1i]`SN/07j^I$2t.H2)rss6iRB/d
%!\U(=s"ohgT7q_kn<?RKb9MQAS?)O1:i;J-hks?0I,bF@W"_f"crWr<+Bbf/geO+9gV$!mfhJ;*OP3,YN"J">!YmcV9UeeN'<%6:
%V#obJ8%;DG_X3MXes-Ta*[`n[X,Fn7R3Zq.e-^I56e\B@c!oUI\7,L+hR\f7X($?.@)&OMiTJ4p+`2O-L[W_DS?WdoVHLtP),n+]
%(;Z;?]4r*Qq&.d8'U>7Kbp$")=3X(o9ibsj1^cb"V\Y/DQhRlQOJbU>qb7b4!!+Cjp1[SZ=O3]'EumD=q:tPW\8Rf>hF8F]Ve2VS
%,VF5k/<dfLH)k)`N@D3X1^dB\gnClRYT-jlQfb/KR$JP2HSX+QK>3Dq:Y!=0k:)nj<%Ws&S)Ou<e\];,p#2q4ITRQkq]W+pBnd0J
%KSJg`=m0@IPa34CgR5K0iBSY2Gre[UCl0.B/_Si$ePGL)AjB-i0L<;Y<iatC4@2pQ%FUVtH[_%sWVIMb7J?uQNaa&bG3="?NXIou
%)Y:d$DAtr<NJ:%hG4ekt4ShL,>=)r-?1i:*!pSL!dZGW`XbdqGTNBql]*d7W$A4Wp5Y)uE$7.)k^oN(6P@7<KjL,<09/SqNDaX7C
%Fo'"PLqTNf$=;eWV,pUt20!r:l7/oCP2I=P4jqcU+,?pSFhVafc;G^U*d%.4hqh@*GNRn7Gb7d'54b;'RPM_:BNU%adVZ)Z#%'1G
%U%EP:lbk3Dq,!J2&hO;J)$cf9_3bcIBnqfV;7b68J\k1g$'>A-;Aa;S$=NsY0Y#5=(J:BO8e%3QG^gF^%<C@,n\qW=A/.<5"`n*9
%!%<lL^5A)2;_e6?^:sN61V:Y0a'U2%$Js^/XqO*2+I%9uFT.)md:OSZ*UPm"ZpB#n-\CL(_6hID_!)M(+L"QC&'_+B/"6i/(V*7f
%-FeXBd+r;chJrd.Hm\&XQTr9`i^%KIHn+!8I`M;)[Lh\iHG)pJ.@p?caqanC6?NXns-<"ZGEJen1b.VI60se;e,HpQADd%h-0[J<
%7[pu^KIH\>*8mUZhfY&a-*u&NmF&*Urji@5I5r^3%<M=g7)Y%ReDe-<32g3//CsIp$^rpS"!XH`d)=na=P#g2cfefZmV[n>Q=_D>
%b<!o?!nCG4NAq%e(%n*n.=&5g@rOoe&;L).AeI>2r>%qMj,c^0C7:+6NEM4'[c:W!R.D.i<9r4-.c`uhjCK"t!0`8naQA#O-it,B
%WT&kXpm/qA1An/fS_C\9M,#L[pnZY`Q0&1`+MI<$YfCIg"1=0WEVDph6fpX$cdK!sBl>/o(WOHQ:bK%uOH$54c,Wn<-hc9?EHgEi
%Qf2VH635U&klL#KBgaX-ZJ":AeACkNZC3hQ_X<`:dmhpsQPl\3[8@J8Ibf^FL7Bfh4DAlp]srPq0@M7/HT=!`oo^ucIh!Rn\:3KM
%H"5Vk`d01tc;a/>=\5'<5HZmC#BQUD%7amL;6K95XTZVKdfq+(O^_:dJ.qQHEBY!(P+0mG=&i'-jH<p3_5N;L]fnp.Vk$qb9gXZu
%/guA2R1)13imSh-"G='$hF\mdNr=/d)*]-X_X@m0Jp4&Z:'8PslRpD_`I"7$HIYPo8Es4,OaHgqlL1`#V[bi-6\g(MakXLFbAhr4
%]=O)E+(NJfi4p08WT!qU63tk=Gb[b7Jc[a"Df_]C?Jh[M<pNC1=,"*ipBCO8/c0]BqsRh`@=H,"Da1P_(\NP]8([SR&-s#m#kU)<
%$rJoW\4N[/p0m0odMj2Cmr_n2DB2dh*>^B';od]7PNCP[a_NnfpI5L.SMN]I`t)QLC-ZXNhF`p'$&NJp#c=V`bmU1B3?=KDm_5*V
%P8TJ"3%cq)_sR>4$:]2f%CP"$=N-PJ:.@AmV@:?jgLE.Ji6scAOG$d'\r[J*JgdM[2[Fs*CoJ+g;Rt<N;&/BTr-?/EnFDPE1f(lp
%%mb`.YK]G16#eXZ.F*%3(mAhWjbIeF;ZmZl1gLQcCji`H-(Y"@UfD!=3RUq%W3nXL7*Kec84G/XbtjZ9e.dph:gSp5TR2eWTr2F\
%C!OeU4/45T(/4>FV0nMmYR.262_V%-4Pk,6<eAPi$:hrcHBRU*2.tX@oN;B)<-7F#q.B6o7f^'L-,s/!PFSDN>puuo%X;Urg4<>i
%36FK,r;l%,Q?i:*'o6[E:fWdR97O1+F34C7+0P?Rh['lMm;3r=BZtYe%rYiSAP>p;a%Aj3s,"B1V":]VQVJ^NENLGjggr:J[ebV^
%s0C<d=Qr9+Har8#\A:;0$*dqhUDp$2Uq0\U5U@&fZRS'c\i"$&Kq@EU0seEGSkl%K6;oQ7Dq?`_e)/1>O+SA&gL2&+YrqL&Ae2B%
%C*OOXD*46dTZ2nu/.:dj*?n^R]kbr_e<XYUFak1$7S:Mg)tsI0A6C).hf3SH]*VB+B-4O9qDeuRlcrW'FU7/]db0@o>4oRMoW&(j
%Nu=r^W[.=&JC(Z$1A_%ar1uF]8*=jKOc/-7!gN\Xa'foQF<]9UY9QRqhrk!?+L3S:+&RIo($dc0%u0QK0M9*J4T5.Zeis/"[>s.h
%Q!Z$4+#j8!j!arG\ok1mA,X7K8>p/"/869j/;t8e'HtW'Kmk.$U9DNF;.L6&1CGnfPC?0CcO[Z)j6BJKb$0"G5i/cc[hM/$#=Qq"
%KbaohK@'^7G2-sC'>1SW+c;rXpdkucN5cCtiUrm@)5MhWEI&LbL.2cgL_Kl'<=/`>\?s?o)2^U`i;puCH5?Y@=jk*)%&8ZX,tTNc
%N#W3<dH_^/!@Dac.3o4.!Y/^j=**1aeks"Z&DGT9OttT<EY3a?H$+A7i#K[V-s]EKkW01b3_2oNX9Bk5YFj8,U=X7QZCjoW$YpGf
%G_,$qlE`c)j0_JJZ(]e"TJGM<XldV9K586'bL5)b&>cE#T`WrRW!]sd4?cCp2=pOr51r1$9p,Fkf9$t.[O.VgiGjJ(-g4=H#g,%A
%<1>d[k?<HcnT>lHV4&YZ>RX0Z6."Z6IN-`bD>M=ILP/_u[ZB5?$n/pZB1Icm'Yem&,sY!/A!Njao`m"L5DC4KPDFqt,^n<cKs4;g
%-8e5S!fHhJ-H_*7NZW^Z(.uCm]?HgtiXm*0!RmiG:)aXlU/I'laIg>$XP=C"=J*m8Tctb0&Ee#SX<=52YGnE;$K5[GG!d.Ac_`Np
%'8dO2YYI&5!9+b_.^,KT.JYS>*G%-Y2?BGN*?Ve'i$YI&%7+E5Laka=1pNKe?NjuDjL^.\OID=k$Vc"K2acA@I3q>!Yk/t/'M+)4
%,Z@=a$rYkk+K;d%EsNOJ_D9E$Zlju`:K"A)Bt2_n\;aCNVNDSgcOd)RG%>]8Fe0e_6;s,M7Ot8[(ZKQo2>q^O3))FIQR,1KR\iM@
%&U]hkS=3)J)3uJL/W/,Q/.pJo7JZ^qTlZ<^&Q%fT28Fpr`^ubQ\5L<tFQtsgpd:h8Q/Tt2odPkJjJ#IMe3H(2'1J2Q9(IL4'rGVS
%Po=nQFR^8r6>Y,8B])^BBLJKc'Q*?%IhO?!CKFN4V9YaFWR+_9_.SlJSY;>i]PZ(WSIt;SI,iZ('tBM;!W`)=RI^XO;/U24:P*ns
%X&GInKW?hR/G3HbPUF>JC)1[HO]0kSBfu`_9c7^&K[.fD8nCo=auTA&[(9!s/=\SFNE+_khStq1"u__]FH4\QB<VWid/7MR"jplZ
%B`t+;mW<+a330uh-,^)?7RI$sCK[gKquKFmNj^Jt;ar/=P$D!c2Ck#XQ0#hh,2dKZO.<dE(n,t"OJ_G1:Dc]]U?ZK*A5Hsi>IYHF
%PD8Pu!o=8fYSlVk<!PqsAi$1bVEuPX\Gi+*+sesfQ1ka_21u9kArJ36(-n9@6nkE&q!*YC-k@U<aCIOd'(8i!<F]*e74uN#]MU+8
%Pfdg<PijpJ`Y-jAnftO]\R*6>nfnJp-KLn(QhBTTd]>MOV1S9u]WB]&C4_9GZ:UE+;Z1a5[jbAgCV<!_4j9"-HpZ6_F3riLK,*mM
%T@PVQ9b7m,TSLXd.\%pRl!I0U1Vnf]a+6<p9dr?bo>.hn\k!lM9?g(+#^!3mqMIGWn)Boi*p*a25WdN,gu&\C63-/jcrCPcLD"In
%&/f0eN9jJO,_b@5i@I8Y&oA^XmU2;<>A419ROh90K:T:($$24G*LJEO^N"b=D&C;?jW[3F9D*m1$@UI,RTIBq\R%Z0kERNNH:TOp
%)]i8)l^#ArlmQ]$j1?r'fo-%L[aCp.28Ncm3dI(/=R=DOk=7GXes]l:aRkq3!oG=:J7KYcYf)0oY>`C8V+$7QY)3e,i!N0h:3@FT
%*A.MUK9E/>a&WOe#km#;jYV^V8r_kg)I_rB3_H<t9VgKF!U:B%QM7n_]0[H+WLn0?UD^0pca`$P_5Sgt4ofl$aS(^/39PK89qidd
%Ggts)U8^*P\V"mq!&HL6pF[d/AH#:o#]6rK%Q0V"N!k\')fj=N+3Qe-OUmCT$9l"Z(NX-=Ur4uMf8_nN6)e&Ri!-'l8@rDk&j-U$
%E4LCCE05MD8ecZRWQ[I)L/3n\5ibdH.ln%i(0NmdHAqa"Y&&UCK>S%DXuJn]^;a,I09%p-#"r%&U4Qjn8MK1Z\EMY-XQ(2+(=mIT
%RlKEG<#m9(l!oK9'aN9:1=7c/iOPq*Q9Uau"B;8L>fYsi-g;_$"XbWrs&'kQrC$%D2//26!?BYrluVEtUg5+Y$<N/AndsDMBe#Gb
%<c8Inq`25m\.T;aegCMa-12:U=K/rJlj_)GEsR,L72Qu/`aGf'TpuD34rF;9B4G'k?C:r!k"8t]&u_)t+<-66(N08g'_?Dcd?%?r
%Uqc1+aKo%FZHAYB6;ejjJ1(_m-#,!!86DN,eC_(02'VL`fE0<p,o*"TUf^INnrVIW_]#6u-<#\N&IYY)<<,E;bQ;faB!:\A7!Qo/
%!F_>@Hl5O)j,MrnUtT&bV8B/3G!55H8/Ae2K8_\=?gPBR=FO^L4i.94,P!g+)=(j]@4=L2K!A?O_#1a'Pc0@q3UUrNb*0=XiA6f!
%#MUoF`tb[&\UAcX(Ve`:hnM7Xg&j*G#&uNE\fp,Wg(R%JQZP*$=aUdc+s]T2mO>GW'+d48aI\)-?T4m]XF.^A2D[XDbPZmh9g'4.
%;0^Mb)nk_RlBaZ0j0<J7?"kF\a"N^#6OZH0GVK,aFGU4q'EV+tlF)X"S+b)f>CW`lN;eRD2C7$^:B_L=7$4Pm+pNl"BS2L"fYsSX
%K6U4g+_XBj0GtcP^.m3i>5e/!Dp/4R2">/iU9te/BXiJT.1otU:%s>GC(+G=#M<j4o4ocDUcSn"#":JEAZ[lh[WK>jf?Fs&o<+/(
%'^WsVP0M5SUbO+!39lZcHY_*C2Rqo'0Xi-;&9:,hC"ajnU*pES3DEf3Ok=6S7dt3/?IWQAplKMdCese%\7h[f+0<OjUN"ASUAc/j
%#*+)DA^!mhL[,LhN*l_ED#BT_#9`O?Pra&:.C"kI>OcIt3@pqUH\fCP?8n7A*HVgMXR=+;E*VMh.kl&\k%Qa0_a++8E"j_MW^8BW
%*nWs+A"\_p`rit)]"ML<#96ABCsr+@(!6Dt;0Z*d?B:g2/VF/XmOFlkJ8IFeS)ijdi<GK.`t\KlHhd.5q(.nQKN[C+9W\Z"C$2$9
%12G]!g0pH=iblEC:1&Sls3bR(Hq04k(Z'iY!pakBb4dT=?*L\rU4)@]JR`H!@M<?.!HZN9Jp=93Uc?ZNqStu.eP'AN"Y<O#q%=eU
%l_4^N?#Ts#`Ol0s.Xr0;RFOYkTcrLpj2!4/'d7TG"ahT]U'mSt<6@R?NSZsF&0)6*@>;+c!j9d*<#X:HDPFR@akcfWG'dUSCj7cL
%Zm@X'113g.,Zs^N`D%L<4WKnt9>k-!Go?R-e"9^*.]]b,adV[/k:aur*F:;`p5f*g'0AS:]-*#0"]:fQOX7R&pKbfW;N,#md)Sgm
%l`tn4g7Z7+]c9khm.5k=IQhNT/N[SV0Y&f%P6JRbD9*Us2(Wlb[9R2V/AoWNV6bR)N?o[7c8KPkH.9$,/YUXX-PTX9W6LQ^cQ^nD
%;kECp^$r8Q;>sZ.DPhe.?0;,+^cAOH)bV7?CatOqQ3RJIHf/AV_dsnTN@Bq\'68S.9R6L,BdOmu4J4Kr,jD0g5R>NffhH`O)$UJ=
%*=p$KPV4rp:U3#KLj:f<+Y&o5,DR^t563F,V=tHO6aO'Q%%H4]O'8#U`Z,jZdnmOsMjsoaU)bDg%.>4s[:I".a8&Ts1;t7nAa5F&
%n/mg#ESCYH8J(+f(2,T>\o>J>[m!53*FpdAe`0]ccn1X2MDc\S=SlMD?[D4Se_'^@o+sJBaMA5n"Xr**Ua[ci"m2e8*O&_u/_2bi
%"BE94L7d`CfH=skI+$j+S[dj)\YYDl``Q/><)Xu##-h*?@Np(so^de94iUFY:=bgBS0mW,EWtDs#.GVh?4h'"(rp[/dRo6Q$`S_2
%\u!bD\"orcLO^VBLkY@g6BX'_c,2S]FfU/sKUjQf%,CqIJ@cD!57F3E`in6Yk0)BK2t:f@L$t[.>tYLB15Jh^b+4)CK:ElrYn.//
%OW2BC9rk#Zd"qd1!^g.,f92fp<B#'Oqg^AC3\b%21UmH-?tnnN:,JeD4FRR_!,5rsBe81Kic)\s_^I:CHN:Ad<-%E>1),mp8ZCWk
%Tf=`$)t$@rOtDLt8gr9BaQnVLC&hLYP>m6Y);rcT+2X_]g;JLup]6;3\pYHM_pqA6Fj0G<kN1#bP<kK=oOO)_Oq8">bI*c2#PKUd
%UqhCQQZN?`3hsY/ea2\MBJf_>gR'U0DVE6"R1WtS\A$n:l#bBDd,$X)IFh(0]TqIS8WaW<05=[<UNa()<\#C9.q1E3ETq[9M@eU(
%b#6&\1a^=1=u&gE]-ZsiLT]2]>G2Z..'OtH5F:N)"n@BS9-lnh=H/WIRqJ*\$h6W0A?jMABRh:qGcu/=9SUe7m>9e;<Y_kr*+65m
%=YJ;OrI>!W)XMnEq*S-#MZo74!C^gS&<&;*^2VPaYM4Ar7RWYupQ'c5mEj7pJ+/MWj-sap)'Nq2!qJ$G)%E/AaXT-PSh6"r.Gunj
%";K*/3EnA<=@YAI*0iPh1ROmSKk9IJi5Cl\R5/J]")A?:'h"g0bPG\<k!`<Z1FQ3'/q=9>G^(+l)5%[K;IZub5D^=dAFp:6Nc8``
%P`(MBU^Q>p&E$RTfbjNGKR.&MgZHel)!IZ'o0Y0A>*B(^TK"L0a,onfj'k-N6R-43Ak/2\lS=L>_;&CLG^udu]EZkK(2h-/)'K:]
%@/qH9g&i7W8L\4IrUoGF*?'gU#m\e2qmlWn8,hBGI1hn:n@`X4G:^;68(iQfh#bZ3RL'(>d9pHCWFc`pYjm6A70o(@(IO@!YW(Q.
%8i01O.=[=]Bfo<*:'!s'"4nbp28H%tens>WVpc;\d1l9,,_.4L?F@r@$u&fMXHX6"-Oiqpd>=.L:/AuaPl]$\pYK;np7<ks[8_FB
%aUjO?/e*W"$>RDM!OVEHTUp%Zlb;337dE])S70^br9"=c$(R'qW.R5]5mA)^/tG,Xo<a*a1!-1^1J\a:&t.4Tehl$@K&KH>l%ZCR
%H4"5^P!i`6f2`"7f.;VF*$qfR8Q]nYAHp1,,[c#H6M"UE8;EX)THn3Z@:Ku?Km+jjK]/g0cp+,s_7Y[8YR\YW@POe>$m+KC)m$5)
%JFM<9oT!k`g3d'!0;G:Si)\^n!8<X9hgRjY*L5&k!\P@`]$Rp:$P\h?/ft*1Uh/XoDB^^SA]c'YA]0;6NN>lF`$I5#FVAadjGZg"
%LeA@nn/cR8kXQAYO,-FqP#mQ#&XO1;r7qH-<"\p=DugN$VqE,1iOPdo.7_/WqTC*68%aPOq;XBi&p(h+>KDb*YONC`el(>a/b`36
%b88;.&WE,@aY;]5nZ#kt`D9ePR\eTQc6IuI?lnZ(@QS4`2]$8r5_6,tE!<`Ua(QM&-HQKc8Q/-p58Dmlg8^GooJB6_?LVF1X9$,/
%W!7#m+NmI@0tctpo<47j!tMWdIJIK\er<f'm?b8u7e=@DE.s0:LDp789p_#V'tkbB,e1gIB##]]QZT&OZ2rbh4CTQV(9]mj9Q_:I
%lo&24EIMkT1<O>j?H2Cfi*<O3=gDu_VhX0V84$=&BlSdVSZ0GCd>EWrZhpr**.cc]KSVKt$'RN+LE>&%V!E,_g]G-];'^fHcEbPR
%5NiRRbhe^X*c,pN%,Si&.d09CNB+c/4A?&CFAbXNlV++eL>+HAcGsG&a:A=g"-`e;qFsN4!,o*e!`4u%@<THm',CHVCe9Do->HX0
%fkAdCl"UTtKhb:H".M@DfqdgV4irYjK<']NmLGhlGQaGVQR'@ae"-)B^&7M(]$n?@K7(?X!j'U^,73:V'n@CGD&nDR]@Qai/`UBW
%`h`:tfl.TLS#<-+<?-GVhToM^.$?n:8(_!*3%rA>0=IO5X3rbA[8HCOH>_4XfGQ=F5^qA)Tj%pKd$'96(d1WkA82C^Yh13mM1s7b
%1II8iB+b0+aq5$S?%D]]2k20+&J-hj4>XkT!A7]-'G3\r5W(@^^)td^:moI`a+1L:M0W'gAZGV5DU+ksGc'P.^ttdcNmhg>$5a_k
%3ae&S=PU>\7a19gk,(hX^P1lOTE&IIG%bi6^o9Xj.KTRF3eahI.V7$5cg)!)7(/ctBFM&0^W8uEOq>$+?MW'&DZA]D`AM]_UZ*R_
%&p4E?Kf6Xrm%2ka58Xu:[`Ga"ZG)HaP*ZauW*NSa[u^G9'4KJY##i<U%_A_rV0PnU8f[!#7[WV"h\+%]hf]bSBB]t\m=>El,faTH
%.h/X?fLd]<742\8]&1*r_?lJRW_#hemf(dpWN"+m+;[CRSdn74OL"VOHhr>6EJr&6l!+t)A+Z;4%"Oq'q^)lK1C@KD<a1e<!0k$-
%X!!jk6m>,#@A>,1$9Gijj<':a9$>gUFA?P.#/F\R4Td5f>H1+^p+YWfBa4Q0IMG,b@=X=DYUDoA30JRHJ4>=9)9`3g&r6RuHp7gb
%3.h5"=`Fn:]<<f(AWl%E=.q^0dtsfW_r_sUAH4+s&St,oWF@5&XF^oM./Qu-i"t'8!u3EodYO3-&qf\/R<8mlSSK6"hosS$NFE'8
%$J(<j0&b'gM0KG,bDk^60N&6"bWU:A&Jk+H=.`6RW83ANGKosTEQ<A%38^fN,`\"ZNSOTuM;o*$\7aX5?&h3J-5fKi,V<P'_96[*
%d8YBrXQN]?D_81GE8_>Rq^U7<&2bbIi9h3*0k5klX.U!C%TQWPFG]m2#-\C!PXo2>L(V-c)MXb*#l#PX!J*Y8D8FbUlhH+Xrgk@\
%PhrB<V82EdWl6oaG"do=37F6nU!+GM")p%$m\_?QKRDi[@(BkgXTg$V6o-<NO4C9>dU`+`d(>.l!?W1i&(P)N28O8H",\e#:[<U:
%")PJ:\IN>01'1kS+dE)bq_mhT*JfG4kjRt#p_h.1F,PRb7"`75HYHfNL4P6-%-TS?Z:4D<,sAR,,9&??Us1"Ae3MH[^C+#i9Lp<r
%SmXKAZ5U`Z*2<b(NB.gH+0i<]S8hfljDQ<2Xs>+a0r"d#!jLg_![W&L+DXO)\aSkQ3UeHa0&R@/G0s>RW*Dqm'.6<o!4:4kK-:4o
%^EF7<RO!$P\3`f_6g2'eL9c3hYa5g/qB5(.=L)2u`I=;+/@&k1"l1[I189in3`2XdcH(00Q68@\*g[4S&bV`,Ojn(4pBK',#G(fV
%8)EG<K`Qn@qC8=GRO<t=k1%6I9:?\Q#9g)MA7QUrn<0hBl+gKJC_gu?RN[?I?u%*f7I'_,0/FPtPTUmn<I't9J-o5q3/o\<HpCnd
%-EkV&6(.SR1cliUQ"[]$-JVJ@a+u&L5V>4`mI*./e''D4IaU-61bIRHhP;rZ_OkAM(lahld".(gV.N*@=H<><7jcRl,EO.:alI92
%0G%7_7)"sSA?-m-3NC0.-f@rO#PaAl"6Y52<X]T@bgG6)MO%>",D_!0'UGVP$-NkUqg/f:ZLE_rhf'0SFi5p,5&d'39M&Y'9Aa!@
%%%6XV<$rr]5m5pHIfulQ,SVVWD@'YoLOtP">ZmH@9t#`A6f3T#7OatJirnG:bqf%8kCXO#gP%*VZUZ,6*jtEeiZ0es`/Ukp$<?6Y
%9lGO-TuZCt*Dnf@W,JaU?IY**j>h=/B!@BM\HG#j5]EeLb[c/81-Can;0=3@T?D8FTk73_:1/C@NDqQ[:8Hl@`g+*FX9k1%!1bK-
%YCfD`lFJc&!>BWQU[o#3b=Z&o1J)A2K%*@V^$4jl%fDZn+'j:kn)T>=`E9rVa^f>:@O!b\I(31L<D)56J;BU8'G4P.JS\%5E<tF4
%'_q""]6Qgl!\SApE[,`iLAd5.qBmF*LE,WE<]rpq8J8o4+L9V.C.o)!J<R!XH7[U>-R'ld)0'DLVi-H<)/ufhboO4C)nuF*cS/T\
%JOU3U*\3d^,!Z>XZ<Luh!e7'j!>eZIn19D3Z<5ZY0`XNEi,tWa(',g""ouBiUc;$a0eX.DM=-,9X-#+N2jWHBR::Hp$$IDt0KWoi
%i<mm#9W64;MPV$_f,UYTC]L9%i1OI+*P>+G5Z9dGl^Pf,$%N?"<G5VV@YXsE6fU1GY_taiC!^W4m7<AafsoY$V.(T!&btJmLX5H4
%_9HHeC?UdGk,"BY)1)9/n*)DT(Q%?Q%1b.[%$d<!a^d/<",+(X[UL_<4F]%-XQmR[YjB<n*Y77f<m7CB'G=rd4X35r1E=:$&r$\j
%rj'!;A1"Q1NUPT8^MM!8[g,;_W:DLOJN:NLMJ<V5F2c4&MD81+9-AbNA8mN)?D<HFa3T-O7Ks`AL<X4gAJ4/@9+2oe'-Sk$lopP#
%0*B$U-a"4,fe'PW-WA5e)>RV1JAs4:`7,PS6IMjoB^-caTSkH;@;Xp]bKZD7(sb-!-P@E'IrJaik@J-s"TC@M.3`Pi3T'Q5p/Uko
%gpbJVqg]q!TL[1/cM<sin__ZIoZ[n1s19TP\,W`4f>%?`s7ZB2^\n#-++@=D^\^fVr5YH0o:Q$W5<o2GVn`2"J,GWtrpoZY5Q9+r
%TlE<sYOt\`rp`cKs3(HAk<JqCl!OG15Q;frn>#"KJ+n/:rt#.gDu\u"!Z2'(WW~>
%AI9_PrivateDataEnd
